
BTS_Station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c594  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000998  0800c738  0800c738  0000d738  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d0d0  0800d0d0  0000f240  2**0
                  CONTENTS
  4 .ARM          00000008  0800d0d0  0800d0d0  0000e0d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d0d8  0800d0d8  0000f240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d0d8  0800d0d8  0000e0d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d0dc  0800d0dc  0000e0dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000240  20000000  0800d0e0  0000f000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bc8  20000240  0800d320  0000f240  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e08  0800d320  0000fe08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f240  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013d09  00000000  00000000  0000f270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b7d  00000000  00000000  00022f79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d8  00000000  00000000  00026af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e60  00000000  00000000  00027dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b651  00000000  00000000  00028c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a855  00000000  00000000  00044281  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e061  00000000  00000000  0005ead6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fcb37  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063cc  00000000  00000000  000fcb7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00102f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000240 	.word	0x20000240
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c71c 	.word	0x0800c71c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000244 	.word	0x20000244
 80001dc:	0800c71c 	.word	0x0800c71c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96a 	b.w	8000f44 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	460c      	mov	r4, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14e      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c94:	4694      	mov	ip, r2
 8000c96:	458c      	cmp	ip, r1
 8000c98:	4686      	mov	lr, r0
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	d962      	bls.n	8000d66 <__udivmoddi4+0xde>
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0320 	rsb	r3, r2, #32
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	4319      	orrs	r1, r3
 8000cb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f f68c 	uxth.w	r6, ip
 8000cbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb04 f106 	mul.w	r1, r4, r6
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cde:	f080 8112 	bcs.w	8000f06 <__udivmoddi4+0x27e>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 810f 	bls.w	8000f06 <__udivmoddi4+0x27e>
 8000ce8:	3c02      	subs	r4, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f606 	mul.w	r6, r0, r6
 8000d02:	429e      	cmp	r6, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x94>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0e:	f080 80fc 	bcs.w	8000f0a <__udivmoddi4+0x282>
 8000d12:	429e      	cmp	r6, r3
 8000d14:	f240 80f9 	bls.w	8000f0a <__udivmoddi4+0x282>
 8000d18:	4463      	add	r3, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11d      	cbz	r5, 8000d2e <__udivmoddi4+0xa6>
 8000d26:	40d3      	lsrs	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d905      	bls.n	8000d42 <__udivmoddi4+0xba>
 8000d36:	b10d      	cbz	r5, 8000d3c <__udivmoddi4+0xb4>
 8000d38:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e7f5      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d146      	bne.n	8000dd8 <__udivmoddi4+0x150>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xcc>
 8000d4e:	4290      	cmp	r0, r2
 8000d50:	f0c0 80f0 	bcc.w	8000f34 <__udivmoddi4+0x2ac>
 8000d54:	1a86      	subs	r6, r0, r2
 8000d56:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	d0e6      	beq.n	8000d2e <__udivmoddi4+0xa6>
 8000d60:	e9c5 6300 	strd	r6, r3, [r5]
 8000d64:	e7e3      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x204>
 8000d6c:	eba1 040c 	sub.w	r4, r1, ip
 8000d70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d74:	fa1f f78c 	uxth.w	r7, ip
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb08 4416 	mls	r4, r8, r6, r4
 8000d86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8a:	fb07 f006 	mul.w	r0, r7, r6
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x11c>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x11a>
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	f200 80cd 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000da2:	4626      	mov	r6, r4
 8000da4:	1a1c      	subs	r4, r3, r0
 8000da6:	fa1f f38e 	uxth.w	r3, lr
 8000daa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dae:	fb08 4410 	mls	r4, r8, r0, r4
 8000db2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db6:	fb00 f707 	mul.w	r7, r0, r7
 8000dba:	429f      	cmp	r7, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x148>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x146>
 8000dc8:	429f      	cmp	r7, r3
 8000dca:	f200 80b0 	bhi.w	8000f2e <__udivmoddi4+0x2a6>
 8000dce:	4620      	mov	r0, r4
 8000dd0:	1bdb      	subs	r3, r3, r7
 8000dd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0x9c>
 8000dd8:	f1c1 0620 	rsb	r6, r1, #32
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	fa22 f706 	lsr.w	r7, r2, r6
 8000de2:	431f      	orrs	r7, r3
 8000de4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dec:	ea43 030c 	orr.w	r3, r3, ip
 8000df0:	40f4      	lsrs	r4, r6
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	0c38      	lsrs	r0, r7, #16
 8000df8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000e00:	fa1f fc87 	uxth.w	ip, r7
 8000e04:	fb00 441e 	mls	r4, r0, lr, r4
 8000e08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e10:	45a1      	cmp	r9, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x1a6>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e1e:	f080 8084 	bcs.w	8000f2a <__udivmoddi4+0x2a2>
 8000e22:	45a1      	cmp	r9, r4
 8000e24:	f240 8081 	bls.w	8000f2a <__udivmoddi4+0x2a2>
 8000e28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e2c:	443c      	add	r4, r7
 8000e2e:	eba4 0409 	sub.w	r4, r4, r9
 8000e32:	fa1f f983 	uxth.w	r9, r3
 8000e36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x1d2>
 8000e4a:	193c      	adds	r4, r7, r4
 8000e4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e50:	d267      	bcs.n	8000f22 <__udivmoddi4+0x29a>
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d965      	bls.n	8000f22 <__udivmoddi4+0x29a>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e62:	eba4 040c 	sub.w	r4, r4, ip
 8000e66:	429c      	cmp	r4, r3
 8000e68:	46ce      	mov	lr, r9
 8000e6a:	469c      	mov	ip, r3
 8000e6c:	d351      	bcc.n	8000f12 <__udivmoddi4+0x28a>
 8000e6e:	d04e      	beq.n	8000f0e <__udivmoddi4+0x286>
 8000e70:	b155      	cbz	r5, 8000e88 <__udivmoddi4+0x200>
 8000e72:	ebb8 030e 	subs.w	r3, r8, lr
 8000e76:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7e:	40cb      	lsrs	r3, r1
 8000e80:	431e      	orrs	r6, r3
 8000e82:	40cc      	lsrs	r4, r1
 8000e84:	e9c5 6400 	strd	r6, r4, [r5]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	e750      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f103 	lsr.w	r1, r0, r3
 8000e94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e98:	fa24 f303 	lsr.w	r3, r4, r3
 8000e9c:	4094      	lsls	r4, r2
 8000e9e:	430c      	orrs	r4, r1
 8000ea0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea8:	fa1f f78c 	uxth.w	r7, ip
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb4:	0c23      	lsrs	r3, r4, #16
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	fb00 f107 	mul.w	r1, r0, r7
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x24c>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eca:	d22c      	bcs.n	8000f26 <__udivmoddi4+0x29e>
 8000ecc:	4299      	cmp	r1, r3
 8000ece:	d92a      	bls.n	8000f26 <__udivmoddi4+0x29e>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000edc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee4:	fb01 f307 	mul.w	r3, r1, r7
 8000ee8:	42a3      	cmp	r3, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x276>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ef4:	d213      	bcs.n	8000f1e <__udivmoddi4+0x296>
 8000ef6:	42a3      	cmp	r3, r4
 8000ef8:	d911      	bls.n	8000f1e <__udivmoddi4+0x296>
 8000efa:	3902      	subs	r1, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	1ae4      	subs	r4, r4, r3
 8000f00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f04:	e739      	b.n	8000d7a <__udivmoddi4+0xf2>
 8000f06:	4604      	mov	r4, r0
 8000f08:	e6f0      	b.n	8000cec <__udivmoddi4+0x64>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e706      	b.n	8000d1c <__udivmoddi4+0x94>
 8000f0e:	45c8      	cmp	r8, r9
 8000f10:	d2ae      	bcs.n	8000e70 <__udivmoddi4+0x1e8>
 8000f12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1a:	3801      	subs	r0, #1
 8000f1c:	e7a8      	b.n	8000e70 <__udivmoddi4+0x1e8>
 8000f1e:	4631      	mov	r1, r6
 8000f20:	e7ed      	b.n	8000efe <__udivmoddi4+0x276>
 8000f22:	4603      	mov	r3, r0
 8000f24:	e799      	b.n	8000e5a <__udivmoddi4+0x1d2>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e7d4      	b.n	8000ed4 <__udivmoddi4+0x24c>
 8000f2a:	46d6      	mov	lr, sl
 8000f2c:	e77f      	b.n	8000e2e <__udivmoddi4+0x1a6>
 8000f2e:	4463      	add	r3, ip
 8000f30:	3802      	subs	r0, #2
 8000f32:	e74d      	b.n	8000dd0 <__udivmoddi4+0x148>
 8000f34:	4606      	mov	r6, r0
 8000f36:	4623      	mov	r3, r4
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e70f      	b.n	8000d5c <__udivmoddi4+0xd4>
 8000f3c:	3e02      	subs	r6, #2
 8000f3e:	4463      	add	r3, ip
 8000f40:	e730      	b.n	8000da4 <__udivmoddi4+0x11c>
 8000f42:	bf00      	nop

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <average>:
	uint32_t rmin,
	uint32_t rmax
);

static inline float average(float a, float b)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f52:	edc7 0a00 	vstr	s1, [r7]
    return (a + b) / 2.0;
 8000f56:	ed97 7a01 	vldr	s14, [r7, #4]
 8000f5a:	edd7 7a00 	vldr	s15, [r7]
 8000f5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f62:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8000f66:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000f6a:	eef0 7a66 	vmov.f32	s15, s13
}
 8000f6e:	eeb0 0a67 	vmov.f32	s0, s15
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f82:	f001 fa8b 	bl	800249c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f86:	f000 f85d 	bl	8001044 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f8a:	f000 fa73 	bl	8001474 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f8e:	f000 fa51 	bl	8001434 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000f92:	f000 f9fb 	bl	800138c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000f96:	f000 f8c1 	bl	800111c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000f9a:	f000 f9cd 	bl	8001338 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000f9e:	f000 fa1f 	bl	80013e0 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 8000fa2:	f000 f929 	bl	80011f8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  SIMCOM_Init(subscriberHandlerCb);
 8000fa6:	481c      	ldr	r0, [pc, #112]	@ (8001018 <main+0x9c>)
 8000fa8:	f006 fbc2 	bl	8007730 <SIMCOM_Init>

  /* The sensors are using ADC interface */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_buffer, ADC_CHANNEL_SIZE);
 8000fac:	2204      	movs	r2, #4
 8000fae:	491b      	ldr	r1, [pc, #108]	@ (800101c <main+0xa0>)
 8000fb0:	481b      	ldr	r0, [pc, #108]	@ (8001020 <main+0xa4>)
 8000fb2:	f001 fb4d 	bl	8002650 <HAL_ADC_Start_DMA>
  LM35_Init(adcMultiChannelGetValue);
 8000fb6:	481b      	ldr	r0, [pc, #108]	@ (8001024 <main+0xa8>)
 8000fb8:	f006 f904 	bl	80071c4 <LM35_Init>
  MQ135_Init(adcMultiChannelGetValue);
 8000fbc:	4819      	ldr	r0, [pc, #100]	@ (8001024 <main+0xa8>)
 8000fbe:	f006 f971 	bl	80072a4 <MQ135_Init>
  RainWater_Init(adcMultiChannelGetValue);
 8000fc2:	4818      	ldr	r0, [pc, #96]	@ (8001024 <main+0xa8>)
 8000fc4:	f006 fa02 	bl	80073cc <RainWater_Init>

  /* The sensors are using LIN protocol */
  DHT_Init(&dht11_id0, DHT11, &htim1, DHT11_ID0_GPIO_Port, DHT11_ID0_Pin);
 8000fc8:	2380      	movs	r3, #128	@ 0x80
 8000fca:	9300      	str	r3, [sp, #0]
 8000fcc:	4b16      	ldr	r3, [pc, #88]	@ (8001028 <main+0xac>)
 8000fce:	4a17      	ldr	r2, [pc, #92]	@ (800102c <main+0xb0>)
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	4817      	ldr	r0, [pc, #92]	@ (8001030 <main+0xb4>)
 8000fd4:	f005 fcb8 	bl	8006948 <DHT_Init>
  DHT_Init(&dht11_id1, DHT11, &htim1, DHT11_ID1_GPIO_Port, DHT11_ID1_Pin);
 8000fd8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fdc:	9300      	str	r3, [sp, #0]
 8000fde:	4b12      	ldr	r3, [pc, #72]	@ (8001028 <main+0xac>)
 8000fe0:	4a12      	ldr	r2, [pc, #72]	@ (800102c <main+0xb0>)
 8000fe2:	2101      	movs	r1, #1
 8000fe4:	4813      	ldr	r0, [pc, #76]	@ (8001034 <main+0xb8>)
 8000fe6:	f005 fcaf 	bl	8006948 <DHT_Init>
  eventSerial_init(); // Get value temp of dht22 from rs232 interface
 8000fea:	f005 fe97 	bl	8006d1c <eventSerial_init>

  EventButton_Init();
 8000fee:	f005 fd69 	bl	8006ac4 <EventButton_Init>

  publisherTimerEvt = TimerStart("publisherTimerCb", PUBLISHER_NORMAL_TIMEOUT, TIMER_REPEAT_FOREVER, publisherTimerCb, NULL);
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	9300      	str	r3, [sp, #0]
 8000ff6:	4b10      	ldr	r3, [pc, #64]	@ (8001038 <main+0xbc>)
 8000ff8:	22ff      	movs	r2, #255	@ 0xff
 8000ffa:	f247 5130 	movw	r1, #30000	@ 0x7530
 8000ffe:	480f      	ldr	r0, [pc, #60]	@ (800103c <main+0xc0>)
 8001000:	f006 fd94 	bl	8007b2c <TimerStart>
 8001004:	4603      	mov	r3, r0
 8001006:	461a      	mov	r2, r3
 8001008:	4b0d      	ldr	r3, [pc, #52]	@ (8001040 <main+0xc4>)
 800100a:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  processTimerScheduler();
 800100c:	f006 fe68 	bl	8007ce0 <processTimerScheduler>
	  processSerialReceiver();
 8001010:	f005 fe8e 	bl	8006d30 <processSerialReceiver>
	  processTimerScheduler();
 8001014:	bf00      	nop
 8001016:	e7f9      	b.n	800100c <main+0x90>
 8001018:	08001ce5 	.word	0x08001ce5
 800101c:	20000624 	.word	0x20000624
 8001020:	2000025c 	.word	0x2000025c
 8001024:	080015dd 	.word	0x080015dd
 8001028:	40020800 	.word	0x40020800
 800102c:	20000304 	.word	0x20000304
 8001030:	2000062c 	.word	0x2000062c
 8001034:	20000644 	.word	0x20000644
 8001038:	08001609 	.word	0x08001609
 800103c:	0800c738 	.word	0x0800c738
 8001040:	20000000 	.word	0x20000000

08001044 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b094      	sub	sp, #80	@ 0x50
 8001048:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800104a:	f107 0320 	add.w	r3, r7, #32
 800104e:	2230      	movs	r2, #48	@ 0x30
 8001050:	2100      	movs	r1, #0
 8001052:	4618      	mov	r0, r3
 8001054:	f007 ffa8 	bl	8008fa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001058:	f107 030c 	add.w	r3, r7, #12
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001068:	2300      	movs	r3, #0
 800106a:	60bb      	str	r3, [r7, #8]
 800106c:	4b29      	ldr	r3, [pc, #164]	@ (8001114 <SystemClock_Config+0xd0>)
 800106e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001070:	4a28      	ldr	r2, [pc, #160]	@ (8001114 <SystemClock_Config+0xd0>)
 8001072:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001076:	6413      	str	r3, [r2, #64]	@ 0x40
 8001078:	4b26      	ldr	r3, [pc, #152]	@ (8001114 <SystemClock_Config+0xd0>)
 800107a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800107c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001080:	60bb      	str	r3, [r7, #8]
 8001082:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001084:	2300      	movs	r3, #0
 8001086:	607b      	str	r3, [r7, #4]
 8001088:	4b23      	ldr	r3, [pc, #140]	@ (8001118 <SystemClock_Config+0xd4>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001090:	4a21      	ldr	r2, [pc, #132]	@ (8001118 <SystemClock_Config+0xd4>)
 8001092:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001096:	6013      	str	r3, [r2, #0]
 8001098:	4b1f      	ldr	r3, [pc, #124]	@ (8001118 <SystemClock_Config+0xd4>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80010a0:	607b      	str	r3, [r7, #4]
 80010a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010a4:	2302      	movs	r3, #2
 80010a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010a8:	2301      	movs	r3, #1
 80010aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010ac:	2310      	movs	r3, #16
 80010ae:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010b0:	2302      	movs	r3, #2
 80010b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010b4:	2300      	movs	r3, #0
 80010b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80010b8:	2310      	movs	r3, #16
 80010ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010bc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80010c0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80010c2:	2304      	movs	r3, #4
 80010c4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010c6:	2307      	movs	r3, #7
 80010c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ca:	f107 0320 	add.w	r3, r7, #32
 80010ce:	4618      	mov	r0, r3
 80010d0:	f002 fe1a 	bl	8003d08 <HAL_RCC_OscConfig>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80010da:	f000 feb5 	bl	8001e48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010de:	230f      	movs	r3, #15
 80010e0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010e2:	2302      	movs	r3, #2
 80010e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010e6:	2300      	movs	r3, #0
 80010e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010f0:	2300      	movs	r3, #0
 80010f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010f4:	f107 030c 	add.w	r3, r7, #12
 80010f8:	2102      	movs	r1, #2
 80010fa:	4618      	mov	r0, r3
 80010fc:	f003 f87c 	bl	80041f8 <HAL_RCC_ClockConfig>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001106:	f000 fe9f 	bl	8001e48 <Error_Handler>
  }
}
 800110a:	bf00      	nop
 800110c:	3750      	adds	r7, #80	@ 0x50
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40023800 	.word	0x40023800
 8001118:	40007000 	.word	0x40007000

0800111c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001122:	463b      	mov	r3, r7
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800112e:	4b2f      	ldr	r3, [pc, #188]	@ (80011ec <MX_ADC1_Init+0xd0>)
 8001130:	4a2f      	ldr	r2, [pc, #188]	@ (80011f0 <MX_ADC1_Init+0xd4>)
 8001132:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001134:	4b2d      	ldr	r3, [pc, #180]	@ (80011ec <MX_ADC1_Init+0xd0>)
 8001136:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800113a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800113c:	4b2b      	ldr	r3, [pc, #172]	@ (80011ec <MX_ADC1_Init+0xd0>)
 800113e:	2200      	movs	r2, #0
 8001140:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001142:	4b2a      	ldr	r3, [pc, #168]	@ (80011ec <MX_ADC1_Init+0xd0>)
 8001144:	2201      	movs	r2, #1
 8001146:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001148:	4b28      	ldr	r3, [pc, #160]	@ (80011ec <MX_ADC1_Init+0xd0>)
 800114a:	2201      	movs	r2, #1
 800114c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800114e:	4b27      	ldr	r3, [pc, #156]	@ (80011ec <MX_ADC1_Init+0xd0>)
 8001150:	2200      	movs	r2, #0
 8001152:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001156:	4b25      	ldr	r3, [pc, #148]	@ (80011ec <MX_ADC1_Init+0xd0>)
 8001158:	2200      	movs	r2, #0
 800115a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800115c:	4b23      	ldr	r3, [pc, #140]	@ (80011ec <MX_ADC1_Init+0xd0>)
 800115e:	4a25      	ldr	r2, [pc, #148]	@ (80011f4 <MX_ADC1_Init+0xd8>)
 8001160:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001162:	4b22      	ldr	r3, [pc, #136]	@ (80011ec <MX_ADC1_Init+0xd0>)
 8001164:	2200      	movs	r2, #0
 8001166:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8001168:	4b20      	ldr	r3, [pc, #128]	@ (80011ec <MX_ADC1_Init+0xd0>)
 800116a:	2204      	movs	r2, #4
 800116c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800116e:	4b1f      	ldr	r3, [pc, #124]	@ (80011ec <MX_ADC1_Init+0xd0>)
 8001170:	2201      	movs	r2, #1
 8001172:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001176:	4b1d      	ldr	r3, [pc, #116]	@ (80011ec <MX_ADC1_Init+0xd0>)
 8001178:	2201      	movs	r2, #1
 800117a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800117c:	481b      	ldr	r0, [pc, #108]	@ (80011ec <MX_ADC1_Init+0xd0>)
 800117e:	f001 fa23 	bl	80025c8 <HAL_ADC_Init>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001188:	f000 fe5e 	bl	8001e48 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800118c:	2301      	movs	r3, #1
 800118e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001190:	2302      	movs	r3, #2
 8001192:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8001194:	2304      	movs	r3, #4
 8001196:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001198:	463b      	mov	r3, r7
 800119a:	4619      	mov	r1, r3
 800119c:	4813      	ldr	r0, [pc, #76]	@ (80011ec <MX_ADC1_Init+0xd0>)
 800119e:	f001 fb65 	bl	800286c <HAL_ADC_ConfigChannel>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80011a8:	f000 fe4e 	bl	8001e48 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80011ac:	230a      	movs	r3, #10
 80011ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80011b0:	2303      	movs	r3, #3
 80011b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011b4:	463b      	mov	r3, r7
 80011b6:	4619      	mov	r1, r3
 80011b8:	480c      	ldr	r0, [pc, #48]	@ (80011ec <MX_ADC1_Init+0xd0>)
 80011ba:	f001 fb57 	bl	800286c <HAL_ADC_ConfigChannel>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80011c4:	f000 fe40 	bl	8001e48 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80011c8:	230b      	movs	r3, #11
 80011ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80011cc:	2304      	movs	r3, #4
 80011ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011d0:	463b      	mov	r3, r7
 80011d2:	4619      	mov	r1, r3
 80011d4:	4805      	ldr	r0, [pc, #20]	@ (80011ec <MX_ADC1_Init+0xd0>)
 80011d6:	f001 fb49 	bl	800286c <HAL_ADC_ConfigChannel>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80011e0:	f000 fe32 	bl	8001e48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011e4:	bf00      	nop
 80011e6:	3710      	adds	r7, #16
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	2000025c 	.word	0x2000025c
 80011f0:	40012000 	.word	0x40012000
 80011f4:	0f000001 	.word	0x0f000001

080011f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b096      	sub	sp, #88	@ 0x58
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011fe:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	609a      	str	r2, [r3, #8]
 800120a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800120c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001216:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	60da      	str	r2, [r3, #12]
 8001224:	611a      	str	r2, [r3, #16]
 8001226:	615a      	str	r2, [r3, #20]
 8001228:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800122a:	1d3b      	adds	r3, r7, #4
 800122c:	2220      	movs	r2, #32
 800122e:	2100      	movs	r1, #0
 8001230:	4618      	mov	r0, r3
 8001232:	f007 feb9 	bl	8008fa8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001236:	4b3e      	ldr	r3, [pc, #248]	@ (8001330 <MX_TIM1_Init+0x138>)
 8001238:	4a3e      	ldr	r2, [pc, #248]	@ (8001334 <MX_TIM1_Init+0x13c>)
 800123a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 800123c:	4b3c      	ldr	r3, [pc, #240]	@ (8001330 <MX_TIM1_Init+0x138>)
 800123e:	2253      	movs	r2, #83	@ 0x53
 8001240:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001242:	4b3b      	ldr	r3, [pc, #236]	@ (8001330 <MX_TIM1_Init+0x138>)
 8001244:	2200      	movs	r2, #0
 8001246:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001248:	4b39      	ldr	r3, [pc, #228]	@ (8001330 <MX_TIM1_Init+0x138>)
 800124a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800124e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001250:	4b37      	ldr	r3, [pc, #220]	@ (8001330 <MX_TIM1_Init+0x138>)
 8001252:	2200      	movs	r2, #0
 8001254:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001256:	4b36      	ldr	r3, [pc, #216]	@ (8001330 <MX_TIM1_Init+0x138>)
 8001258:	2200      	movs	r2, #0
 800125a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800125c:	4b34      	ldr	r3, [pc, #208]	@ (8001330 <MX_TIM1_Init+0x138>)
 800125e:	2200      	movs	r2, #0
 8001260:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001262:	4833      	ldr	r0, [pc, #204]	@ (8001330 <MX_TIM1_Init+0x138>)
 8001264:	f003 f9e8 	bl	8004638 <HAL_TIM_Base_Init>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800126e:	f000 fdeb 	bl	8001e48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001272:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001276:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001278:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800127c:	4619      	mov	r1, r3
 800127e:	482c      	ldr	r0, [pc, #176]	@ (8001330 <MX_TIM1_Init+0x138>)
 8001280:	f003 fb3a 	bl	80048f8 <HAL_TIM_ConfigClockSource>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800128a:	f000 fddd 	bl	8001e48 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800128e:	4828      	ldr	r0, [pc, #160]	@ (8001330 <MX_TIM1_Init+0x138>)
 8001290:	f003 fa7c 	bl	800478c <HAL_TIM_OC_Init>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800129a:	f000 fdd5 	bl	8001e48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800129e:	2300      	movs	r3, #0
 80012a0:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a2:	2300      	movs	r3, #0
 80012a4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012a6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80012aa:	4619      	mov	r1, r3
 80012ac:	4820      	ldr	r0, [pc, #128]	@ (8001330 <MX_TIM1_Init+0x138>)
 80012ae:	f003 fe9d 	bl	8004fec <HAL_TIMEx_MasterConfigSynchronization>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80012b8:	f000 fdc6 	bl	8001e48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80012bc:	2300      	movs	r3, #0
 80012be:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012c4:	2300      	movs	r3, #0
 80012c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012c8:	2300      	movs	r3, #0
 80012ca:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012cc:	2300      	movs	r3, #0
 80012ce:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012d0:	2300      	movs	r3, #0
 80012d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012d4:	2300      	movs	r3, #0
 80012d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012dc:	2200      	movs	r2, #0
 80012de:	4619      	mov	r1, r3
 80012e0:	4813      	ldr	r0, [pc, #76]	@ (8001330 <MX_TIM1_Init+0x138>)
 80012e2:	f003 faad 	bl	8004840 <HAL_TIM_OC_ConfigChannel>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80012ec:	f000 fdac 	bl	8001e48 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012f0:	2300      	movs	r3, #0
 80012f2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012f4:	2300      	movs	r3, #0
 80012f6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012f8:	2300      	movs	r3, #0
 80012fa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012fc:	2300      	movs	r3, #0
 80012fe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001304:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001308:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800130a:	2300      	movs	r3, #0
 800130c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800130e:	1d3b      	adds	r3, r7, #4
 8001310:	4619      	mov	r1, r3
 8001312:	4807      	ldr	r0, [pc, #28]	@ (8001330 <MX_TIM1_Init+0x138>)
 8001314:	f003 fed8 	bl	80050c8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800131e:	f000 fd93 	bl	8001e48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001322:	4803      	ldr	r0, [pc, #12]	@ (8001330 <MX_TIM1_Init+0x138>)
 8001324:	f000 fe74 	bl	8002010 <HAL_TIM_MspPostInit>

}
 8001328:	bf00      	nop
 800132a:	3758      	adds	r7, #88	@ 0x58
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20000304 	.word	0x20000304
 8001334:	40010000 	.word	0x40010000

08001338 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800133c:	4b11      	ldr	r3, [pc, #68]	@ (8001384 <MX_USART1_UART_Init+0x4c>)
 800133e:	4a12      	ldr	r2, [pc, #72]	@ (8001388 <MX_USART1_UART_Init+0x50>)
 8001340:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001342:	4b10      	ldr	r3, [pc, #64]	@ (8001384 <MX_USART1_UART_Init+0x4c>)
 8001344:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001348:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800134a:	4b0e      	ldr	r3, [pc, #56]	@ (8001384 <MX_USART1_UART_Init+0x4c>)
 800134c:	2200      	movs	r2, #0
 800134e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001350:	4b0c      	ldr	r3, [pc, #48]	@ (8001384 <MX_USART1_UART_Init+0x4c>)
 8001352:	2200      	movs	r2, #0
 8001354:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001356:	4b0b      	ldr	r3, [pc, #44]	@ (8001384 <MX_USART1_UART_Init+0x4c>)
 8001358:	2200      	movs	r2, #0
 800135a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800135c:	4b09      	ldr	r3, [pc, #36]	@ (8001384 <MX_USART1_UART_Init+0x4c>)
 800135e:	220c      	movs	r2, #12
 8001360:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001362:	4b08      	ldr	r3, [pc, #32]	@ (8001384 <MX_USART1_UART_Init+0x4c>)
 8001364:	2200      	movs	r2, #0
 8001366:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001368:	4b06      	ldr	r3, [pc, #24]	@ (8001384 <MX_USART1_UART_Init+0x4c>)
 800136a:	2200      	movs	r2, #0
 800136c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800136e:	4805      	ldr	r0, [pc, #20]	@ (8001384 <MX_USART1_UART_Init+0x4c>)
 8001370:	f003 fefc 	bl	800516c <HAL_UART_Init>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800137a:	f000 fd65 	bl	8001e48 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	2000034c 	.word	0x2000034c
 8001388:	40011000 	.word	0x40011000

0800138c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001390:	4b11      	ldr	r3, [pc, #68]	@ (80013d8 <MX_USART2_UART_Init+0x4c>)
 8001392:	4a12      	ldr	r2, [pc, #72]	@ (80013dc <MX_USART2_UART_Init+0x50>)
 8001394:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001396:	4b10      	ldr	r3, [pc, #64]	@ (80013d8 <MX_USART2_UART_Init+0x4c>)
 8001398:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800139c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800139e:	4b0e      	ldr	r3, [pc, #56]	@ (80013d8 <MX_USART2_UART_Init+0x4c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013a4:	4b0c      	ldr	r3, [pc, #48]	@ (80013d8 <MX_USART2_UART_Init+0x4c>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013aa:	4b0b      	ldr	r3, [pc, #44]	@ (80013d8 <MX_USART2_UART_Init+0x4c>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013b0:	4b09      	ldr	r3, [pc, #36]	@ (80013d8 <MX_USART2_UART_Init+0x4c>)
 80013b2:	220c      	movs	r2, #12
 80013b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013b6:	4b08      	ldr	r3, [pc, #32]	@ (80013d8 <MX_USART2_UART_Init+0x4c>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013bc:	4b06      	ldr	r3, [pc, #24]	@ (80013d8 <MX_USART2_UART_Init+0x4c>)
 80013be:	2200      	movs	r2, #0
 80013c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013c2:	4805      	ldr	r0, [pc, #20]	@ (80013d8 <MX_USART2_UART_Init+0x4c>)
 80013c4:	f003 fed2 	bl	800516c <HAL_UART_Init>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013ce:	f000 fd3b 	bl	8001e48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20000394 	.word	0x20000394
 80013dc:	40004400 	.word	0x40004400

080013e0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80013e4:	4b11      	ldr	r3, [pc, #68]	@ (800142c <MX_USART6_UART_Init+0x4c>)
 80013e6:	4a12      	ldr	r2, [pc, #72]	@ (8001430 <MX_USART6_UART_Init+0x50>)
 80013e8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80013ea:	4b10      	ldr	r3, [pc, #64]	@ (800142c <MX_USART6_UART_Init+0x4c>)
 80013ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013f0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80013f2:	4b0e      	ldr	r3, [pc, #56]	@ (800142c <MX_USART6_UART_Init+0x4c>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80013f8:	4b0c      	ldr	r3, [pc, #48]	@ (800142c <MX_USART6_UART_Init+0x4c>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80013fe:	4b0b      	ldr	r3, [pc, #44]	@ (800142c <MX_USART6_UART_Init+0x4c>)
 8001400:	2200      	movs	r2, #0
 8001402:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001404:	4b09      	ldr	r3, [pc, #36]	@ (800142c <MX_USART6_UART_Init+0x4c>)
 8001406:	220c      	movs	r2, #12
 8001408:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800140a:	4b08      	ldr	r3, [pc, #32]	@ (800142c <MX_USART6_UART_Init+0x4c>)
 800140c:	2200      	movs	r2, #0
 800140e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001410:	4b06      	ldr	r3, [pc, #24]	@ (800142c <MX_USART6_UART_Init+0x4c>)
 8001412:	2200      	movs	r2, #0
 8001414:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001416:	4805      	ldr	r0, [pc, #20]	@ (800142c <MX_USART6_UART_Init+0x4c>)
 8001418:	f003 fea8 	bl	800516c <HAL_UART_Init>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001422:	f000 fd11 	bl	8001e48 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	200003dc 	.word	0x200003dc
 8001430:	40011400 	.word	0x40011400

08001434 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	607b      	str	r3, [r7, #4]
 800143e:	4b0c      	ldr	r3, [pc, #48]	@ (8001470 <MX_DMA_Init+0x3c>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001442:	4a0b      	ldr	r2, [pc, #44]	@ (8001470 <MX_DMA_Init+0x3c>)
 8001444:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001448:	6313      	str	r3, [r2, #48]	@ 0x30
 800144a:	4b09      	ldr	r3, [pc, #36]	@ (8001470 <MX_DMA_Init+0x3c>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001452:	607b      	str	r3, [r7, #4]
 8001454:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001456:	2200      	movs	r2, #0
 8001458:	2100      	movs	r1, #0
 800145a:	2038      	movs	r0, #56	@ 0x38
 800145c:	f001 fd81 	bl	8002f62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001460:	2038      	movs	r0, #56	@ 0x38
 8001462:	f001 fd9a 	bl	8002f9a <HAL_NVIC_EnableIRQ>

}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40023800 	.word	0x40023800

08001474 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b08a      	sub	sp, #40	@ 0x28
 8001478:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147a:	f107 0314 	add.w	r3, r7, #20
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	605a      	str	r2, [r3, #4]
 8001484:	609a      	str	r2, [r3, #8]
 8001486:	60da      	str	r2, [r3, #12]
 8001488:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	613b      	str	r3, [r7, #16]
 800148e:	4b4f      	ldr	r3, [pc, #316]	@ (80015cc <MX_GPIO_Init+0x158>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001492:	4a4e      	ldr	r2, [pc, #312]	@ (80015cc <MX_GPIO_Init+0x158>)
 8001494:	f043 0304 	orr.w	r3, r3, #4
 8001498:	6313      	str	r3, [r2, #48]	@ 0x30
 800149a:	4b4c      	ldr	r3, [pc, #304]	@ (80015cc <MX_GPIO_Init+0x158>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149e:	f003 0304 	and.w	r3, r3, #4
 80014a2:	613b      	str	r3, [r7, #16]
 80014a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	60fb      	str	r3, [r7, #12]
 80014aa:	4b48      	ldr	r3, [pc, #288]	@ (80015cc <MX_GPIO_Init+0x158>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ae:	4a47      	ldr	r2, [pc, #284]	@ (80015cc <MX_GPIO_Init+0x158>)
 80014b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014b6:	4b45      	ldr	r3, [pc, #276]	@ (80015cc <MX_GPIO_Init+0x158>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	60bb      	str	r3, [r7, #8]
 80014c6:	4b41      	ldr	r3, [pc, #260]	@ (80015cc <MX_GPIO_Init+0x158>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ca:	4a40      	ldr	r2, [pc, #256]	@ (80015cc <MX_GPIO_Init+0x158>)
 80014cc:	f043 0301 	orr.w	r3, r3, #1
 80014d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014d2:	4b3e      	ldr	r3, [pc, #248]	@ (80015cc <MX_GPIO_Init+0x158>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	60bb      	str	r3, [r7, #8]
 80014dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	607b      	str	r3, [r7, #4]
 80014e2:	4b3a      	ldr	r3, [pc, #232]	@ (80015cc <MX_GPIO_Init+0x158>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e6:	4a39      	ldr	r2, [pc, #228]	@ (80015cc <MX_GPIO_Init+0x158>)
 80014e8:	f043 0302 	orr.w	r3, r3, #2
 80014ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ee:	4b37      	ldr	r3, [pc, #220]	@ (80015cc <MX_GPIO_Init+0x158>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f2:	f003 0302 	and.w	r3, r3, #2
 80014f6:	607b      	str	r3, [r7, #4]
 80014f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DHT11_ID0_Pin|DHT11_ID1_Pin|DHT22_Pin, GPIO_PIN_RESET);
 80014fa:	2200      	movs	r2, #0
 80014fc:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8001500:	4833      	ldr	r0, [pc, #204]	@ (80015d0 <MX_GPIO_Init+0x15c>)
 8001502:	f002 fbe7 	bl	8003cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED_NETWORK_Pin|LED_USER_Pin, GPIO_PIN_RESET);
 8001506:	2200      	movs	r2, #0
 8001508:	21e0      	movs	r1, #224	@ 0xe0
 800150a:	4832      	ldr	r0, [pc, #200]	@ (80015d4 <MX_GPIO_Init+0x160>)
 800150c:	f002 fbe2 	bl	8003cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FAN_OUT_GPIO_Port, FAN_OUT_Pin, GPIO_PIN_SET);
 8001510:	2201      	movs	r2, #1
 8001512:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001516:	482e      	ldr	r0, [pc, #184]	@ (80015d0 <MX_GPIO_Init+0x15c>)
 8001518:	f002 fbdc 	bl	8003cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800151c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001520:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001522:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001526:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800152c:	f107 0314 	add.w	r3, r7, #20
 8001530:	4619      	mov	r1, r3
 8001532:	4827      	ldr	r0, [pc, #156]	@ (80015d0 <MX_GPIO_Init+0x15c>)
 8001534:	f002 f94e 	bl	80037d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : WATER_POWER_Pin DHT11_ID0_Pin DHT11_ID1_Pin DHT22_Pin */
  GPIO_InitStruct.Pin = DHT11_ID0_Pin|DHT11_ID1_Pin|DHT22_Pin;
 8001538:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800153c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800153e:	2301      	movs	r3, #1
 8001540:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001542:	2300      	movs	r3, #0
 8001544:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001546:	2300      	movs	r3, #0
 8001548:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800154a:	f107 0314 	add.w	r3, r7, #20
 800154e:	4619      	mov	r1, r3
 8001550:	481f      	ldr	r0, [pc, #124]	@ (80015d0 <MX_GPIO_Init+0x15c>)
 8001552:	f002 f93f 	bl	80037d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LED_NETWORK_Pin LED_USER_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LED_NETWORK_Pin|LED_USER_Pin;
 8001556:	23e0      	movs	r3, #224	@ 0xe0
 8001558:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155a:	2301      	movs	r3, #1
 800155c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001562:	2300      	movs	r3, #0
 8001564:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001566:	f107 0314 	add.w	r3, r7, #20
 800156a:	4619      	mov	r1, r3
 800156c:	4819      	ldr	r0, [pc, #100]	@ (80015d4 <MX_GPIO_Init+0x160>)
 800156e:	f002 f931 	bl	80037d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_FAN_ON_Pin BTN_FAN_OFF_Pin BTN_IR_UP_Pin BTN_IR_DOWN_Pin
                           BTN_IR_ON_Pin BTN_IR_OFF_Pin */
  GPIO_InitStruct.Pin = BTN_FAN_ON_Pin|BTN_FAN_OFF_Pin|BTN_IR_UP_Pin|BTN_IR_DOWN_Pin
 8001572:	f24f 0303 	movw	r3, #61443	@ 0xf003
 8001576:	617b      	str	r3, [r7, #20]
                          |BTN_IR_ON_Pin|BTN_IR_OFF_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001578:	2300      	movs	r3, #0
 800157a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800157c:	2301      	movs	r3, #1
 800157e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001580:	f107 0314 	add.w	r3, r7, #20
 8001584:	4619      	mov	r1, r3
 8001586:	4814      	ldr	r0, [pc, #80]	@ (80015d8 <MX_GPIO_Init+0x164>)
 8001588:	f002 f924 	bl	80037d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : FAN_OUT_Pin */
  GPIO_InitStruct.Pin = FAN_OUT_Pin;
 800158c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001590:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001592:	2301      	movs	r3, #1
 8001594:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	2300      	movs	r3, #0
 8001598:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159a:	2300      	movs	r3, #0
 800159c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FAN_OUT_GPIO_Port, &GPIO_InitStruct);
 800159e:	f107 0314 	add.w	r3, r7, #20
 80015a2:	4619      	mov	r1, r3
 80015a4:	480a      	ldr	r0, [pc, #40]	@ (80015d0 <MX_GPIO_Init+0x15c>)
 80015a6:	f002 f915 	bl	80037d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DOOR_SENSOR_Pin */
  GPIO_InitStruct.Pin = DOOR_SENSOR_Pin;
 80015aa:	2340      	movs	r3, #64	@ 0x40
 80015ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ae:	2300      	movs	r3, #0
 80015b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015b2:	2301      	movs	r3, #1
 80015b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DOOR_SENSOR_GPIO_Port, &GPIO_InitStruct);
 80015b6:	f107 0314 	add.w	r3, r7, #20
 80015ba:	4619      	mov	r1, r3
 80015bc:	4804      	ldr	r0, [pc, #16]	@ (80015d0 <MX_GPIO_Init+0x15c>)
 80015be:	f002 f909 	bl	80037d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015c2:	bf00      	nop
 80015c4:	3728      	adds	r7, #40	@ 0x28
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40023800 	.word	0x40023800
 80015d0:	40020800 	.word	0x40020800
 80015d4:	40020000 	.word	0x40020000
 80015d8:	40020400 	.word	0x40020400

080015dc <adcMultiChannelGetValue>:

/* USER CODE BEGIN 4 */
static uint16_t adcMultiChannelGetValue(uint8_t channel) {
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	71fb      	strb	r3, [r7, #7]
    if (channel >= ADC_CHANNEL_SIZE) return 0;
 80015e6:	79fb      	ldrb	r3, [r7, #7]
 80015e8:	2b03      	cmp	r3, #3
 80015ea:	d901      	bls.n	80015f0 <adcMultiChannelGetValue+0x14>
 80015ec:	2300      	movs	r3, #0
 80015ee:	e003      	b.n	80015f8 <adcMultiChannelGetValue+0x1c>
    return adc_buffer[channel];
 80015f0:	79fb      	ldrb	r3, [r7, #7]
 80015f2:	4a04      	ldr	r2, [pc, #16]	@ (8001604 <adcMultiChannelGetValue+0x28>)
 80015f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	20000624 	.word	0x20000624

08001608 <publisherTimerCb>:
 * @func   publisherTimerCb
 * @brief
 * @param  None
 * @retval None
 */
static void publisherTimerCb(void *arg) {
 8001608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800160c:	b0ad      	sub	sp, #180	@ 0xb4
 800160e:	af18      	add	r7, sp, #96	@ 0x60
 8001610:	62f8      	str	r0, [r7, #44]	@ 0x2c
	uint8_t MSTT = 0;
 8001612:	2300      	movs	r3, #0
 8001614:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	// Read data from all sensors
	dht_status status_id0 = DHT_ReadTempHum(&dht11_id0);
 8001618:	48b7      	ldr	r0, [pc, #732]	@ (80018f8 <publisherTimerCb+0x2f0>)
 800161a:	f005 f9bd 	bl	8006998 <DHT_ReadTempHum>
 800161e:	4603      	mov	r3, r0
 8001620:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
	DHT_ReadTempHum(&dht11_id1);
 8001624:	48b5      	ldr	r0, [pc, #724]	@ (80018fc <publisherTimerCb+0x2f4>)
 8001626:	f005 f9b7 	bl	8006998 <DHT_ReadTempHum>
	float temp1 = rs232_GetTempDht22();
 800162a:	f005 fafb 	bl	8006c24 <rs232_GetTempDht22>
 800162e:	ed87 0a12 	vstr	s0, [r7, #72]	@ 0x48
	float temp2 = LM35_GetTempCel(ADC_CHANNEL_LM35_ID0);
 8001632:	2000      	movs	r0, #0
 8001634:	f005 fdd8 	bl	80071e8 <LM35_GetTempCel>
 8001638:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
	float temp3 = LM35_GetTempCel(ADC_CHANNEL_LM35_ID1);
 800163c:	2001      	movs	r0, #1
 800163e:	f005 fdd3 	bl	80071e8 <LM35_GetTempCel>
 8001642:	ed87 0a10 	vstr	s0, [r7, #64]	@ 0x40
	door_status_e door = door_get_status();
 8001646:	f005 fa31 	bl	8006aac <door_get_status>
 800164a:	4603      	mov	r3, r0
 800164c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	water_level_state waterSensor = RainWater_GetLevelState();
 8001650:	f005 fef8 	bl	8007444 <RainWater_GetLevelState>
 8001654:	4603      	mov	r3, r0
 8001656:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	float ppm = MQ135_GetPPM();
 800165a:	f005 fe81 	bl	8007360 <MQ135_GetPPM>
 800165e:	ed87 0a0e 	vstr	s0, [r7, #56]	@ 0x38
	uint8_t statusAirCondition = IRCtrl_GetState();
 8001662:	f005 fb9b 	bl	8006d9c <IRCtrl_GetState>
 8001666:	4603      	mov	r3, r0
 8001668:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	uint8_t fanLevel = FanCtrl_GetLevel();
 800166c:	f005 fb8a 	bl	8006d84 <FanCtrl_GetLevel>
 8001670:	4603      	mov	r3, r0
 8001672:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

	if ((dht11_id0.Temp < tempSet_Room) && (dht11_id1.Temp < tempSet_Room) && \
 8001676:	4ba0      	ldr	r3, [pc, #640]	@ (80018f8 <publisherTimerCb+0x2f0>)
 8001678:	ed93 7a04 	vldr	s14, [r3, #16]
 800167c:	4ba0      	ldr	r3, [pc, #640]	@ (8001900 <publisherTimerCb+0x2f8>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	ee07 3a90 	vmov	s15, r3
 8001684:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001688:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800168c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001690:	d53c      	bpl.n	800170c <publisherTimerCb+0x104>
 8001692:	4b9a      	ldr	r3, [pc, #616]	@ (80018fc <publisherTimerCb+0x2f4>)
 8001694:	ed93 7a04 	vldr	s14, [r3, #16]
 8001698:	4b99      	ldr	r3, [pc, #612]	@ (8001900 <publisherTimerCb+0x2f8>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	ee07 3a90 	vmov	s15, r3
 80016a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ac:	d52e      	bpl.n	800170c <publisherTimerCb+0x104>
		(temp2 < tempSet_Cabinet) && (temp3 < tempSet_AQ) && (waterSensor == WATER_LEVEL_LOW) && (ppm < 500) && (door == DOOR_STATUS_CLOSE))
 80016ae:	4b95      	ldr	r3, [pc, #596]	@ (8001904 <publisherTimerCb+0x2fc>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	ee07 3a90 	vmov	s15, r3
 80016b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	if ((dht11_id0.Temp < tempSet_Room) && (dht11_id1.Temp < tempSet_Room) && \
 80016ba:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80016be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016c6:	d521      	bpl.n	800170c <publisherTimerCb+0x104>
		(temp2 < tempSet_Cabinet) && (temp3 < tempSet_AQ) && (waterSensor == WATER_LEVEL_LOW) && (ppm < 500) && (door == DOOR_STATUS_CLOSE))
 80016c8:	4b8f      	ldr	r3, [pc, #572]	@ (8001908 <publisherTimerCb+0x300>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	ee07 3a90 	vmov	s15, r3
 80016d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016d4:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80016d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016e0:	d514      	bpl.n	800170c <publisherTimerCb+0x104>
 80016e2:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d110      	bne.n	800170c <publisherTimerCb+0x104>
 80016ea:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80016ee:	ed9f 7a87 	vldr	s14, [pc, #540]	@ 800190c <publisherTimerCb+0x304>
 80016f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016fa:	d507      	bpl.n	800170c <publisherTimerCb+0x104>
 80016fc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001700:	2b00      	cmp	r3, #0
 8001702:	d103      	bne.n	800170c <publisherTimerCb+0x104>
	{
		MSTT = 0;
 8001704:	2300      	movs	r3, #0
 8001706:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800170a:	e1ea      	b.n	8001ae2 <publisherTimerCb+0x4da>
	}
	else if ((temp3 > tempSet_AQ) && (temp3 < 50) && \
 800170c:	4b7e      	ldr	r3, [pc, #504]	@ (8001908 <publisherTimerCb+0x300>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	ee07 3a90 	vmov	s15, r3
 8001714:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001718:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 800171c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001724:	dd48      	ble.n	80017b8 <publisherTimerCb+0x1b0>
 8001726:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800172a:	ed9f 7a79 	vldr	s14, [pc, #484]	@ 8001910 <publisherTimerCb+0x308>
 800172e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001736:	d53f      	bpl.n	80017b8 <publisherTimerCb+0x1b0>
		 (temp2 > tempSet_Cabinet) && (temp2 < 95) && \
 8001738:	4b72      	ldr	r3, [pc, #456]	@ (8001904 <publisherTimerCb+0x2fc>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	ee07 3a90 	vmov	s15, r3
 8001740:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	else if ((temp3 > tempSet_AQ) && (temp3 < 50) && \
 8001744:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8001748:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800174c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001750:	dd32      	ble.n	80017b8 <publisherTimerCb+0x1b0>
		 (temp2 > tempSet_Cabinet) && (temp2 < 95) && \
 8001752:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001756:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 8001914 <publisherTimerCb+0x30c>
 800175a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800175e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001762:	d529      	bpl.n	80017b8 <publisherTimerCb+0x1b0>
		 (average(dht11_id0.Temp, dht11_id1.Temp)  > 30) && (waterSensor == WATER_LEVEL_LOW) && (ppm < 500) && (door == DOOR_STATUS_CLOSE))
 8001764:	4b64      	ldr	r3, [pc, #400]	@ (80018f8 <publisherTimerCb+0x2f0>)
 8001766:	edd3 7a04 	vldr	s15, [r3, #16]
 800176a:	4b64      	ldr	r3, [pc, #400]	@ (80018fc <publisherTimerCb+0x2f4>)
 800176c:	ed93 7a04 	vldr	s14, [r3, #16]
 8001770:	eef0 0a47 	vmov.f32	s1, s14
 8001774:	eeb0 0a67 	vmov.f32	s0, s15
 8001778:	f7ff fbe6 	bl	8000f48 <average>
 800177c:	eef0 7a40 	vmov.f32	s15, s0
		 (temp2 > tempSet_Cabinet) && (temp2 < 95) && \
 8001780:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8001784:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800178c:	dd14      	ble.n	80017b8 <publisherTimerCb+0x1b0>
		 (average(dht11_id0.Temp, dht11_id1.Temp)  > 30) && (waterSensor == WATER_LEVEL_LOW) && (ppm < 500) && (door == DOOR_STATUS_CLOSE))
 800178e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8001792:	2b00      	cmp	r3, #0
 8001794:	d110      	bne.n	80017b8 <publisherTimerCb+0x1b0>
 8001796:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800179a:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 800190c <publisherTimerCb+0x304>
 800179e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017a6:	d507      	bpl.n	80017b8 <publisherTimerCb+0x1b0>
 80017a8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d103      	bne.n	80017b8 <publisherTimerCb+0x1b0>
	{
		MSTT = 2;
 80017b0:	2302      	movs	r3, #2
 80017b2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80017b6:	e194      	b.n	8001ae2 <publisherTimerCb+0x4da>
//		MSTT = 3;
//	}
//	else if () { // Them mat tin hieu nang luong DC
//		MSTT = 4;
//	}
	else if ((temp1 > 55) || (temp1 == -1))
 80017b8:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80017bc:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8001918 <publisherTimerCb+0x310>
 80017c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c8:	dc08      	bgt.n	80017dc <publisherTimerCb+0x1d4>
 80017ca:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80017ce:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80017d2:	eef4 7a47 	vcmp.f32	s15, s14
 80017d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017da:	d103      	bne.n	80017e4 <publisherTimerCb+0x1dc>
	{
		MSTT = 5;
 80017dc:	2305      	movs	r3, #5
 80017de:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80017e2:	e17e      	b.n	8001ae2 <publisherTimerCb+0x4da>
	}
	else if (((average(dht11_id0.Temp, dht11_id1.Temp) > 55) && (temp1 < 40)) || (status_id0 != DHT_STA_OK))
 80017e4:	4b44      	ldr	r3, [pc, #272]	@ (80018f8 <publisherTimerCb+0x2f0>)
 80017e6:	edd3 7a04 	vldr	s15, [r3, #16]
 80017ea:	4b44      	ldr	r3, [pc, #272]	@ (80018fc <publisherTimerCb+0x2f4>)
 80017ec:	ed93 7a04 	vldr	s14, [r3, #16]
 80017f0:	eef0 0a47 	vmov.f32	s1, s14
 80017f4:	eeb0 0a67 	vmov.f32	s0, s15
 80017f8:	f7ff fba6 	bl	8000f48 <average>
 80017fc:	eef0 7a40 	vmov.f32	s15, s0
 8001800:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8001918 <publisherTimerCb+0x310>
 8001804:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800180c:	dd08      	ble.n	8001820 <publisherTimerCb+0x218>
 800180e:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001812:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 800191c <publisherTimerCb+0x314>
 8001816:	eef4 7ac7 	vcmpe.f32	s15, s14
 800181a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800181e:	d403      	bmi.n	8001828 <publisherTimerCb+0x220>
 8001820:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8001824:	2b00      	cmp	r3, #0
 8001826:	d003      	beq.n	8001830 <publisherTimerCb+0x228>
	{
		MSTT = 6;
 8001828:	2306      	movs	r3, #6
 800182a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800182e:	e158      	b.n	8001ae2 <publisherTimerCb+0x4da>
	}
	else if (((temp3 < 30) && (temp2 < 75) && (average(dht11_id0.Temp, dht11_id1.Temp) < 50) && \
 8001830:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001834:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8001838:	eef4 7ac7 	vcmpe.f32	s15, s14
 800183c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001840:	d526      	bpl.n	8001890 <publisherTimerCb+0x288>
 8001842:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001846:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8001924 <publisherTimerCb+0x31c>
 800184a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800184e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001852:	d51d      	bpl.n	8001890 <publisherTimerCb+0x288>
 8001854:	4b28      	ldr	r3, [pc, #160]	@ (80018f8 <publisherTimerCb+0x2f0>)
 8001856:	edd3 7a04 	vldr	s15, [r3, #16]
 800185a:	4b28      	ldr	r3, [pc, #160]	@ (80018fc <publisherTimerCb+0x2f4>)
 800185c:	ed93 7a04 	vldr	s14, [r3, #16]
 8001860:	eef0 0a47 	vmov.f32	s1, s14
 8001864:	eeb0 0a67 	vmov.f32	s0, s15
 8001868:	f7ff fb6e 	bl	8000f48 <average>
 800186c:	eef0 7a40 	vmov.f32	s15, s0
 8001870:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8001910 <publisherTimerCb+0x308>
 8001874:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800187c:	d508      	bpl.n	8001890 <publisherTimerCb+0x288>
 800187e:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001882:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 800190c <publisherTimerCb+0x304>
 8001886:	eef4 7ac7 	vcmpe.f32	s15, s14
 800188a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800188e:	dc08      	bgt.n	80018a2 <publisherTimerCb+0x29a>
			(ppm > 500)) || (ppm == -1))
 8001890:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001894:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001898:	eef4 7a47 	vcmp.f32	s15, s14
 800189c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a0:	d103      	bne.n	80018aa <publisherTimerCb+0x2a2>
	{
		MSTT = 7;
 80018a2:	2307      	movs	r3, #7
 80018a4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80018a8:	e11b      	b.n	8001ae2 <publisherTimerCb+0x4da>
	}
	else if ((statusAirCondition == 1) && (abs(average(dht11_id0.Temp, dht11_id1.Temp) - tempAirCondition) > 20))
 80018aa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d13a      	bne.n	8001928 <publisherTimerCb+0x320>
 80018b2:	4b11      	ldr	r3, [pc, #68]	@ (80018f8 <publisherTimerCb+0x2f0>)
 80018b4:	edd3 7a04 	vldr	s15, [r3, #16]
 80018b8:	4b10      	ldr	r3, [pc, #64]	@ (80018fc <publisherTimerCb+0x2f4>)
 80018ba:	ed93 7a04 	vldr	s14, [r3, #16]
 80018be:	eef0 0a47 	vmov.f32	s1, s14
 80018c2:	eeb0 0a67 	vmov.f32	s0, s15
 80018c6:	f7ff fb3f 	bl	8000f48 <average>
 80018ca:	eeb0 7a40 	vmov.f32	s14, s0
 80018ce:	4b14      	ldr	r3, [pc, #80]	@ (8001920 <publisherTimerCb+0x318>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	ee07 3a90 	vmov	s15, r3
 80018d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018e2:	ee17 3a90 	vmov	r3, s15
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	bfb8      	it	lt
 80018ea:	425b      	neglt	r3, r3
 80018ec:	2b14      	cmp	r3, #20
 80018ee:	dd1b      	ble.n	8001928 <publisherTimerCb+0x320>
	{
		MSTT = 8;
 80018f0:	2308      	movs	r3, #8
 80018f2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80018f6:	e0f4      	b.n	8001ae2 <publisherTimerCb+0x4da>
 80018f8:	2000062c 	.word	0x2000062c
 80018fc:	20000644 	.word	0x20000644
 8001900:	20000001 	.word	0x20000001
 8001904:	20000003 	.word	0x20000003
 8001908:	20000002 	.word	0x20000002
 800190c:	43fa0000 	.word	0x43fa0000
 8001910:	42480000 	.word	0x42480000
 8001914:	42be0000 	.word	0x42be0000
 8001918:	425c0000 	.word	0x425c0000
 800191c:	42200000 	.word	0x42200000
 8001920:	20000004 	.word	0x20000004
 8001924:	42960000 	.word	0x42960000
	}
	else if ((((temp2 > 75) && (average(dht11_id0.Temp, dht11_id1.Temp) < 30)) || \
 8001928:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800192c:	ed1f 7a03 	vldr	s14, [pc, #-12]	@ 8001924 <publisherTimerCb+0x31c>
 8001930:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001938:	dd14      	ble.n	8001964 <publisherTimerCb+0x35c>
 800193a:	4bb5      	ldr	r3, [pc, #724]	@ (8001c10 <publisherTimerCb+0x608>)
 800193c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001940:	4bb4      	ldr	r3, [pc, #720]	@ (8001c14 <publisherTimerCb+0x60c>)
 8001942:	ed93 7a04 	vldr	s14, [r3, #16]
 8001946:	eef0 0a47 	vmov.f32	s1, s14
 800194a:	eeb0 0a67 	vmov.f32	s0, s15
 800194e:	f7ff fafb 	bl	8000f48 <average>
 8001952:	eef0 7a40 	vmov.f32	s15, s0
 8001956:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800195a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800195e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001962:	d426      	bmi.n	80019b2 <publisherTimerCb+0x3aa>
 8001964:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001968:	ed9f 7aab 	vldr	s14, [pc, #684]	@ 8001c18 <publisherTimerCb+0x610>
 800196c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001974:	dd14      	ble.n	80019a0 <publisherTimerCb+0x398>
			 ((temp2 > 95) && (average(dht11_id0.Temp, dht11_id1.Temp) > 30))) || (temp2 == -1))
 8001976:	4ba6      	ldr	r3, [pc, #664]	@ (8001c10 <publisherTimerCb+0x608>)
 8001978:	edd3 7a04 	vldr	s15, [r3, #16]
 800197c:	4ba5      	ldr	r3, [pc, #660]	@ (8001c14 <publisherTimerCb+0x60c>)
 800197e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001982:	eef0 0a47 	vmov.f32	s1, s14
 8001986:	eeb0 0a67 	vmov.f32	s0, s15
 800198a:	f7ff fadd 	bl	8000f48 <average>
 800198e:	eef0 7a40 	vmov.f32	s15, s0
 8001992:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8001996:	eef4 7ac7 	vcmpe.f32	s15, s14
 800199a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800199e:	dc08      	bgt.n	80019b2 <publisherTimerCb+0x3aa>
 80019a0:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80019a4:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80019a8:	eef4 7a47 	vcmp.f32	s15, s14
 80019ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019b0:	d103      	bne.n	80019ba <publisherTimerCb+0x3b2>
	{
		MSTT = 9;
 80019b2:	2309      	movs	r3, #9
 80019b4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80019b8:	e093      	b.n	8001ae2 <publisherTimerCb+0x4da>
	}
	else if ((((temp3 > 30) && (average(dht11_id0.Temp, dht11_id1.Temp) < 30)) || \
 80019ba:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80019be:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80019c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ca:	dd14      	ble.n	80019f6 <publisherTimerCb+0x3ee>
 80019cc:	4b90      	ldr	r3, [pc, #576]	@ (8001c10 <publisherTimerCb+0x608>)
 80019ce:	edd3 7a04 	vldr	s15, [r3, #16]
 80019d2:	4b90      	ldr	r3, [pc, #576]	@ (8001c14 <publisherTimerCb+0x60c>)
 80019d4:	ed93 7a04 	vldr	s14, [r3, #16]
 80019d8:	eef0 0a47 	vmov.f32	s1, s14
 80019dc:	eeb0 0a67 	vmov.f32	s0, s15
 80019e0:	f7ff fab2 	bl	8000f48 <average>
 80019e4:	eef0 7a40 	vmov.f32	s15, s0
 80019e8:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80019ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019f4:	d426      	bmi.n	8001a44 <publisherTimerCb+0x43c>
 80019f6:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80019fa:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 8001c1c <publisherTimerCb+0x614>
 80019fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a06:	dd14      	ble.n	8001a32 <publisherTimerCb+0x42a>
			 ((temp3 > 50) && (average(dht11_id0.Temp, dht11_id1.Temp) > 30))) || (temp3 == -1))
 8001a08:	4b81      	ldr	r3, [pc, #516]	@ (8001c10 <publisherTimerCb+0x608>)
 8001a0a:	edd3 7a04 	vldr	s15, [r3, #16]
 8001a0e:	4b81      	ldr	r3, [pc, #516]	@ (8001c14 <publisherTimerCb+0x60c>)
 8001a10:	ed93 7a04 	vldr	s14, [r3, #16]
 8001a14:	eef0 0a47 	vmov.f32	s1, s14
 8001a18:	eeb0 0a67 	vmov.f32	s0, s15
 8001a1c:	f7ff fa94 	bl	8000f48 <average>
 8001a20:	eef0 7a40 	vmov.f32	s15, s0
 8001a24:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8001a28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a30:	dc08      	bgt.n	8001a44 <publisherTimerCb+0x43c>
 8001a32:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001a36:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001a3a:	eef4 7a47 	vcmp.f32	s15, s14
 8001a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a42:	d103      	bne.n	8001a4c <publisherTimerCb+0x444>
	{
		MSTT = 10;
 8001a44:	230a      	movs	r3, #10
 8001a46:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8001a4a:	e04a      	b.n	8001ae2 <publisherTimerCb+0x4da>
	}
	else if (waterSensor == WATER_LEVEL_UNKNOW)
 8001a4c:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8001a50:	2b03      	cmp	r3, #3
 8001a52:	d103      	bne.n	8001a5c <publisherTimerCb+0x454>
	{
		MSTT = 11;
 8001a54:	230b      	movs	r3, #11
 8001a56:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8001a5a:	e042      	b.n	8001ae2 <publisherTimerCb+0x4da>
	}
	else if (waterSensor == WATER_LEVEL_HIGH) {
 8001a5c:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d103      	bne.n	8001a6c <publisherTimerCb+0x464>
		MSTT = 12;
 8001a64:	230c      	movs	r3, #12
 8001a66:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8001a6a:	e03a      	b.n	8001ae2 <publisherTimerCb+0x4da>
	}
	else if (door == DOOR_STATUS_OPEN)
 8001a6c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d103      	bne.n	8001a7c <publisherTimerCb+0x474>
	{
		MSTT = 13;
 8001a74:	230d      	movs	r3, #13
 8001a76:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8001a7a:	e032      	b.n	8001ae2 <publisherTimerCb+0x4da>
	}
	else if (((average(dht11_id0.Temp, dht11_id1.Temp) > 50) || (temp3 > 30) || (temp2 > 75)) && (ppm > 500))
 8001a7c:	4b64      	ldr	r3, [pc, #400]	@ (8001c10 <publisherTimerCb+0x608>)
 8001a7e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001a82:	4b64      	ldr	r3, [pc, #400]	@ (8001c14 <publisherTimerCb+0x60c>)
 8001a84:	ed93 7a04 	vldr	s14, [r3, #16]
 8001a88:	eef0 0a47 	vmov.f32	s1, s14
 8001a8c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a90:	f7ff fa5a 	bl	8000f48 <average>
 8001a94:	eef0 7a40 	vmov.f32	s15, s0
 8001a98:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 8001c1c <publisherTimerCb+0x614>
 8001a9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aa4:	dc11      	bgt.n	8001aca <publisherTimerCb+0x4c2>
 8001aa6:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001aaa:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8001aae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ab6:	dc08      	bgt.n	8001aca <publisherTimerCb+0x4c2>
 8001ab8:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001abc:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8001c20 <publisherTimerCb+0x618>
 8001ac0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ac8:	dd0b      	ble.n	8001ae2 <publisherTimerCb+0x4da>
 8001aca:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001ace:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8001c24 <publisherTimerCb+0x61c>
 8001ad2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ada:	dd02      	ble.n	8001ae2 <publisherTimerCb+0x4da>
	{
		MSTT = 14;
 8001adc:	230e      	movs	r3, #14
 8001ade:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
//	else if () { // 2 trong 5 cam bien dht11_id0 va dht11_id1 va nhiet do temp3 va temp2 va ppm mat
//		MSTT = 15;
//	}

	// Construct the JSON string
	memset(json_buffer, 0, sizeof(json_buffer));
 8001ae2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	484f      	ldr	r0, [pc, #316]	@ (8001c28 <publisherTimerCb+0x620>)
 8001aea:	f007 fa5d 	bl	8008fa8 <memset>
	snprintf(json_buffer, sizeof(json_buffer),
 8001aee:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001af2:	61fb      	str	r3, [r7, #28]
 8001af4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001af6:	f7fe fd2f 	bl	8000558 <__aeabi_f2d>
 8001afa:	4682      	mov	sl, r0
 8001afc:	468b      	mov	fp, r1
 8001afe:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d102      	bne.n	8001b0c <publisherTimerCb+0x504>
 8001b06:	4b49      	ldr	r3, [pc, #292]	@ (8001c2c <publisherTimerCb+0x624>)
 8001b08:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b0a:	e001      	b.n	8001b10 <publisherTimerCb+0x508>
 8001b0c:	4b48      	ldr	r3, [pc, #288]	@ (8001c30 <publisherTimerCb+0x628>)
 8001b0e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b10:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d007      	beq.n	8001b28 <publisherTimerCb+0x520>
		"\"tempSet\":\"%d\"",
		MSTT,
		0,
		ppm,
		(door == DOOR_STATUS_CLOSE) ? "close" : "open",
		(waterSensor == WATER_LEVEL_LOW) ? "low" : (waterSensor == WATER_LEVEL_MEDIUM ? "medium" : "high"),
 8001b18:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d101      	bne.n	8001b24 <publisherTimerCb+0x51c>
 8001b20:	4e44      	ldr	r6, [pc, #272]	@ (8001c34 <publisherTimerCb+0x62c>)
 8001b22:	e002      	b.n	8001b2a <publisherTimerCb+0x522>
 8001b24:	4e44      	ldr	r6, [pc, #272]	@ (8001c38 <publisherTimerCb+0x630>)
 8001b26:	e000      	b.n	8001b2a <publisherTimerCb+0x522>
	snprintf(json_buffer, sizeof(json_buffer),
 8001b28:	4e44      	ldr	r6, [pc, #272]	@ (8001c3c <publisherTimerCb+0x634>)
 8001b2a:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8001b2c:	f7fe fd14 	bl	8000558 <__aeabi_f2d>
 8001b30:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001b34:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001b36:	f7fe fd0f 	bl	8000558 <__aeabi_f2d>
 8001b3a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001b3e:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001b40:	f7fe fd0a 	bl	8000558 <__aeabi_f2d>
 8001b44:	e9c7 0100 	strd	r0, r1, [r7]
		temp1,
		temp2,
		temp3,
		(dht11_id0.Humi + dht11_id0.Humi) / 2,
 8001b48:	4b31      	ldr	r3, [pc, #196]	@ (8001c10 <publisherTimerCb+0x608>)
 8001b4a:	edd3 7a05 	vldr	s15, [r3, #20]
 8001b4e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001b52:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001b56:	eec7 6a87 	vdiv.f32	s13, s15, s14
	snprintf(json_buffer, sizeof(json_buffer),
 8001b5a:	ee16 0a90 	vmov	r0, s13
 8001b5e:	f7fe fcfb 	bl	8000558 <__aeabi_f2d>
 8001b62:	4680      	mov	r8, r0
 8001b64:	4689      	mov	r9, r1
 8001b66:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d102      	bne.n	8001b74 <publisherTimerCb+0x56c>
 8001b6e:	4b34      	ldr	r3, [pc, #208]	@ (8001c40 <publisherTimerCb+0x638>)
 8001b70:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b72:	e001      	b.n	8001b78 <publisherTimerCb+0x570>
 8001b74:	4b33      	ldr	r3, [pc, #204]	@ (8001c44 <publisherTimerCb+0x63c>)
 8001b76:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b78:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d102      	bne.n	8001b86 <publisherTimerCb+0x57e>
 8001b80:	4b2f      	ldr	r3, [pc, #188]	@ (8001c40 <publisherTimerCb+0x638>)
 8001b82:	623b      	str	r3, [r7, #32]
 8001b84:	e001      	b.n	8001b8a <publisherTimerCb+0x582>
 8001b86:	4b2f      	ldr	r3, [pc, #188]	@ (8001c44 <publisherTimerCb+0x63c>)
 8001b88:	623b      	str	r3, [r7, #32]
		(statusAirCondition == 0) ? "off" : "on",
		(fanLevel == 0) ? "off" : "on",
		32.0,
		dht11_id0.Temp,
 8001b8a:	4b21      	ldr	r3, [pc, #132]	@ (8001c10 <publisherTimerCb+0x608>)
 8001b8c:	691b      	ldr	r3, [r3, #16]
	snprintf(json_buffer, sizeof(json_buffer),
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7fe fce2 	bl	8000558 <__aeabi_f2d>
 8001b94:	4604      	mov	r4, r0
 8001b96:	460d      	mov	r5, r1
		dht11_id1.Temp,
 8001b98:	4b1e      	ldr	r3, [pc, #120]	@ (8001c14 <publisherTimerCb+0x60c>)
 8001b9a:	691b      	ldr	r3, [r3, #16]
	snprintf(json_buffer, sizeof(json_buffer),
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7fe fcdb 	bl	8000558 <__aeabi_f2d>
 8001ba2:	4b29      	ldr	r3, [pc, #164]	@ (8001c48 <publisherTimerCb+0x640>)
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	9316      	str	r3, [sp, #88]	@ 0x58
 8001ba8:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 8001bac:	e9cd 4512 	strd	r4, r5, [sp, #72]	@ 0x48
 8001bb0:	f04f 0200 	mov.w	r2, #0
 8001bb4:	4b25      	ldr	r3, [pc, #148]	@ (8001c4c <publisherTimerCb+0x644>)
 8001bb6:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8001bba:	6a3b      	ldr	r3, [r7, #32]
 8001bbc:	930f      	str	r3, [sp, #60]	@ 0x3c
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc0:	930e      	str	r3, [sp, #56]	@ 0x38
 8001bc2:	e9cd 890c 	strd	r8, r9, [sp, #48]	@ 0x30
 8001bc6:	ed97 7b00 	vldr	d7, [r7]
 8001bca:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8001bce:	ed97 7b02 	vldr	d7, [r7, #8]
 8001bd2:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001bd6:	ed97 7b04 	vldr	d7, [r7, #16]
 8001bda:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001bde:	9605      	str	r6, [sp, #20]
 8001be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001be2:	9304      	str	r3, [sp, #16]
 8001be4:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8001be8:	2300      	movs	r3, #0
 8001bea:	9300      	str	r3, [sp, #0]
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	4a18      	ldr	r2, [pc, #96]	@ (8001c50 <publisherTimerCb+0x648>)
 8001bf0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001bf4:	480c      	ldr	r0, [pc, #48]	@ (8001c28 <publisherTimerCb+0x620>)
 8001bf6:	f007 f87f 	bl	8008cf8 <sniprintf>
		tempSet_Room
	);

	// Send the JSON string via UART, save it to memory or further processing
	printf("%s\n", json_buffer);
 8001bfa:	480b      	ldr	r0, [pc, #44]	@ (8001c28 <publisherTimerCb+0x620>)
 8001bfc:	f007 f874 	bl	8008ce8 <puts>
	SIMCOM_httpPost(json_buffer);
 8001c00:	4809      	ldr	r0, [pc, #36]	@ (8001c28 <publisherTimerCb+0x620>)
 8001c02:	f005 fe8f 	bl	8007924 <SIMCOM_httpPost>
}
 8001c06:	bf00      	nop
 8001c08:	3754      	adds	r7, #84	@ 0x54
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c10:	2000062c 	.word	0x2000062c
 8001c14:	20000644 	.word	0x20000644
 8001c18:	42be0000 	.word	0x42be0000
 8001c1c:	42480000 	.word	0x42480000
 8001c20:	42960000 	.word	0x42960000
 8001c24:	43fa0000 	.word	0x43fa0000
 8001c28:	20000424 	.word	0x20000424
 8001c2c:	0800c74c 	.word	0x0800c74c
 8001c30:	0800c754 	.word	0x0800c754
 8001c34:	0800c75c 	.word	0x0800c75c
 8001c38:	0800c764 	.word	0x0800c764
 8001c3c:	0800c76c 	.word	0x0800c76c
 8001c40:	0800c770 	.word	0x0800c770
 8001c44:	0800c774 	.word	0x0800c774
 8001c48:	20000001 	.word	0x20000001
 8001c4c:	40400000 	.word	0x40400000
 8001c50:	0800c778 	.word	0x0800c778

08001c54 <parseACControlJSON>:

// Function to parse JSON for AC control
void parseACControlJSON(const char *jsonString, int *id, int *actionAC) {
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	60b9      	str	r1, [r7, #8]
 8001c5e:	607a      	str	r2, [r7, #4]
    sscanf(jsonString, "{\"ID\":\"%d\",\"actionAC\":\"%d\"", id, actionAC);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	68ba      	ldr	r2, [r7, #8]
 8001c64:	4903      	ldr	r1, [pc, #12]	@ (8001c74 <parseACControlJSON+0x20>)
 8001c66:	68f8      	ldr	r0, [r7, #12]
 8001c68:	f007 f89a 	bl	8008da0 <siscanf>
}
 8001c6c:	bf00      	nop
 8001c6e:	3710      	adds	r7, #16
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	0800c8b8 	.word	0x0800c8b8

08001c78 <parseFanControlJSON>:

// Function to parse JSON for Fan control
void parseFanControlJSON(const char *jsonString, int *id, int *actionFan) {
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	607a      	str	r2, [r7, #4]
	sscanf(jsonString, "{\"ID\":\"%d\",\"actionFan\":\"%d\"", id, actionFan);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	68ba      	ldr	r2, [r7, #8]
 8001c88:	4903      	ldr	r1, [pc, #12]	@ (8001c98 <parseFanControlJSON+0x20>)
 8001c8a:	68f8      	ldr	r0, [r7, #12]
 8001c8c:	f007 f888 	bl	8008da0 <siscanf>
}
 8001c90:	bf00      	nop
 8001c92:	3710      	adds	r7, #16
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	0800c8d4 	.word	0x0800c8d4

08001c9c <parseACTempControlJSON>:

// Function to parse JSON for AC temperature control
void parseACTempControlJSON(const char *jsonString, int *id, int *tempAC) {
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
	sscanf(jsonString, "{\"ID\":\"%d\",\"tempAC\":\"%d\"", id, tempAC);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	68ba      	ldr	r2, [r7, #8]
 8001cac:	4903      	ldr	r1, [pc, #12]	@ (8001cbc <parseACTempControlJSON+0x20>)
 8001cae:	68f8      	ldr	r0, [r7, #12]
 8001cb0:	f007 f876 	bl	8008da0 <siscanf>
}
 8001cb4:	bf00      	nop
 8001cb6:	3710      	adds	r7, #16
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	0800c8f0 	.word	0x0800c8f0

08001cc0 <parseACDefaultTempJSON>:

// Function to parse JSON for setting default AC temperature
void parseACDefaultTempJSON(const char *jsonString, int *id, int *setTemp) {
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	607a      	str	r2, [r7, #4]
	sscanf(jsonString, "{\"ID\":\"%d\",\"setTemp\":\"%d\"", id, setTemp);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	68ba      	ldr	r2, [r7, #8]
 8001cd0:	4903      	ldr	r1, [pc, #12]	@ (8001ce0 <parseACDefaultTempJSON+0x20>)
 8001cd2:	68f8      	ldr	r0, [r7, #12]
 8001cd4:	f007 f864 	bl	8008da0 <siscanf>
}
 8001cd8:	bf00      	nop
 8001cda:	3710      	adds	r7, #16
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	0800c90c 	.word	0x0800c90c

08001ce4 <subscriberHandlerCb>:

// Callback function to handle received data
void subscriberHandlerCb(uint8_t *data, int32_t length) {
 8001ce4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001ce8:	b08b      	sub	sp, #44	@ 0x2c
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
 8001cee:	6039      	str	r1, [r7, #0]
 8001cf0:	466b      	mov	r3, sp
 8001cf2:	461e      	mov	r6, r3
	if (data == NULL) return;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d101      	bne.n	8001cfe <subscriberHandlerCb+0x1a>
 8001cfa:	46b5      	mov	sp, r6
 8001cfc:	e08e      	b.n	8001e1c <subscriberHandlerCb+0x138>

    // Create a copy of the data string to ensure null-termination
    char jsonString[length + 1];
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	1c59      	adds	r1, r3, #1
 8001d02:	1e4b      	subs	r3, r1, #1
 8001d04:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d06:	460a      	mov	r2, r1
 8001d08:	2300      	movs	r3, #0
 8001d0a:	4690      	mov	r8, r2
 8001d0c:	4699      	mov	r9, r3
 8001d0e:	f04f 0200 	mov.w	r2, #0
 8001d12:	f04f 0300 	mov.w	r3, #0
 8001d16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d22:	460a      	mov	r2, r1
 8001d24:	2300      	movs	r3, #0
 8001d26:	4614      	mov	r4, r2
 8001d28:	461d      	mov	r5, r3
 8001d2a:	f04f 0200 	mov.w	r2, #0
 8001d2e:	f04f 0300 	mov.w	r3, #0
 8001d32:	00eb      	lsls	r3, r5, #3
 8001d34:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d38:	00e2      	lsls	r2, r4, #3
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	3307      	adds	r3, #7
 8001d3e:	08db      	lsrs	r3, r3, #3
 8001d40:	00db      	lsls	r3, r3, #3
 8001d42:	ebad 0d03 	sub.w	sp, sp, r3
 8001d46:	466b      	mov	r3, sp
 8001d48:	3300      	adds	r3, #0
 8001d4a:	623b      	str	r3, [r7, #32]
    memcpy(jsonString, data, length);
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	461a      	mov	r2, r3
 8001d50:	6879      	ldr	r1, [r7, #4]
 8001d52:	6a38      	ldr	r0, [r7, #32]
 8001d54:	f007 f9cb 	bl	80090ee <memcpy>
    jsonString[length] = '\0'; // Ensure the string is null-terminated
 8001d58:	6a3a      	ldr	r2, [r7, #32]
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	2200      	movs	r2, #0
 8001d60:	701a      	strb	r2, [r3, #0]

    int id, actionAC, actionFan, tempAC, setTemp;

    // Determine the type of message based on JSON content
    if (strstr(jsonString, "actionAC") != NULL) {
 8001d62:	4930      	ldr	r1, [pc, #192]	@ (8001e24 <subscriberHandlerCb+0x140>)
 8001d64:	6a38      	ldr	r0, [r7, #32]
 8001d66:	f007 f934 	bl	8008fd2 <strstr>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d00e      	beq.n	8001d8e <subscriberHandlerCb+0xaa>
        parseACControlJSON(jsonString, &id, &actionAC);
 8001d70:	f107 0218 	add.w	r2, r7, #24
 8001d74:	f107 031c 	add.w	r3, r7, #28
 8001d78:	4619      	mov	r1, r3
 8001d7a:	6a38      	ldr	r0, [r7, #32]
 8001d7c:	f7ff ff6a 	bl	8001c54 <parseACControlJSON>
        printf("AC Control: ID: %d, Action: %d\n", id, actionAC);
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4619      	mov	r1, r3
 8001d86:	4828      	ldr	r0, [pc, #160]	@ (8001e28 <subscriberHandlerCb+0x144>)
 8001d88:	f006 ff46 	bl	8008c18 <iprintf>
 8001d8c:	e045      	b.n	8001e1a <subscriberHandlerCb+0x136>
    }
    else if (strstr(jsonString, "actionFan") != NULL) {
 8001d8e:	4927      	ldr	r1, [pc, #156]	@ (8001e2c <subscriberHandlerCb+0x148>)
 8001d90:	6a38      	ldr	r0, [r7, #32]
 8001d92:	f007 f91e 	bl	8008fd2 <strstr>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d00e      	beq.n	8001dba <subscriberHandlerCb+0xd6>
        parseFanControlJSON(jsonString, &id, &actionFan);
 8001d9c:	f107 0214 	add.w	r2, r7, #20
 8001da0:	f107 031c 	add.w	r3, r7, #28
 8001da4:	4619      	mov	r1, r3
 8001da6:	6a38      	ldr	r0, [r7, #32]
 8001da8:	f7ff ff66 	bl	8001c78 <parseFanControlJSON>
        printf("Fan Control: ID: %d, Action: %d\n", id, actionFan);
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	697a      	ldr	r2, [r7, #20]
 8001db0:	4619      	mov	r1, r3
 8001db2:	481f      	ldr	r0, [pc, #124]	@ (8001e30 <subscriberHandlerCb+0x14c>)
 8001db4:	f006 ff30 	bl	8008c18 <iprintf>
 8001db8:	e02f      	b.n	8001e1a <subscriberHandlerCb+0x136>
    }
    else if (strstr(jsonString, "tempAC") != NULL) {
 8001dba:	491e      	ldr	r1, [pc, #120]	@ (8001e34 <subscriberHandlerCb+0x150>)
 8001dbc:	6a38      	ldr	r0, [r7, #32]
 8001dbe:	f007 f908 	bl	8008fd2 <strstr>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d00e      	beq.n	8001de6 <subscriberHandlerCb+0x102>
        parseACTempControlJSON(jsonString, &id, &tempAC);
 8001dc8:	f107 0210 	add.w	r2, r7, #16
 8001dcc:	f107 031c 	add.w	r3, r7, #28
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	6a38      	ldr	r0, [r7, #32]
 8001dd4:	f7ff ff62 	bl	8001c9c <parseACTempControlJSON>
        printf("AC Temp Control: ID: %d, Temp: %d\n", id, tempAC);
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4816      	ldr	r0, [pc, #88]	@ (8001e38 <subscriberHandlerCb+0x154>)
 8001de0:	f006 ff1a 	bl	8008c18 <iprintf>
 8001de4:	e019      	b.n	8001e1a <subscriberHandlerCb+0x136>
    }
    else if (strstr(jsonString, "setTemp") != NULL) {
 8001de6:	4915      	ldr	r1, [pc, #84]	@ (8001e3c <subscriberHandlerCb+0x158>)
 8001de8:	6a38      	ldr	r0, [r7, #32]
 8001dea:	f007 f8f2 	bl	8008fd2 <strstr>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d00e      	beq.n	8001e12 <subscriberHandlerCb+0x12e>
        parseACDefaultTempJSON(jsonString, &id, &setTemp);
 8001df4:	f107 020c 	add.w	r2, r7, #12
 8001df8:	f107 031c 	add.w	r3, r7, #28
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	6a38      	ldr	r0, [r7, #32]
 8001e00:	f7ff ff5e 	bl	8001cc0 <parseACDefaultTempJSON>
        printf("AC Default Temp: ID: %d, Temp: %d\n", id, setTemp);
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	4619      	mov	r1, r3
 8001e0a:	480d      	ldr	r0, [pc, #52]	@ (8001e40 <subscriberHandlerCb+0x15c>)
 8001e0c:	f006 ff04 	bl	8008c18 <iprintf>
 8001e10:	e003      	b.n	8001e1a <subscriberHandlerCb+0x136>
    }
    else {
        printf("Unknown JSON format: %s\n", jsonString);
 8001e12:	6a39      	ldr	r1, [r7, #32]
 8001e14:	480b      	ldr	r0, [pc, #44]	@ (8001e44 <subscriberHandlerCb+0x160>)
 8001e16:	f006 feff 	bl	8008c18 <iprintf>
 8001e1a:	46b5      	mov	sp, r6
    }
}
 8001e1c:	372c      	adds	r7, #44	@ 0x2c
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001e24:	0800c928 	.word	0x0800c928
 8001e28:	0800c934 	.word	0x0800c934
 8001e2c:	0800c954 	.word	0x0800c954
 8001e30:	0800c960 	.word	0x0800c960
 8001e34:	0800c984 	.word	0x0800c984
 8001e38:	0800c98c 	.word	0x0800c98c
 8001e3c:	0800c9b0 	.word	0x0800c9b0
 8001e40:	0800c9b8 	.word	0x0800c9b8
 8001e44:	0800c9dc 	.word	0x0800c9dc

08001e48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e4c:	b672      	cpsid	i
}
 8001e4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e50:	bf00      	nop
 8001e52:	e7fd      	b.n	8001e50 <Error_Handler+0x8>

08001e54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	607b      	str	r3, [r7, #4]
 8001e5e:	4b10      	ldr	r3, [pc, #64]	@ (8001ea0 <HAL_MspInit+0x4c>)
 8001e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e62:	4a0f      	ldr	r2, [pc, #60]	@ (8001ea0 <HAL_MspInit+0x4c>)
 8001e64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e68:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8001ea0 <HAL_MspInit+0x4c>)
 8001e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e72:	607b      	str	r3, [r7, #4]
 8001e74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	603b      	str	r3, [r7, #0]
 8001e7a:	4b09      	ldr	r3, [pc, #36]	@ (8001ea0 <HAL_MspInit+0x4c>)
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e7e:	4a08      	ldr	r2, [pc, #32]	@ (8001ea0 <HAL_MspInit+0x4c>)
 8001e80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e84:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e86:	4b06      	ldr	r3, [pc, #24]	@ (8001ea0 <HAL_MspInit+0x4c>)
 8001e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e8e:	603b      	str	r3, [r7, #0]
 8001e90:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001e92:	2007      	movs	r0, #7
 8001e94:	f001 f85a 	bl	8002f4c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e98:	bf00      	nop
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	40023800 	.word	0x40023800

08001ea4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b08a      	sub	sp, #40	@ 0x28
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eac:	f107 0314 	add.w	r3, r7, #20
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	605a      	str	r2, [r3, #4]
 8001eb6:	609a      	str	r2, [r3, #8]
 8001eb8:	60da      	str	r2, [r3, #12]
 8001eba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a3c      	ldr	r2, [pc, #240]	@ (8001fb4 <HAL_ADC_MspInit+0x110>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d171      	bne.n	8001faa <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	613b      	str	r3, [r7, #16]
 8001eca:	4b3b      	ldr	r3, [pc, #236]	@ (8001fb8 <HAL_ADC_MspInit+0x114>)
 8001ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ece:	4a3a      	ldr	r2, [pc, #232]	@ (8001fb8 <HAL_ADC_MspInit+0x114>)
 8001ed0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ed4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ed6:	4b38      	ldr	r3, [pc, #224]	@ (8001fb8 <HAL_ADC_MspInit+0x114>)
 8001ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ede:	613b      	str	r3, [r7, #16]
 8001ee0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	4b34      	ldr	r3, [pc, #208]	@ (8001fb8 <HAL_ADC_MspInit+0x114>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eea:	4a33      	ldr	r2, [pc, #204]	@ (8001fb8 <HAL_ADC_MspInit+0x114>)
 8001eec:	f043 0304 	orr.w	r3, r3, #4
 8001ef0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ef2:	4b31      	ldr	r3, [pc, #196]	@ (8001fb8 <HAL_ADC_MspInit+0x114>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef6:	f003 0304 	and.w	r3, r3, #4
 8001efa:	60fb      	str	r3, [r7, #12]
 8001efc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	60bb      	str	r3, [r7, #8]
 8001f02:	4b2d      	ldr	r3, [pc, #180]	@ (8001fb8 <HAL_ADC_MspInit+0x114>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f06:	4a2c      	ldr	r2, [pc, #176]	@ (8001fb8 <HAL_ADC_MspInit+0x114>)
 8001f08:	f043 0301 	orr.w	r3, r3, #1
 8001f0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f0e:	4b2a      	ldr	r3, [pc, #168]	@ (8001fb8 <HAL_ADC_MspInit+0x114>)
 8001f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	60bb      	str	r3, [r7, #8]
 8001f18:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = MQ135_SENSOR_Pin|WATER_LEVEL_Pin;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f22:	2300      	movs	r3, #0
 8001f24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f26:	f107 0314 	add.w	r3, r7, #20
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4823      	ldr	r0, [pc, #140]	@ (8001fbc <HAL_ADC_MspInit+0x118>)
 8001f2e:	f001 fc51 	bl	80037d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LM35_ID0_Pin|LM35_ID1_Pin;
 8001f32:	2303      	movs	r3, #3
 8001f34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f36:	2303      	movs	r3, #3
 8001f38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f3e:	f107 0314 	add.w	r3, r7, #20
 8001f42:	4619      	mov	r1, r3
 8001f44:	481e      	ldr	r0, [pc, #120]	@ (8001fc0 <HAL_ADC_MspInit+0x11c>)
 8001f46:	f001 fc45 	bl	80037d4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001f4a:	4b1e      	ldr	r3, [pc, #120]	@ (8001fc4 <HAL_ADC_MspInit+0x120>)
 8001f4c:	4a1e      	ldr	r2, [pc, #120]	@ (8001fc8 <HAL_ADC_MspInit+0x124>)
 8001f4e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001f50:	4b1c      	ldr	r3, [pc, #112]	@ (8001fc4 <HAL_ADC_MspInit+0x120>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f56:	4b1b      	ldr	r3, [pc, #108]	@ (8001fc4 <HAL_ADC_MspInit+0x120>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f5c:	4b19      	ldr	r3, [pc, #100]	@ (8001fc4 <HAL_ADC_MspInit+0x120>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001f62:	4b18      	ldr	r3, [pc, #96]	@ (8001fc4 <HAL_ADC_MspInit+0x120>)
 8001f64:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f68:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f6a:	4b16      	ldr	r3, [pc, #88]	@ (8001fc4 <HAL_ADC_MspInit+0x120>)
 8001f6c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001f70:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f72:	4b14      	ldr	r3, [pc, #80]	@ (8001fc4 <HAL_ADC_MspInit+0x120>)
 8001f74:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f78:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001f7a:	4b12      	ldr	r3, [pc, #72]	@ (8001fc4 <HAL_ADC_MspInit+0x120>)
 8001f7c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f80:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001f82:	4b10      	ldr	r3, [pc, #64]	@ (8001fc4 <HAL_ADC_MspInit+0x120>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f88:	4b0e      	ldr	r3, [pc, #56]	@ (8001fc4 <HAL_ADC_MspInit+0x120>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001f8e:	480d      	ldr	r0, [pc, #52]	@ (8001fc4 <HAL_ADC_MspInit+0x120>)
 8001f90:	f001 f81e 	bl	8002fd0 <HAL_DMA_Init>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8001f9a:	f7ff ff55 	bl	8001e48 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a08      	ldr	r2, [pc, #32]	@ (8001fc4 <HAL_ADC_MspInit+0x120>)
 8001fa2:	639a      	str	r2, [r3, #56]	@ 0x38
 8001fa4:	4a07      	ldr	r2, [pc, #28]	@ (8001fc4 <HAL_ADC_MspInit+0x120>)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001faa:	bf00      	nop
 8001fac:	3728      	adds	r7, #40	@ 0x28
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	40012000 	.word	0x40012000
 8001fb8:	40023800 	.word	0x40023800
 8001fbc:	40020800 	.word	0x40020800
 8001fc0:	40020000 	.word	0x40020000
 8001fc4:	200002a4 	.word	0x200002a4
 8001fc8:	40026410 	.word	0x40026410

08001fcc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a0b      	ldr	r2, [pc, #44]	@ (8002008 <HAL_TIM_Base_MspInit+0x3c>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d10d      	bne.n	8001ffa <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001fde:	2300      	movs	r3, #0
 8001fe0:	60fb      	str	r3, [r7, #12]
 8001fe2:	4b0a      	ldr	r3, [pc, #40]	@ (800200c <HAL_TIM_Base_MspInit+0x40>)
 8001fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fe6:	4a09      	ldr	r2, [pc, #36]	@ (800200c <HAL_TIM_Base_MspInit+0x40>)
 8001fe8:	f043 0301 	orr.w	r3, r3, #1
 8001fec:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fee:	4b07      	ldr	r3, [pc, #28]	@ (800200c <HAL_TIM_Base_MspInit+0x40>)
 8001ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001ffa:	bf00      	nop
 8001ffc:	3714      	adds	r7, #20
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	40010000 	.word	0x40010000
 800200c:	40023800 	.word	0x40023800

08002010 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b088      	sub	sp, #32
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002018:	f107 030c 	add.w	r3, r7, #12
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	605a      	str	r2, [r3, #4]
 8002022:	609a      	str	r2, [r3, #8]
 8002024:	60da      	str	r2, [r3, #12]
 8002026:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a12      	ldr	r2, [pc, #72]	@ (8002078 <HAL_TIM_MspPostInit+0x68>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d11e      	bne.n	8002070 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	60bb      	str	r3, [r7, #8]
 8002036:	4b11      	ldr	r3, [pc, #68]	@ (800207c <HAL_TIM_MspPostInit+0x6c>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800203a:	4a10      	ldr	r2, [pc, #64]	@ (800207c <HAL_TIM_MspPostInit+0x6c>)
 800203c:	f043 0301 	orr.w	r3, r3, #1
 8002040:	6313      	str	r3, [r2, #48]	@ 0x30
 8002042:	4b0e      	ldr	r3, [pc, #56]	@ (800207c <HAL_TIM_MspPostInit+0x6c>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	60bb      	str	r3, [r7, #8]
 800204c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = IR_OUT_Pin;
 800204e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002052:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002054:	2302      	movs	r3, #2
 8002056:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002058:	2302      	movs	r3, #2
 800205a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205c:	2300      	movs	r3, #0
 800205e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002060:	2301      	movs	r3, #1
 8002062:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(IR_OUT_GPIO_Port, &GPIO_InitStruct);
 8002064:	f107 030c 	add.w	r3, r7, #12
 8002068:	4619      	mov	r1, r3
 800206a:	4805      	ldr	r0, [pc, #20]	@ (8002080 <HAL_TIM_MspPostInit+0x70>)
 800206c:	f001 fbb2 	bl	80037d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002070:	bf00      	nop
 8002072:	3720      	adds	r7, #32
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40010000 	.word	0x40010000
 800207c:	40023800 	.word	0x40023800
 8002080:	40020000 	.word	0x40020000

08002084 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b08e      	sub	sp, #56	@ 0x38
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800208c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	605a      	str	r2, [r3, #4]
 8002096:	609a      	str	r2, [r3, #8]
 8002098:	60da      	str	r2, [r3, #12]
 800209a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a54      	ldr	r2, [pc, #336]	@ (80021f4 <HAL_UART_MspInit+0x170>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d12d      	bne.n	8002102 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020a6:	2300      	movs	r3, #0
 80020a8:	623b      	str	r3, [r7, #32]
 80020aa:	4b53      	ldr	r3, [pc, #332]	@ (80021f8 <HAL_UART_MspInit+0x174>)
 80020ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ae:	4a52      	ldr	r2, [pc, #328]	@ (80021f8 <HAL_UART_MspInit+0x174>)
 80020b0:	f043 0310 	orr.w	r3, r3, #16
 80020b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80020b6:	4b50      	ldr	r3, [pc, #320]	@ (80021f8 <HAL_UART_MspInit+0x174>)
 80020b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ba:	f003 0310 	and.w	r3, r3, #16
 80020be:	623b      	str	r3, [r7, #32]
 80020c0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020c2:	2300      	movs	r3, #0
 80020c4:	61fb      	str	r3, [r7, #28]
 80020c6:	4b4c      	ldr	r3, [pc, #304]	@ (80021f8 <HAL_UART_MspInit+0x174>)
 80020c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ca:	4a4b      	ldr	r2, [pc, #300]	@ (80021f8 <HAL_UART_MspInit+0x174>)
 80020cc:	f043 0301 	orr.w	r3, r3, #1
 80020d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80020d2:	4b49      	ldr	r3, [pc, #292]	@ (80021f8 <HAL_UART_MspInit+0x174>)
 80020d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	61fb      	str	r3, [r7, #28]
 80020dc:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = SERIAL_SIMCOM_TX_Pin|SERIAL_SIMCOM_RX_Pin;
 80020de:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80020e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e4:	2302      	movs	r3, #2
 80020e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020e8:	2301      	movs	r3, #1
 80020ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020ec:	2302      	movs	r3, #2
 80020ee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80020f0:	2307      	movs	r3, #7
 80020f2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020f8:	4619      	mov	r1, r3
 80020fa:	4840      	ldr	r0, [pc, #256]	@ (80021fc <HAL_UART_MspInit+0x178>)
 80020fc:	f001 fb6a 	bl	80037d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002100:	e073      	b.n	80021ea <HAL_UART_MspInit+0x166>
  else if(huart->Instance==USART2)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a3e      	ldr	r2, [pc, #248]	@ (8002200 <HAL_UART_MspInit+0x17c>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d134      	bne.n	8002176 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 800210c:	2300      	movs	r3, #0
 800210e:	61bb      	str	r3, [r7, #24]
 8002110:	4b39      	ldr	r3, [pc, #228]	@ (80021f8 <HAL_UART_MspInit+0x174>)
 8002112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002114:	4a38      	ldr	r2, [pc, #224]	@ (80021f8 <HAL_UART_MspInit+0x174>)
 8002116:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800211a:	6413      	str	r3, [r2, #64]	@ 0x40
 800211c:	4b36      	ldr	r3, [pc, #216]	@ (80021f8 <HAL_UART_MspInit+0x174>)
 800211e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002120:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002124:	61bb      	str	r3, [r7, #24]
 8002126:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002128:	2300      	movs	r3, #0
 800212a:	617b      	str	r3, [r7, #20]
 800212c:	4b32      	ldr	r3, [pc, #200]	@ (80021f8 <HAL_UART_MspInit+0x174>)
 800212e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002130:	4a31      	ldr	r2, [pc, #196]	@ (80021f8 <HAL_UART_MspInit+0x174>)
 8002132:	f043 0301 	orr.w	r3, r3, #1
 8002136:	6313      	str	r3, [r2, #48]	@ 0x30
 8002138:	4b2f      	ldr	r3, [pc, #188]	@ (80021f8 <HAL_UART_MspInit+0x174>)
 800213a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800213c:	f003 0301 	and.w	r3, r3, #1
 8002140:	617b      	str	r3, [r7, #20]
 8002142:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = DEBUG_TX_Pin|DEBUG_RX_Pin;
 8002144:	230c      	movs	r3, #12
 8002146:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002148:	2302      	movs	r3, #2
 800214a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800214c:	2301      	movs	r3, #1
 800214e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002150:	2302      	movs	r3, #2
 8002152:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002154:	2307      	movs	r3, #7
 8002156:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002158:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800215c:	4619      	mov	r1, r3
 800215e:	4827      	ldr	r0, [pc, #156]	@ (80021fc <HAL_UART_MspInit+0x178>)
 8002160:	f001 fb38 	bl	80037d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002164:	2200      	movs	r2, #0
 8002166:	2100      	movs	r1, #0
 8002168:	2026      	movs	r0, #38	@ 0x26
 800216a:	f000 fefa 	bl	8002f62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800216e:	2026      	movs	r0, #38	@ 0x26
 8002170:	f000 ff13 	bl	8002f9a <HAL_NVIC_EnableIRQ>
}
 8002174:	e039      	b.n	80021ea <HAL_UART_MspInit+0x166>
  else if(huart->Instance==USART6)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a22      	ldr	r2, [pc, #136]	@ (8002204 <HAL_UART_MspInit+0x180>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d134      	bne.n	80021ea <HAL_UART_MspInit+0x166>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002180:	2300      	movs	r3, #0
 8002182:	613b      	str	r3, [r7, #16]
 8002184:	4b1c      	ldr	r3, [pc, #112]	@ (80021f8 <HAL_UART_MspInit+0x174>)
 8002186:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002188:	4a1b      	ldr	r2, [pc, #108]	@ (80021f8 <HAL_UART_MspInit+0x174>)
 800218a:	f043 0320 	orr.w	r3, r3, #32
 800218e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002190:	4b19      	ldr	r3, [pc, #100]	@ (80021f8 <HAL_UART_MspInit+0x174>)
 8002192:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002194:	f003 0320 	and.w	r3, r3, #32
 8002198:	613b      	str	r3, [r7, #16]
 800219a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800219c:	2300      	movs	r3, #0
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	4b15      	ldr	r3, [pc, #84]	@ (80021f8 <HAL_UART_MspInit+0x174>)
 80021a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a4:	4a14      	ldr	r2, [pc, #80]	@ (80021f8 <HAL_UART_MspInit+0x174>)
 80021a6:	f043 0301 	orr.w	r3, r3, #1
 80021aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80021ac:	4b12      	ldr	r3, [pc, #72]	@ (80021f8 <HAL_UART_MspInit+0x174>)
 80021ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b0:	f003 0301 	and.w	r3, r3, #1
 80021b4:	60fb      	str	r3, [r7, #12]
 80021b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERIAL_ENERGY_TX_Pin|SERIAL_ENERGY_RX_Pin;
 80021b8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80021bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021be:	2302      	movs	r3, #2
 80021c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021c2:	2301      	movs	r3, #1
 80021c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021c6:	2302      	movs	r3, #2
 80021c8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80021ca:	2308      	movs	r3, #8
 80021cc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021d2:	4619      	mov	r1, r3
 80021d4:	4809      	ldr	r0, [pc, #36]	@ (80021fc <HAL_UART_MspInit+0x178>)
 80021d6:	f001 fafd 	bl	80037d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80021da:	2200      	movs	r2, #0
 80021dc:	2100      	movs	r1, #0
 80021de:	2047      	movs	r0, #71	@ 0x47
 80021e0:	f000 febf 	bl	8002f62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80021e4:	2047      	movs	r0, #71	@ 0x47
 80021e6:	f000 fed8 	bl	8002f9a <HAL_NVIC_EnableIRQ>
}
 80021ea:	bf00      	nop
 80021ec:	3738      	adds	r7, #56	@ 0x38
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	40011000 	.word	0x40011000
 80021f8:	40023800 	.word	0x40023800
 80021fc:	40020000 	.word	0x40020000
 8002200:	40004400 	.word	0x40004400
 8002204:	40011400 	.word	0x40011400

08002208 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800220c:	bf00      	nop
 800220e:	e7fd      	b.n	800220c <NMI_Handler+0x4>

08002210 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002214:	bf00      	nop
 8002216:	e7fd      	b.n	8002214 <HardFault_Handler+0x4>

08002218 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800221c:	bf00      	nop
 800221e:	e7fd      	b.n	800221c <MemManage_Handler+0x4>

08002220 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002224:	bf00      	nop
 8002226:	e7fd      	b.n	8002224 <BusFault_Handler+0x4>

08002228 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800222c:	bf00      	nop
 800222e:	e7fd      	b.n	800222c <UsageFault_Handler+0x4>

08002230 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002234:	bf00      	nop
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr

0800223e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800223e:	b480      	push	{r7}
 8002240:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002242:	bf00      	nop
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002250:	bf00      	nop
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr

0800225a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  TimeSysTick_EventCallback();
 800225e:	f005 fe23 	bl	8007ea8 <TimeSysTick_EventCallback>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002262:	f000 f96d 	bl	8002540 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002266:	bf00      	nop
 8002268:	bd80      	pop	{r7, pc}
	...

0800226c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002270:	4802      	ldr	r0, [pc, #8]	@ (800227c <USART2_IRQHandler+0x10>)
 8002272:	f003 f913 	bl	800549c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002276:	bf00      	nop
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	20000394 	.word	0x20000394

08002280 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002284:	4802      	ldr	r0, [pc, #8]	@ (8002290 <DMA2_Stream0_IRQHandler+0x10>)
 8002286:	f001 f83b 	bl	8003300 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800228a:	bf00      	nop
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	200002a4 	.word	0x200002a4

08002294 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002298:	4802      	ldr	r0, [pc, #8]	@ (80022a4 <USART6_IRQHandler+0x10>)
 800229a:	f003 f8ff 	bl	800549c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800229e:	bf00      	nop
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	200003dc 	.word	0x200003dc

080022a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  return 1;
 80022ac:	2301      	movs	r3, #1
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <_kill>:

int _kill(int pid, int sig)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80022c2:	f006 fee7 	bl	8009094 <__errno>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2216      	movs	r2, #22
 80022ca:	601a      	str	r2, [r3, #0]
  return -1;
 80022cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3708      	adds	r7, #8
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <_exit>:

void _exit (int status)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80022e0:	f04f 31ff 	mov.w	r1, #4294967295
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f7ff ffe7 	bl	80022b8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80022ea:	bf00      	nop
 80022ec:	e7fd      	b.n	80022ea <_exit+0x12>

080022ee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022ee:	b580      	push	{r7, lr}
 80022f0:	b086      	sub	sp, #24
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	60f8      	str	r0, [r7, #12]
 80022f6:	60b9      	str	r1, [r7, #8]
 80022f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022fa:	2300      	movs	r3, #0
 80022fc:	617b      	str	r3, [r7, #20]
 80022fe:	e00a      	b.n	8002316 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002300:	f3af 8000 	nop.w
 8002304:	4601      	mov	r1, r0
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	1c5a      	adds	r2, r3, #1
 800230a:	60ba      	str	r2, [r7, #8]
 800230c:	b2ca      	uxtb	r2, r1
 800230e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	3301      	adds	r3, #1
 8002314:	617b      	str	r3, [r7, #20]
 8002316:	697a      	ldr	r2, [r7, #20]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	429a      	cmp	r2, r3
 800231c:	dbf0      	blt.n	8002300 <_read+0x12>
  }

  return len;
 800231e:	687b      	ldr	r3, [r7, #4]
}
 8002320:	4618      	mov	r0, r3
 8002322:	3718      	adds	r7, #24
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
//  for (DataIdx = 0; DataIdx < len; DataIdx++)
//  {
//    __io_putchar(*ptr++);
//  }

  HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, 100);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	b29a      	uxth	r2, r3
 8002338:	2364      	movs	r3, #100	@ 0x64
 800233a:	68b9      	ldr	r1, [r7, #8]
 800233c:	4803      	ldr	r0, [pc, #12]	@ (800234c <_write+0x24>)
 800233e:	f002 ff65 	bl	800520c <HAL_UART_Transmit>

  return len;
 8002342:	687b      	ldr	r3, [r7, #4]
}
 8002344:	4618      	mov	r0, r3
 8002346:	3710      	adds	r7, #16
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	20000394 	.word	0x20000394

08002350 <_close>:

int _close(int file)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002358:	f04f 33ff 	mov.w	r3, #4294967295
}
 800235c:	4618      	mov	r0, r3
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002378:	605a      	str	r2, [r3, #4]
  return 0;
 800237a:	2300      	movs	r3, #0
}
 800237c:	4618      	mov	r0, r3
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <_isatty>:

int _isatty(int file)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002390:	2301      	movs	r3, #1
}
 8002392:	4618      	mov	r0, r3
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800239e:	b480      	push	{r7}
 80023a0:	b085      	sub	sp, #20
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	60f8      	str	r0, [r7, #12]
 80023a6:	60b9      	str	r1, [r7, #8]
 80023a8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023aa:	2300      	movs	r3, #0
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3714      	adds	r7, #20
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023c0:	4a14      	ldr	r2, [pc, #80]	@ (8002414 <_sbrk+0x5c>)
 80023c2:	4b15      	ldr	r3, [pc, #84]	@ (8002418 <_sbrk+0x60>)
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023cc:	4b13      	ldr	r3, [pc, #76]	@ (800241c <_sbrk+0x64>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d102      	bne.n	80023da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023d4:	4b11      	ldr	r3, [pc, #68]	@ (800241c <_sbrk+0x64>)
 80023d6:	4a12      	ldr	r2, [pc, #72]	@ (8002420 <_sbrk+0x68>)
 80023d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023da:	4b10      	ldr	r3, [pc, #64]	@ (800241c <_sbrk+0x64>)
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4413      	add	r3, r2
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d207      	bcs.n	80023f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023e8:	f006 fe54 	bl	8009094 <__errno>
 80023ec:	4603      	mov	r3, r0
 80023ee:	220c      	movs	r2, #12
 80023f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023f2:	f04f 33ff 	mov.w	r3, #4294967295
 80023f6:	e009      	b.n	800240c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023f8:	4b08      	ldr	r3, [pc, #32]	@ (800241c <_sbrk+0x64>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023fe:	4b07      	ldr	r3, [pc, #28]	@ (800241c <_sbrk+0x64>)
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4413      	add	r3, r2
 8002406:	4a05      	ldr	r2, [pc, #20]	@ (800241c <_sbrk+0x64>)
 8002408:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800240a:	68fb      	ldr	r3, [r7, #12]
}
 800240c:	4618      	mov	r0, r3
 800240e:	3718      	adds	r7, #24
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	20018000 	.word	0x20018000
 8002418:	00000400 	.word	0x00000400
 800241c:	2000065c 	.word	0x2000065c
 8002420:	20000e08 	.word	0x20000e08

08002424 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002428:	4b06      	ldr	r3, [pc, #24]	@ (8002444 <SystemInit+0x20>)
 800242a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800242e:	4a05      	ldr	r2, [pc, #20]	@ (8002444 <SystemInit+0x20>)
 8002430:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002434:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002438:	bf00      	nop
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	e000ed00 	.word	0xe000ed00

08002448 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002448:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002480 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800244c:	f7ff ffea 	bl	8002424 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002450:	480c      	ldr	r0, [pc, #48]	@ (8002484 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002452:	490d      	ldr	r1, [pc, #52]	@ (8002488 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002454:	4a0d      	ldr	r2, [pc, #52]	@ (800248c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002456:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002458:	e002      	b.n	8002460 <LoopCopyDataInit>

0800245a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800245a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800245c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800245e:	3304      	adds	r3, #4

08002460 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002460:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002462:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002464:	d3f9      	bcc.n	800245a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002466:	4a0a      	ldr	r2, [pc, #40]	@ (8002490 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002468:	4c0a      	ldr	r4, [pc, #40]	@ (8002494 <LoopFillZerobss+0x22>)
  movs r3, #0
 800246a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800246c:	e001      	b.n	8002472 <LoopFillZerobss>

0800246e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800246e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002470:	3204      	adds	r2, #4

08002472 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002472:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002474:	d3fb      	bcc.n	800246e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002476:	f006 fe13 	bl	80090a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800247a:	f7fe fd7f 	bl	8000f7c <main>
  bx  lr    
 800247e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002480:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002484:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002488:	20000240 	.word	0x20000240
  ldr r2, =_sidata
 800248c:	0800d0e0 	.word	0x0800d0e0
  ldr r2, =_sbss
 8002490:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 8002494:	20000e08 	.word	0x20000e08

08002498 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002498:	e7fe      	b.n	8002498 <ADC_IRQHandler>
	...

0800249c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024a0:	4b0e      	ldr	r3, [pc, #56]	@ (80024dc <HAL_Init+0x40>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a0d      	ldr	r2, [pc, #52]	@ (80024dc <HAL_Init+0x40>)
 80024a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80024aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024ac:	4b0b      	ldr	r3, [pc, #44]	@ (80024dc <HAL_Init+0x40>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a0a      	ldr	r2, [pc, #40]	@ (80024dc <HAL_Init+0x40>)
 80024b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024b8:	4b08      	ldr	r3, [pc, #32]	@ (80024dc <HAL_Init+0x40>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a07      	ldr	r2, [pc, #28]	@ (80024dc <HAL_Init+0x40>)
 80024be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024c4:	2003      	movs	r0, #3
 80024c6:	f000 fd41 	bl	8002f4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024ca:	2000      	movs	r0, #0
 80024cc:	f000 f808 	bl	80024e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024d0:	f7ff fcc0 	bl	8001e54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	40023c00 	.word	0x40023c00

080024e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024e8:	4b12      	ldr	r3, [pc, #72]	@ (8002534 <HAL_InitTick+0x54>)
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	4b12      	ldr	r3, [pc, #72]	@ (8002538 <HAL_InitTick+0x58>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	4619      	mov	r1, r3
 80024f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80024fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80024fe:	4618      	mov	r0, r3
 8002500:	f000 fd59 	bl	8002fb6 <HAL_SYSTICK_Config>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e00e      	b.n	800252c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2b0f      	cmp	r3, #15
 8002512:	d80a      	bhi.n	800252a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002514:	2200      	movs	r2, #0
 8002516:	6879      	ldr	r1, [r7, #4]
 8002518:	f04f 30ff 	mov.w	r0, #4294967295
 800251c:	f000 fd21 	bl	8002f62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002520:	4a06      	ldr	r2, [pc, #24]	@ (800253c <HAL_InitTick+0x5c>)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002526:	2300      	movs	r3, #0
 8002528:	e000      	b.n	800252c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
}
 800252c:	4618      	mov	r0, r3
 800252e:	3708      	adds	r7, #8
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	20000008 	.word	0x20000008
 8002538:	20000010 	.word	0x20000010
 800253c:	2000000c 	.word	0x2000000c

08002540 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002544:	4b06      	ldr	r3, [pc, #24]	@ (8002560 <HAL_IncTick+0x20>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	461a      	mov	r2, r3
 800254a:	4b06      	ldr	r3, [pc, #24]	@ (8002564 <HAL_IncTick+0x24>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4413      	add	r3, r2
 8002550:	4a04      	ldr	r2, [pc, #16]	@ (8002564 <HAL_IncTick+0x24>)
 8002552:	6013      	str	r3, [r2, #0]
}
 8002554:	bf00      	nop
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	20000010 	.word	0x20000010
 8002564:	20000660 	.word	0x20000660

08002568 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  return uwTick;
 800256c:	4b03      	ldr	r3, [pc, #12]	@ (800257c <HAL_GetTick+0x14>)
 800256e:	681b      	ldr	r3, [r3, #0]
}
 8002570:	4618      	mov	r0, r3
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	20000660 	.word	0x20000660

08002580 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002588:	f7ff ffee 	bl	8002568 <HAL_GetTick>
 800258c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002598:	d005      	beq.n	80025a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800259a:	4b0a      	ldr	r3, [pc, #40]	@ (80025c4 <HAL_Delay+0x44>)
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	461a      	mov	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	4413      	add	r3, r2
 80025a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80025a6:	bf00      	nop
 80025a8:	f7ff ffde 	bl	8002568 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d8f7      	bhi.n	80025a8 <HAL_Delay+0x28>
  {
  }
}
 80025b8:	bf00      	nop
 80025ba:	bf00      	nop
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	20000010 	.word	0x20000010

080025c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025d0:	2300      	movs	r3, #0
 80025d2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e033      	b.n	8002646 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d109      	bne.n	80025fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f7ff fc5c 	bl	8001ea4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025fe:	f003 0310 	and.w	r3, r3, #16
 8002602:	2b00      	cmp	r3, #0
 8002604:	d118      	bne.n	8002638 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800260a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800260e:	f023 0302 	bic.w	r3, r3, #2
 8002612:	f043 0202 	orr.w	r2, r3, #2
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 fa48 	bl	8002ab0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800262a:	f023 0303 	bic.w	r3, r3, #3
 800262e:	f043 0201 	orr.w	r2, r3, #1
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	641a      	str	r2, [r3, #64]	@ 0x40
 8002636:	e001      	b.n	800263c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002644:	7bfb      	ldrb	r3, [r7, #15]
}
 8002646:	4618      	mov	r0, r3
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
	...

08002650 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800265c:	2300      	movs	r3, #0
 800265e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002666:	2b01      	cmp	r3, #1
 8002668:	d101      	bne.n	800266e <HAL_ADC_Start_DMA+0x1e>
 800266a:	2302      	movs	r3, #2
 800266c:	e0ce      	b.n	800280c <HAL_ADC_Start_DMA+0x1bc>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2201      	movs	r2, #1
 8002672:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	2b01      	cmp	r3, #1
 8002682:	d018      	beq.n	80026b6 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	689a      	ldr	r2, [r3, #8]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f042 0201 	orr.w	r2, r2, #1
 8002692:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002694:	4b5f      	ldr	r3, [pc, #380]	@ (8002814 <HAL_ADC_Start_DMA+0x1c4>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a5f      	ldr	r2, [pc, #380]	@ (8002818 <HAL_ADC_Start_DMA+0x1c8>)
 800269a:	fba2 2303 	umull	r2, r3, r2, r3
 800269e:	0c9a      	lsrs	r2, r3, #18
 80026a0:	4613      	mov	r3, r2
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	4413      	add	r3, r2
 80026a6:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80026a8:	e002      	b.n	80026b0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	3b01      	subs	r3, #1
 80026ae:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d1f9      	bne.n	80026aa <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026c4:	d107      	bne.n	80026d6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	689a      	ldr	r2, [r3, #8]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80026d4:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f003 0301 	and.w	r3, r3, #1
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	f040 8086 	bne.w	80027f2 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ea:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80026ee:	f023 0301 	bic.w	r3, r3, #1
 80026f2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002704:	2b00      	cmp	r3, #0
 8002706:	d007      	beq.n	8002718 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800270c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002710:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800271c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002720:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002724:	d106      	bne.n	8002734 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800272a:	f023 0206 	bic.w	r2, r3, #6
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	645a      	str	r2, [r3, #68]	@ 0x44
 8002732:	e002      	b.n	800273a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2200      	movs	r2, #0
 8002738:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002742:	4b36      	ldr	r3, [pc, #216]	@ (800281c <HAL_ADC_Start_DMA+0x1cc>)
 8002744:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800274a:	4a35      	ldr	r2, [pc, #212]	@ (8002820 <HAL_ADC_Start_DMA+0x1d0>)
 800274c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002752:	4a34      	ldr	r2, [pc, #208]	@ (8002824 <HAL_ADC_Start_DMA+0x1d4>)
 8002754:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800275a:	4a33      	ldr	r2, [pc, #204]	@ (8002828 <HAL_ADC_Start_DMA+0x1d8>)
 800275c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002766:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	685a      	ldr	r2, [r3, #4]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002776:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	689a      	ldr	r2, [r3, #8]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002786:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	334c      	adds	r3, #76	@ 0x4c
 8002792:	4619      	mov	r1, r3
 8002794:	68ba      	ldr	r2, [r7, #8]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f000 fcc8 	bl	800312c <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f003 031f 	and.w	r3, r3, #31
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d10f      	bne.n	80027c8 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d129      	bne.n	800280a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	689a      	ldr	r2, [r3, #8]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80027c4:	609a      	str	r2, [r3, #8]
 80027c6:	e020      	b.n	800280a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a17      	ldr	r2, [pc, #92]	@ (800282c <HAL_ADC_Start_DMA+0x1dc>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d11b      	bne.n	800280a <HAL_ADC_Start_DMA+0x1ba>
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d114      	bne.n	800280a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	689a      	ldr	r2, [r3, #8]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80027ee:	609a      	str	r2, [r3, #8]
 80027f0:	e00b      	b.n	800280a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f6:	f043 0210 	orr.w	r2, r3, #16
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002802:	f043 0201 	orr.w	r2, r3, #1
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	3718      	adds	r7, #24
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	20000008 	.word	0x20000008
 8002818:	431bde83 	.word	0x431bde83
 800281c:	40012300 	.word	0x40012300
 8002820:	08002ca9 	.word	0x08002ca9
 8002824:	08002d63 	.word	0x08002d63
 8002828:	08002d7f 	.word	0x08002d7f
 800282c:	40012000 	.word	0x40012000

08002830 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800284c:	bf00      	nop
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002860:	bf00      	nop
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002876:	2300      	movs	r3, #0
 8002878:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002880:	2b01      	cmp	r3, #1
 8002882:	d101      	bne.n	8002888 <HAL_ADC_ConfigChannel+0x1c>
 8002884:	2302      	movs	r3, #2
 8002886:	e105      	b.n	8002a94 <HAL_ADC_ConfigChannel+0x228>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2b09      	cmp	r3, #9
 8002896:	d925      	bls.n	80028e4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68d9      	ldr	r1, [r3, #12]
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	461a      	mov	r2, r3
 80028a6:	4613      	mov	r3, r2
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	4413      	add	r3, r2
 80028ac:	3b1e      	subs	r3, #30
 80028ae:	2207      	movs	r2, #7
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	43da      	mvns	r2, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	400a      	ands	r2, r1
 80028bc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68d9      	ldr	r1, [r3, #12]
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	689a      	ldr	r2, [r3, #8]
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	4618      	mov	r0, r3
 80028d0:	4603      	mov	r3, r0
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	4403      	add	r3, r0
 80028d6:	3b1e      	subs	r3, #30
 80028d8:	409a      	lsls	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	430a      	orrs	r2, r1
 80028e0:	60da      	str	r2, [r3, #12]
 80028e2:	e022      	b.n	800292a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	6919      	ldr	r1, [r3, #16]
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	461a      	mov	r2, r3
 80028f2:	4613      	mov	r3, r2
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	4413      	add	r3, r2
 80028f8:	2207      	movs	r2, #7
 80028fa:	fa02 f303 	lsl.w	r3, r2, r3
 80028fe:	43da      	mvns	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	400a      	ands	r2, r1
 8002906:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6919      	ldr	r1, [r3, #16]
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	689a      	ldr	r2, [r3, #8]
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	b29b      	uxth	r3, r3
 8002918:	4618      	mov	r0, r3
 800291a:	4603      	mov	r3, r0
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	4403      	add	r3, r0
 8002920:	409a      	lsls	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	430a      	orrs	r2, r1
 8002928:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	2b06      	cmp	r3, #6
 8002930:	d824      	bhi.n	800297c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685a      	ldr	r2, [r3, #4]
 800293c:	4613      	mov	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	4413      	add	r3, r2
 8002942:	3b05      	subs	r3, #5
 8002944:	221f      	movs	r2, #31
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	43da      	mvns	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	400a      	ands	r2, r1
 8002952:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	b29b      	uxth	r3, r3
 8002960:	4618      	mov	r0, r3
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	685a      	ldr	r2, [r3, #4]
 8002966:	4613      	mov	r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	4413      	add	r3, r2
 800296c:	3b05      	subs	r3, #5
 800296e:	fa00 f203 	lsl.w	r2, r0, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	430a      	orrs	r2, r1
 8002978:	635a      	str	r2, [r3, #52]	@ 0x34
 800297a:	e04c      	b.n	8002a16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	2b0c      	cmp	r3, #12
 8002982:	d824      	bhi.n	80029ce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685a      	ldr	r2, [r3, #4]
 800298e:	4613      	mov	r3, r2
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	4413      	add	r3, r2
 8002994:	3b23      	subs	r3, #35	@ 0x23
 8002996:	221f      	movs	r2, #31
 8002998:	fa02 f303 	lsl.w	r3, r2, r3
 800299c:	43da      	mvns	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	400a      	ands	r2, r1
 80029a4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	4618      	mov	r0, r3
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685a      	ldr	r2, [r3, #4]
 80029b8:	4613      	mov	r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	4413      	add	r3, r2
 80029be:	3b23      	subs	r3, #35	@ 0x23
 80029c0:	fa00 f203 	lsl.w	r2, r0, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	430a      	orrs	r2, r1
 80029ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80029cc:	e023      	b.n	8002a16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685a      	ldr	r2, [r3, #4]
 80029d8:	4613      	mov	r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	4413      	add	r3, r2
 80029de:	3b41      	subs	r3, #65	@ 0x41
 80029e0:	221f      	movs	r2, #31
 80029e2:	fa02 f303 	lsl.w	r3, r2, r3
 80029e6:	43da      	mvns	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	400a      	ands	r2, r1
 80029ee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	4618      	mov	r0, r3
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685a      	ldr	r2, [r3, #4]
 8002a02:	4613      	mov	r3, r2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	4413      	add	r3, r2
 8002a08:	3b41      	subs	r3, #65	@ 0x41
 8002a0a:	fa00 f203 	lsl.w	r2, r0, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	430a      	orrs	r2, r1
 8002a14:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a16:	4b22      	ldr	r3, [pc, #136]	@ (8002aa0 <HAL_ADC_ConfigChannel+0x234>)
 8002a18:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a21      	ldr	r2, [pc, #132]	@ (8002aa4 <HAL_ADC_ConfigChannel+0x238>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d109      	bne.n	8002a38 <HAL_ADC_ConfigChannel+0x1cc>
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2b12      	cmp	r3, #18
 8002a2a:	d105      	bne.n	8002a38 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a19      	ldr	r2, [pc, #100]	@ (8002aa4 <HAL_ADC_ConfigChannel+0x238>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d123      	bne.n	8002a8a <HAL_ADC_ConfigChannel+0x21e>
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2b10      	cmp	r3, #16
 8002a48:	d003      	beq.n	8002a52 <HAL_ADC_ConfigChannel+0x1e6>
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2b11      	cmp	r3, #17
 8002a50:	d11b      	bne.n	8002a8a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2b10      	cmp	r3, #16
 8002a64:	d111      	bne.n	8002a8a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a66:	4b10      	ldr	r3, [pc, #64]	@ (8002aa8 <HAL_ADC_ConfigChannel+0x23c>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a10      	ldr	r2, [pc, #64]	@ (8002aac <HAL_ADC_ConfigChannel+0x240>)
 8002a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a70:	0c9a      	lsrs	r2, r3, #18
 8002a72:	4613      	mov	r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	4413      	add	r3, r2
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002a7c:	e002      	b.n	8002a84 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	3b01      	subs	r3, #1
 8002a82:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1f9      	bne.n	8002a7e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3714      	adds	r7, #20
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr
 8002aa0:	40012300 	.word	0x40012300
 8002aa4:	40012000 	.word	0x40012000
 8002aa8:	20000008 	.word	0x20000008
 8002aac:	431bde83 	.word	0x431bde83

08002ab0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ab8:	4b79      	ldr	r3, [pc, #484]	@ (8002ca0 <ADC_Init+0x1f0>)
 8002aba:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	685a      	ldr	r2, [r3, #4]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	431a      	orrs	r2, r3
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	685a      	ldr	r2, [r3, #4]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ae4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	6859      	ldr	r1, [r3, #4]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	021a      	lsls	r2, r3, #8
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	430a      	orrs	r2, r1
 8002af8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	685a      	ldr	r2, [r3, #4]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002b08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	6859      	ldr	r1, [r3, #4]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689a      	ldr	r2, [r3, #8]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	689a      	ldr	r2, [r3, #8]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b2a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	6899      	ldr	r1, [r3, #8]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	68da      	ldr	r2, [r3, #12]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b42:	4a58      	ldr	r2, [pc, #352]	@ (8002ca4 <ADC_Init+0x1f4>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d022      	beq.n	8002b8e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	689a      	ldr	r2, [r3, #8]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002b56:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	6899      	ldr	r1, [r3, #8]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	430a      	orrs	r2, r1
 8002b68:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	689a      	ldr	r2, [r3, #8]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002b78:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	6899      	ldr	r1, [r3, #8]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	609a      	str	r2, [r3, #8]
 8002b8c:	e00f      	b.n	8002bae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	689a      	ldr	r2, [r3, #8]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002b9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	689a      	ldr	r2, [r3, #8]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002bac:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	689a      	ldr	r2, [r3, #8]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f022 0202 	bic.w	r2, r2, #2
 8002bbc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	6899      	ldr	r1, [r3, #8]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	7e1b      	ldrb	r3, [r3, #24]
 8002bc8:	005a      	lsls	r2, r3, #1
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	430a      	orrs	r2, r1
 8002bd0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d01b      	beq.n	8002c14 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	685a      	ldr	r2, [r3, #4]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002bea:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	685a      	ldr	r2, [r3, #4]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002bfa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	6859      	ldr	r1, [r3, #4]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c06:	3b01      	subs	r3, #1
 8002c08:	035a      	lsls	r2, r3, #13
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	605a      	str	r2, [r3, #4]
 8002c12:	e007      	b.n	8002c24 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	685a      	ldr	r2, [r3, #4]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c22:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002c32:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	69db      	ldr	r3, [r3, #28]
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	051a      	lsls	r2, r3, #20
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	430a      	orrs	r2, r1
 8002c48:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	689a      	ldr	r2, [r3, #8]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002c58:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	6899      	ldr	r1, [r3, #8]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002c66:	025a      	lsls	r2, r3, #9
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689a      	ldr	r2, [r3, #8]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c7e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	6899      	ldr	r1, [r3, #8]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	029a      	lsls	r2, r3, #10
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	430a      	orrs	r2, r1
 8002c92:	609a      	str	r2, [r3, #8]
}
 8002c94:	bf00      	nop
 8002c96:	3714      	adds	r7, #20
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr
 8002ca0:	40012300 	.word	0x40012300
 8002ca4:	0f000001 	.word	0x0f000001

08002ca8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cb4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cba:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d13c      	bne.n	8002d3c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d12b      	bne.n	8002d34 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d127      	bne.n	8002d34 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cea:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d006      	beq.n	8002d00 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d119      	bne.n	8002d34 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	685a      	ldr	r2, [r3, #4]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f022 0220 	bic.w	r2, r2, #32
 8002d0e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d14:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d105      	bne.n	8002d34 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d2c:	f043 0201 	orr.w	r2, r3, #1
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002d34:	68f8      	ldr	r0, [r7, #12]
 8002d36:	f7ff fd7b 	bl	8002830 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002d3a:	e00e      	b.n	8002d5a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d40:	f003 0310 	and.w	r3, r3, #16
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d003      	beq.n	8002d50 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002d48:	68f8      	ldr	r0, [r7, #12]
 8002d4a:	f7ff fd85 	bl	8002858 <HAL_ADC_ErrorCallback>
}
 8002d4e:	e004      	b.n	8002d5a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	4798      	blx	r3
}
 8002d5a:	bf00      	nop
 8002d5c:	3710      	adds	r7, #16
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b084      	sub	sp, #16
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d6e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	f7ff fd67 	bl	8002844 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d76:	bf00      	nop
 8002d78:	3710      	adds	r7, #16
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b084      	sub	sp, #16
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d8a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2240      	movs	r2, #64	@ 0x40
 8002d90:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d96:	f043 0204 	orr.w	r2, r3, #4
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002d9e:	68f8      	ldr	r0, [r7, #12]
 8002da0:	f7ff fd5a 	bl	8002858 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002da4:	bf00      	nop
 8002da6:	3710      	adds	r7, #16
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b085      	sub	sp, #20
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f003 0307 	and.w	r3, r3, #7
 8002dba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8002df0 <__NVIC_SetPriorityGrouping+0x44>)
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dc2:	68ba      	ldr	r2, [r7, #8]
 8002dc4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002dc8:	4013      	ands	r3, r2
 8002dca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002dd4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002dd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ddc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dde:	4a04      	ldr	r2, [pc, #16]	@ (8002df0 <__NVIC_SetPriorityGrouping+0x44>)
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	60d3      	str	r3, [r2, #12]
}
 8002de4:	bf00      	nop
 8002de6:	3714      	adds	r7, #20
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr
 8002df0:	e000ed00 	.word	0xe000ed00

08002df4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002df8:	4b04      	ldr	r3, [pc, #16]	@ (8002e0c <__NVIC_GetPriorityGrouping+0x18>)
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	0a1b      	lsrs	r3, r3, #8
 8002dfe:	f003 0307 	and.w	r3, r3, #7
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr
 8002e0c:	e000ed00 	.word	0xe000ed00

08002e10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	4603      	mov	r3, r0
 8002e18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	db0b      	blt.n	8002e3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e22:	79fb      	ldrb	r3, [r7, #7]
 8002e24:	f003 021f 	and.w	r2, r3, #31
 8002e28:	4907      	ldr	r1, [pc, #28]	@ (8002e48 <__NVIC_EnableIRQ+0x38>)
 8002e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e2e:	095b      	lsrs	r3, r3, #5
 8002e30:	2001      	movs	r0, #1
 8002e32:	fa00 f202 	lsl.w	r2, r0, r2
 8002e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e3a:	bf00      	nop
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	e000e100 	.word	0xe000e100

08002e4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	4603      	mov	r3, r0
 8002e54:	6039      	str	r1, [r7, #0]
 8002e56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	db0a      	blt.n	8002e76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	b2da      	uxtb	r2, r3
 8002e64:	490c      	ldr	r1, [pc, #48]	@ (8002e98 <__NVIC_SetPriority+0x4c>)
 8002e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e6a:	0112      	lsls	r2, r2, #4
 8002e6c:	b2d2      	uxtb	r2, r2
 8002e6e:	440b      	add	r3, r1
 8002e70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e74:	e00a      	b.n	8002e8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	b2da      	uxtb	r2, r3
 8002e7a:	4908      	ldr	r1, [pc, #32]	@ (8002e9c <__NVIC_SetPriority+0x50>)
 8002e7c:	79fb      	ldrb	r3, [r7, #7]
 8002e7e:	f003 030f 	and.w	r3, r3, #15
 8002e82:	3b04      	subs	r3, #4
 8002e84:	0112      	lsls	r2, r2, #4
 8002e86:	b2d2      	uxtb	r2, r2
 8002e88:	440b      	add	r3, r1
 8002e8a:	761a      	strb	r2, [r3, #24]
}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr
 8002e98:	e000e100 	.word	0xe000e100
 8002e9c:	e000ed00 	.word	0xe000ed00

08002ea0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b089      	sub	sp, #36	@ 0x24
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f003 0307 	and.w	r3, r3, #7
 8002eb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	f1c3 0307 	rsb	r3, r3, #7
 8002eba:	2b04      	cmp	r3, #4
 8002ebc:	bf28      	it	cs
 8002ebe:	2304      	movcs	r3, #4
 8002ec0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	3304      	adds	r3, #4
 8002ec6:	2b06      	cmp	r3, #6
 8002ec8:	d902      	bls.n	8002ed0 <NVIC_EncodePriority+0x30>
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	3b03      	subs	r3, #3
 8002ece:	e000      	b.n	8002ed2 <NVIC_EncodePriority+0x32>
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	fa02 f303 	lsl.w	r3, r2, r3
 8002ede:	43da      	mvns	r2, r3
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	401a      	ands	r2, r3
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ee8:	f04f 31ff 	mov.w	r1, #4294967295
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef2:	43d9      	mvns	r1, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ef8:	4313      	orrs	r3, r2
         );
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3724      	adds	r7, #36	@ 0x24
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
	...

08002f08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	3b01      	subs	r3, #1
 8002f14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f18:	d301      	bcc.n	8002f1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e00f      	b.n	8002f3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f1e:	4a0a      	ldr	r2, [pc, #40]	@ (8002f48 <SysTick_Config+0x40>)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	3b01      	subs	r3, #1
 8002f24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f26:	210f      	movs	r1, #15
 8002f28:	f04f 30ff 	mov.w	r0, #4294967295
 8002f2c:	f7ff ff8e 	bl	8002e4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f30:	4b05      	ldr	r3, [pc, #20]	@ (8002f48 <SysTick_Config+0x40>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f36:	4b04      	ldr	r3, [pc, #16]	@ (8002f48 <SysTick_Config+0x40>)
 8002f38:	2207      	movs	r2, #7
 8002f3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3708      	adds	r7, #8
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	e000e010 	.word	0xe000e010

08002f4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f7ff ff29 	bl	8002dac <__NVIC_SetPriorityGrouping>
}
 8002f5a:	bf00      	nop
 8002f5c:	3708      	adds	r7, #8
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}

08002f62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f62:	b580      	push	{r7, lr}
 8002f64:	b086      	sub	sp, #24
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	4603      	mov	r3, r0
 8002f6a:	60b9      	str	r1, [r7, #8]
 8002f6c:	607a      	str	r2, [r7, #4]
 8002f6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f70:	2300      	movs	r3, #0
 8002f72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f74:	f7ff ff3e 	bl	8002df4 <__NVIC_GetPriorityGrouping>
 8002f78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	68b9      	ldr	r1, [r7, #8]
 8002f7e:	6978      	ldr	r0, [r7, #20]
 8002f80:	f7ff ff8e 	bl	8002ea0 <NVIC_EncodePriority>
 8002f84:	4602      	mov	r2, r0
 8002f86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f8a:	4611      	mov	r1, r2
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7ff ff5d 	bl	8002e4c <__NVIC_SetPriority>
}
 8002f92:	bf00      	nop
 8002f94:	3718      	adds	r7, #24
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b082      	sub	sp, #8
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7ff ff31 	bl	8002e10 <__NVIC_EnableIRQ>
}
 8002fae:	bf00      	nop
 8002fb0:	3708      	adds	r7, #8
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}

08002fb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fb6:	b580      	push	{r7, lr}
 8002fb8:	b082      	sub	sp, #8
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f7ff ffa2 	bl	8002f08 <SysTick_Config>
 8002fc4:	4603      	mov	r3, r0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
	...

08002fd0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002fdc:	f7ff fac4 	bl	8002568 <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d101      	bne.n	8002fec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e099      	b.n	8003120 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2202      	movs	r2, #2
 8002ff0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f022 0201 	bic.w	r2, r2, #1
 800300a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800300c:	e00f      	b.n	800302e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800300e:	f7ff faab 	bl	8002568 <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	2b05      	cmp	r3, #5
 800301a:	d908      	bls.n	800302e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2220      	movs	r2, #32
 8003020:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2203      	movs	r2, #3
 8003026:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e078      	b.n	8003120 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0301 	and.w	r3, r3, #1
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1e8      	bne.n	800300e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003044:	697a      	ldr	r2, [r7, #20]
 8003046:	4b38      	ldr	r3, [pc, #224]	@ (8003128 <HAL_DMA_Init+0x158>)
 8003048:	4013      	ands	r3, r2
 800304a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685a      	ldr	r2, [r3, #4]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800305a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	691b      	ldr	r3, [r3, #16]
 8003060:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003066:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003072:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a1b      	ldr	r3, [r3, #32]
 8003078:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800307a:	697a      	ldr	r2, [r7, #20]
 800307c:	4313      	orrs	r3, r2
 800307e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003084:	2b04      	cmp	r3, #4
 8003086:	d107      	bne.n	8003098 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003090:	4313      	orrs	r3, r2
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	4313      	orrs	r3, r2
 8003096:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	697a      	ldr	r2, [r7, #20]
 800309e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	f023 0307 	bic.w	r3, r3, #7
 80030ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b4:	697a      	ldr	r2, [r7, #20]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030be:	2b04      	cmp	r3, #4
 80030c0:	d117      	bne.n	80030f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030c6:	697a      	ldr	r2, [r7, #20]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d00e      	beq.n	80030f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f000 fb01 	bl	80036dc <DMA_CheckFifoParam>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d008      	beq.n	80030f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2240      	movs	r2, #64	@ 0x40
 80030e4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2201      	movs	r2, #1
 80030ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80030ee:	2301      	movs	r3, #1
 80030f0:	e016      	b.n	8003120 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 fab8 	bl	8003670 <DMA_CalcBaseAndBitshift>
 8003100:	4603      	mov	r3, r0
 8003102:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003108:	223f      	movs	r2, #63	@ 0x3f
 800310a:	409a      	lsls	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	3718      	adds	r7, #24
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	f010803f 	.word	0xf010803f

0800312c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]
 8003138:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800313a:	2300      	movs	r3, #0
 800313c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003142:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800314a:	2b01      	cmp	r3, #1
 800314c:	d101      	bne.n	8003152 <HAL_DMA_Start_IT+0x26>
 800314e:	2302      	movs	r3, #2
 8003150:	e040      	b.n	80031d4 <HAL_DMA_Start_IT+0xa8>
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2201      	movs	r2, #1
 8003156:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b01      	cmp	r3, #1
 8003164:	d12f      	bne.n	80031c6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2202      	movs	r2, #2
 800316a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2200      	movs	r2, #0
 8003172:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	68b9      	ldr	r1, [r7, #8]
 800317a:	68f8      	ldr	r0, [r7, #12]
 800317c:	f000 fa4a 	bl	8003614 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003184:	223f      	movs	r2, #63	@ 0x3f
 8003186:	409a      	lsls	r2, r3
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f042 0216 	orr.w	r2, r2, #22
 800319a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d007      	beq.n	80031b4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f042 0208 	orr.w	r2, r2, #8
 80031b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f042 0201 	orr.w	r2, r2, #1
 80031c2:	601a      	str	r2, [r3, #0]
 80031c4:	e005      	b.n	80031d2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80031ce:	2302      	movs	r3, #2
 80031d0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80031d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3718      	adds	r7, #24
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031e8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80031ea:	f7ff f9bd 	bl	8002568 <HAL_GetTick>
 80031ee:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d008      	beq.n	800320e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2280      	movs	r2, #128	@ 0x80
 8003200:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e052      	b.n	80032b4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f022 0216 	bic.w	r2, r2, #22
 800321c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	695a      	ldr	r2, [r3, #20]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800322c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003232:	2b00      	cmp	r3, #0
 8003234:	d103      	bne.n	800323e <HAL_DMA_Abort+0x62>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800323a:	2b00      	cmp	r3, #0
 800323c:	d007      	beq.n	800324e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f022 0208 	bic.w	r2, r2, #8
 800324c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f022 0201 	bic.w	r2, r2, #1
 800325c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800325e:	e013      	b.n	8003288 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003260:	f7ff f982 	bl	8002568 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b05      	cmp	r3, #5
 800326c:	d90c      	bls.n	8003288 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2220      	movs	r2, #32
 8003272:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2203      	movs	r2, #3
 8003278:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e015      	b.n	80032b4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1e4      	bne.n	8003260 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800329a:	223f      	movs	r2, #63	@ 0x3f
 800329c:	409a      	lsls	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2201      	movs	r2, #1
 80032a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80032b2:	2300      	movs	r3, #0
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3710      	adds	r7, #16
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d004      	beq.n	80032da <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2280      	movs	r2, #128	@ 0x80
 80032d4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e00c      	b.n	80032f4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2205      	movs	r2, #5
 80032de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f022 0201 	bic.w	r2, r2, #1
 80032f0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003308:	2300      	movs	r3, #0
 800330a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800330c:	4b8e      	ldr	r3, [pc, #568]	@ (8003548 <HAL_DMA_IRQHandler+0x248>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a8e      	ldr	r2, [pc, #568]	@ (800354c <HAL_DMA_IRQHandler+0x24c>)
 8003312:	fba2 2303 	umull	r2, r3, r2, r3
 8003316:	0a9b      	lsrs	r3, r3, #10
 8003318:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800331e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800332a:	2208      	movs	r2, #8
 800332c:	409a      	lsls	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	4013      	ands	r3, r2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d01a      	beq.n	800336c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0304 	and.w	r3, r3, #4
 8003340:	2b00      	cmp	r3, #0
 8003342:	d013      	beq.n	800336c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f022 0204 	bic.w	r2, r2, #4
 8003352:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003358:	2208      	movs	r2, #8
 800335a:	409a      	lsls	r2, r3
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003364:	f043 0201 	orr.w	r2, r3, #1
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003370:	2201      	movs	r2, #1
 8003372:	409a      	lsls	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	4013      	ands	r3, r2
 8003378:	2b00      	cmp	r3, #0
 800337a:	d012      	beq.n	80033a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00b      	beq.n	80033a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800338e:	2201      	movs	r2, #1
 8003390:	409a      	lsls	r2, r3
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800339a:	f043 0202 	orr.w	r2, r3, #2
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033a6:	2204      	movs	r2, #4
 80033a8:	409a      	lsls	r2, r3
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	4013      	ands	r3, r2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d012      	beq.n	80033d8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0302 	and.w	r3, r3, #2
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d00b      	beq.n	80033d8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033c4:	2204      	movs	r2, #4
 80033c6:	409a      	lsls	r2, r3
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033d0:	f043 0204 	orr.w	r2, r3, #4
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033dc:	2210      	movs	r2, #16
 80033de:	409a      	lsls	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	4013      	ands	r3, r2
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d043      	beq.n	8003470 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0308 	and.w	r3, r3, #8
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d03c      	beq.n	8003470 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033fa:	2210      	movs	r2, #16
 80033fc:	409a      	lsls	r2, r3
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d018      	beq.n	8003442 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d108      	bne.n	8003430 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003422:	2b00      	cmp	r3, #0
 8003424:	d024      	beq.n	8003470 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	4798      	blx	r3
 800342e:	e01f      	b.n	8003470 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003434:	2b00      	cmp	r3, #0
 8003436:	d01b      	beq.n	8003470 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	4798      	blx	r3
 8003440:	e016      	b.n	8003470 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800344c:	2b00      	cmp	r3, #0
 800344e:	d107      	bne.n	8003460 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f022 0208 	bic.w	r2, r2, #8
 800345e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003464:	2b00      	cmp	r3, #0
 8003466:	d003      	beq.n	8003470 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003474:	2220      	movs	r2, #32
 8003476:	409a      	lsls	r2, r3
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	4013      	ands	r3, r2
 800347c:	2b00      	cmp	r3, #0
 800347e:	f000 808f 	beq.w	80035a0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0310 	and.w	r3, r3, #16
 800348c:	2b00      	cmp	r3, #0
 800348e:	f000 8087 	beq.w	80035a0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003496:	2220      	movs	r2, #32
 8003498:	409a      	lsls	r2, r3
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b05      	cmp	r3, #5
 80034a8:	d136      	bne.n	8003518 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f022 0216 	bic.w	r2, r2, #22
 80034b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	695a      	ldr	r2, [r3, #20]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80034c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d103      	bne.n	80034da <HAL_DMA_IRQHandler+0x1da>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d007      	beq.n	80034ea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f022 0208 	bic.w	r2, r2, #8
 80034e8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034ee:	223f      	movs	r2, #63	@ 0x3f
 80034f0:	409a      	lsls	r2, r3
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2201      	movs	r2, #1
 80034fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800350a:	2b00      	cmp	r3, #0
 800350c:	d07e      	beq.n	800360c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	4798      	blx	r3
        }
        return;
 8003516:	e079      	b.n	800360c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d01d      	beq.n	8003562 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d10d      	bne.n	8003550 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003538:	2b00      	cmp	r3, #0
 800353a:	d031      	beq.n	80035a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	4798      	blx	r3
 8003544:	e02c      	b.n	80035a0 <HAL_DMA_IRQHandler+0x2a0>
 8003546:	bf00      	nop
 8003548:	20000008 	.word	0x20000008
 800354c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003554:	2b00      	cmp	r3, #0
 8003556:	d023      	beq.n	80035a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	4798      	blx	r3
 8003560:	e01e      	b.n	80035a0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800356c:	2b00      	cmp	r3, #0
 800356e:	d10f      	bne.n	8003590 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f022 0210 	bic.w	r2, r2, #16
 800357e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003594:	2b00      	cmp	r3, #0
 8003596:	d003      	beq.n	80035a0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d032      	beq.n	800360e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035ac:	f003 0301 	and.w	r3, r3, #1
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d022      	beq.n	80035fa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2205      	movs	r2, #5
 80035b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f022 0201 	bic.w	r2, r2, #1
 80035ca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	3301      	adds	r3, #1
 80035d0:	60bb      	str	r3, [r7, #8]
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d307      	bcc.n	80035e8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1f2      	bne.n	80035cc <HAL_DMA_IRQHandler+0x2cc>
 80035e6:	e000      	b.n	80035ea <HAL_DMA_IRQHandler+0x2ea>
          break;
 80035e8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d005      	beq.n	800360e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	4798      	blx	r3
 800360a:	e000      	b.n	800360e <HAL_DMA_IRQHandler+0x30e>
        return;
 800360c:	bf00      	nop
    }
  }
}
 800360e:	3718      	adds	r7, #24
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003614:	b480      	push	{r7}
 8003616:	b085      	sub	sp, #20
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	607a      	str	r2, [r7, #4]
 8003620:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003630:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	683a      	ldr	r2, [r7, #0]
 8003638:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	2b40      	cmp	r3, #64	@ 0x40
 8003640:	d108      	bne.n	8003654 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68ba      	ldr	r2, [r7, #8]
 8003650:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003652:	e007      	b.n	8003664 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68ba      	ldr	r2, [r7, #8]
 800365a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	60da      	str	r2, [r3, #12]
}
 8003664:	bf00      	nop
 8003666:	3714      	adds	r7, #20
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003670:	b480      	push	{r7}
 8003672:	b085      	sub	sp, #20
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	b2db      	uxtb	r3, r3
 800367e:	3b10      	subs	r3, #16
 8003680:	4a14      	ldr	r2, [pc, #80]	@ (80036d4 <DMA_CalcBaseAndBitshift+0x64>)
 8003682:	fba2 2303 	umull	r2, r3, r2, r3
 8003686:	091b      	lsrs	r3, r3, #4
 8003688:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800368a:	4a13      	ldr	r2, [pc, #76]	@ (80036d8 <DMA_CalcBaseAndBitshift+0x68>)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	4413      	add	r3, r2
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	461a      	mov	r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2b03      	cmp	r3, #3
 800369c:	d909      	bls.n	80036b2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80036a6:	f023 0303 	bic.w	r3, r3, #3
 80036aa:	1d1a      	adds	r2, r3, #4
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	659a      	str	r2, [r3, #88]	@ 0x58
 80036b0:	e007      	b.n	80036c2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80036ba:	f023 0303 	bic.w	r3, r3, #3
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3714      	adds	r7, #20
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	aaaaaaab 	.word	0xaaaaaaab
 80036d8:	0800ccd4 	.word	0x0800ccd4

080036dc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80036dc:	b480      	push	{r7}
 80036de:	b085      	sub	sp, #20
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036e4:	2300      	movs	r3, #0
 80036e6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d11f      	bne.n	8003736 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	2b03      	cmp	r3, #3
 80036fa:	d856      	bhi.n	80037aa <DMA_CheckFifoParam+0xce>
 80036fc:	a201      	add	r2, pc, #4	@ (adr r2, 8003704 <DMA_CheckFifoParam+0x28>)
 80036fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003702:	bf00      	nop
 8003704:	08003715 	.word	0x08003715
 8003708:	08003727 	.word	0x08003727
 800370c:	08003715 	.word	0x08003715
 8003710:	080037ab 	.word	0x080037ab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003718:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d046      	beq.n	80037ae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003724:	e043      	b.n	80037ae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800372a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800372e:	d140      	bne.n	80037b2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003734:	e03d      	b.n	80037b2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800373e:	d121      	bne.n	8003784 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	2b03      	cmp	r3, #3
 8003744:	d837      	bhi.n	80037b6 <DMA_CheckFifoParam+0xda>
 8003746:	a201      	add	r2, pc, #4	@ (adr r2, 800374c <DMA_CheckFifoParam+0x70>)
 8003748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800374c:	0800375d 	.word	0x0800375d
 8003750:	08003763 	.word	0x08003763
 8003754:	0800375d 	.word	0x0800375d
 8003758:	08003775 	.word	0x08003775
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	73fb      	strb	r3, [r7, #15]
      break;
 8003760:	e030      	b.n	80037c4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003766:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d025      	beq.n	80037ba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003772:	e022      	b.n	80037ba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003778:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800377c:	d11f      	bne.n	80037be <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003782:	e01c      	b.n	80037be <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	2b02      	cmp	r3, #2
 8003788:	d903      	bls.n	8003792 <DMA_CheckFifoParam+0xb6>
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	2b03      	cmp	r3, #3
 800378e:	d003      	beq.n	8003798 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003790:	e018      	b.n	80037c4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	73fb      	strb	r3, [r7, #15]
      break;
 8003796:	e015      	b.n	80037c4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800379c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d00e      	beq.n	80037c2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	73fb      	strb	r3, [r7, #15]
      break;
 80037a8:	e00b      	b.n	80037c2 <DMA_CheckFifoParam+0xe6>
      break;
 80037aa:	bf00      	nop
 80037ac:	e00a      	b.n	80037c4 <DMA_CheckFifoParam+0xe8>
      break;
 80037ae:	bf00      	nop
 80037b0:	e008      	b.n	80037c4 <DMA_CheckFifoParam+0xe8>
      break;
 80037b2:	bf00      	nop
 80037b4:	e006      	b.n	80037c4 <DMA_CheckFifoParam+0xe8>
      break;
 80037b6:	bf00      	nop
 80037b8:	e004      	b.n	80037c4 <DMA_CheckFifoParam+0xe8>
      break;
 80037ba:	bf00      	nop
 80037bc:	e002      	b.n	80037c4 <DMA_CheckFifoParam+0xe8>
      break;   
 80037be:	bf00      	nop
 80037c0:	e000      	b.n	80037c4 <DMA_CheckFifoParam+0xe8>
      break;
 80037c2:	bf00      	nop
    }
  } 
  
  return status; 
 80037c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3714      	adds	r7, #20
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop

080037d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b089      	sub	sp, #36	@ 0x24
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037de:	2300      	movs	r3, #0
 80037e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037e2:	2300      	movs	r3, #0
 80037e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80037e6:	2300      	movs	r3, #0
 80037e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037ea:	2300      	movs	r3, #0
 80037ec:	61fb      	str	r3, [r7, #28]
 80037ee:	e159      	b.n	8003aa4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80037f0:	2201      	movs	r2, #1
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	fa02 f303 	lsl.w	r3, r2, r3
 80037f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	4013      	ands	r3, r2
 8003802:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003804:	693a      	ldr	r2, [r7, #16]
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	429a      	cmp	r2, r3
 800380a:	f040 8148 	bne.w	8003a9e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f003 0303 	and.w	r3, r3, #3
 8003816:	2b01      	cmp	r3, #1
 8003818:	d005      	beq.n	8003826 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003822:	2b02      	cmp	r3, #2
 8003824:	d130      	bne.n	8003888 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	005b      	lsls	r3, r3, #1
 8003830:	2203      	movs	r2, #3
 8003832:	fa02 f303 	lsl.w	r3, r2, r3
 8003836:	43db      	mvns	r3, r3
 8003838:	69ba      	ldr	r2, [r7, #24]
 800383a:	4013      	ands	r3, r2
 800383c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	68da      	ldr	r2, [r3, #12]
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	fa02 f303 	lsl.w	r3, r2, r3
 800384a:	69ba      	ldr	r2, [r7, #24]
 800384c:	4313      	orrs	r3, r2
 800384e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	69ba      	ldr	r2, [r7, #24]
 8003854:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800385c:	2201      	movs	r2, #1
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	fa02 f303 	lsl.w	r3, r2, r3
 8003864:	43db      	mvns	r3, r3
 8003866:	69ba      	ldr	r2, [r7, #24]
 8003868:	4013      	ands	r3, r2
 800386a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	091b      	lsrs	r3, r3, #4
 8003872:	f003 0201 	and.w	r2, r3, #1
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	fa02 f303 	lsl.w	r3, r2, r3
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	4313      	orrs	r3, r2
 8003880:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	69ba      	ldr	r2, [r7, #24]
 8003886:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f003 0303 	and.w	r3, r3, #3
 8003890:	2b03      	cmp	r3, #3
 8003892:	d017      	beq.n	80038c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	2203      	movs	r2, #3
 80038a0:	fa02 f303 	lsl.w	r3, r2, r3
 80038a4:	43db      	mvns	r3, r3
 80038a6:	69ba      	ldr	r2, [r7, #24]
 80038a8:	4013      	ands	r3, r2
 80038aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	689a      	ldr	r2, [r3, #8]
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	005b      	lsls	r3, r3, #1
 80038b4:	fa02 f303 	lsl.w	r3, r2, r3
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	69ba      	ldr	r2, [r7, #24]
 80038c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f003 0303 	and.w	r3, r3, #3
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d123      	bne.n	8003918 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	08da      	lsrs	r2, r3, #3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	3208      	adds	r2, #8
 80038d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	f003 0307 	and.w	r3, r3, #7
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	220f      	movs	r2, #15
 80038e8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ec:	43db      	mvns	r3, r3
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	4013      	ands	r3, r2
 80038f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	691a      	ldr	r2, [r3, #16]
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	f003 0307 	and.w	r3, r3, #7
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	fa02 f303 	lsl.w	r3, r2, r3
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	4313      	orrs	r3, r2
 8003908:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	08da      	lsrs	r2, r3, #3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	3208      	adds	r2, #8
 8003912:	69b9      	ldr	r1, [r7, #24]
 8003914:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	005b      	lsls	r3, r3, #1
 8003922:	2203      	movs	r2, #3
 8003924:	fa02 f303 	lsl.w	r3, r2, r3
 8003928:	43db      	mvns	r3, r3
 800392a:	69ba      	ldr	r2, [r7, #24]
 800392c:	4013      	ands	r3, r2
 800392e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f003 0203 	and.w	r2, r3, #3
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	005b      	lsls	r3, r3, #1
 800393c:	fa02 f303 	lsl.w	r3, r2, r3
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	4313      	orrs	r3, r2
 8003944:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	69ba      	ldr	r2, [r7, #24]
 800394a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003954:	2b00      	cmp	r3, #0
 8003956:	f000 80a2 	beq.w	8003a9e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800395a:	2300      	movs	r3, #0
 800395c:	60fb      	str	r3, [r7, #12]
 800395e:	4b57      	ldr	r3, [pc, #348]	@ (8003abc <HAL_GPIO_Init+0x2e8>)
 8003960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003962:	4a56      	ldr	r2, [pc, #344]	@ (8003abc <HAL_GPIO_Init+0x2e8>)
 8003964:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003968:	6453      	str	r3, [r2, #68]	@ 0x44
 800396a:	4b54      	ldr	r3, [pc, #336]	@ (8003abc <HAL_GPIO_Init+0x2e8>)
 800396c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800396e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003972:	60fb      	str	r3, [r7, #12]
 8003974:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003976:	4a52      	ldr	r2, [pc, #328]	@ (8003ac0 <HAL_GPIO_Init+0x2ec>)
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	089b      	lsrs	r3, r3, #2
 800397c:	3302      	adds	r3, #2
 800397e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003982:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	f003 0303 	and.w	r3, r3, #3
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	220f      	movs	r2, #15
 800398e:	fa02 f303 	lsl.w	r3, r2, r3
 8003992:	43db      	mvns	r3, r3
 8003994:	69ba      	ldr	r2, [r7, #24]
 8003996:	4013      	ands	r3, r2
 8003998:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a49      	ldr	r2, [pc, #292]	@ (8003ac4 <HAL_GPIO_Init+0x2f0>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d019      	beq.n	80039d6 <HAL_GPIO_Init+0x202>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a48      	ldr	r2, [pc, #288]	@ (8003ac8 <HAL_GPIO_Init+0x2f4>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d013      	beq.n	80039d2 <HAL_GPIO_Init+0x1fe>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a47      	ldr	r2, [pc, #284]	@ (8003acc <HAL_GPIO_Init+0x2f8>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d00d      	beq.n	80039ce <HAL_GPIO_Init+0x1fa>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a46      	ldr	r2, [pc, #280]	@ (8003ad0 <HAL_GPIO_Init+0x2fc>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d007      	beq.n	80039ca <HAL_GPIO_Init+0x1f6>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a45      	ldr	r2, [pc, #276]	@ (8003ad4 <HAL_GPIO_Init+0x300>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d101      	bne.n	80039c6 <HAL_GPIO_Init+0x1f2>
 80039c2:	2304      	movs	r3, #4
 80039c4:	e008      	b.n	80039d8 <HAL_GPIO_Init+0x204>
 80039c6:	2307      	movs	r3, #7
 80039c8:	e006      	b.n	80039d8 <HAL_GPIO_Init+0x204>
 80039ca:	2303      	movs	r3, #3
 80039cc:	e004      	b.n	80039d8 <HAL_GPIO_Init+0x204>
 80039ce:	2302      	movs	r3, #2
 80039d0:	e002      	b.n	80039d8 <HAL_GPIO_Init+0x204>
 80039d2:	2301      	movs	r3, #1
 80039d4:	e000      	b.n	80039d8 <HAL_GPIO_Init+0x204>
 80039d6:	2300      	movs	r3, #0
 80039d8:	69fa      	ldr	r2, [r7, #28]
 80039da:	f002 0203 	and.w	r2, r2, #3
 80039de:	0092      	lsls	r2, r2, #2
 80039e0:	4093      	lsls	r3, r2
 80039e2:	69ba      	ldr	r2, [r7, #24]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039e8:	4935      	ldr	r1, [pc, #212]	@ (8003ac0 <HAL_GPIO_Init+0x2ec>)
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	089b      	lsrs	r3, r3, #2
 80039ee:	3302      	adds	r3, #2
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039f6:	4b38      	ldr	r3, [pc, #224]	@ (8003ad8 <HAL_GPIO_Init+0x304>)
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	43db      	mvns	r3, r3
 8003a00:	69ba      	ldr	r2, [r7, #24]
 8003a02:	4013      	ands	r3, r2
 8003a04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d003      	beq.n	8003a1a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003a12:	69ba      	ldr	r2, [r7, #24]
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a1a:	4a2f      	ldr	r2, [pc, #188]	@ (8003ad8 <HAL_GPIO_Init+0x304>)
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a20:	4b2d      	ldr	r3, [pc, #180]	@ (8003ad8 <HAL_GPIO_Init+0x304>)
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	43db      	mvns	r3, r3
 8003a2a:	69ba      	ldr	r2, [r7, #24]
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d003      	beq.n	8003a44 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a44:	4a24      	ldr	r2, [pc, #144]	@ (8003ad8 <HAL_GPIO_Init+0x304>)
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a4a:	4b23      	ldr	r3, [pc, #140]	@ (8003ad8 <HAL_GPIO_Init+0x304>)
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	43db      	mvns	r3, r3
 8003a54:	69ba      	ldr	r2, [r7, #24]
 8003a56:	4013      	ands	r3, r2
 8003a58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d003      	beq.n	8003a6e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003a66:	69ba      	ldr	r2, [r7, #24]
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a6e:	4a1a      	ldr	r2, [pc, #104]	@ (8003ad8 <HAL_GPIO_Init+0x304>)
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a74:	4b18      	ldr	r3, [pc, #96]	@ (8003ad8 <HAL_GPIO_Init+0x304>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	43db      	mvns	r3, r3
 8003a7e:	69ba      	ldr	r2, [r7, #24]
 8003a80:	4013      	ands	r3, r2
 8003a82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d003      	beq.n	8003a98 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003a90:	69ba      	ldr	r2, [r7, #24]
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a98:	4a0f      	ldr	r2, [pc, #60]	@ (8003ad8 <HAL_GPIO_Init+0x304>)
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	61fb      	str	r3, [r7, #28]
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	2b0f      	cmp	r3, #15
 8003aa8:	f67f aea2 	bls.w	80037f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003aac:	bf00      	nop
 8003aae:	bf00      	nop
 8003ab0:	3724      	adds	r7, #36	@ 0x24
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	40023800 	.word	0x40023800
 8003ac0:	40013800 	.word	0x40013800
 8003ac4:	40020000 	.word	0x40020000
 8003ac8:	40020400 	.word	0x40020400
 8003acc:	40020800 	.word	0x40020800
 8003ad0:	40020c00 	.word	0x40020c00
 8003ad4:	40021000 	.word	0x40021000
 8003ad8:	40013c00 	.word	0x40013c00

08003adc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b087      	sub	sp, #28
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003aea:	2300      	movs	r3, #0
 8003aec:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003aee:	2300      	movs	r3, #0
 8003af0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003af2:	2300      	movs	r3, #0
 8003af4:	617b      	str	r3, [r7, #20]
 8003af6:	e0bb      	b.n	8003c70 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003af8:	2201      	movs	r2, #1
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	fa02 f303 	lsl.w	r3, r2, r3
 8003b00:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003b02:	683a      	ldr	r2, [r7, #0]
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	4013      	ands	r3, r2
 8003b08:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	f040 80ab 	bne.w	8003c6a <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003b14:	4a5c      	ldr	r2, [pc, #368]	@ (8003c88 <HAL_GPIO_DeInit+0x1ac>)
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	089b      	lsrs	r3, r3, #2
 8003b1a:	3302      	adds	r3, #2
 8003b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b20:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	f003 0303 	and.w	r3, r3, #3
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	220f      	movs	r2, #15
 8003b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b30:	68ba      	ldr	r2, [r7, #8]
 8003b32:	4013      	ands	r3, r2
 8003b34:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a54      	ldr	r2, [pc, #336]	@ (8003c8c <HAL_GPIO_DeInit+0x1b0>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d019      	beq.n	8003b72 <HAL_GPIO_DeInit+0x96>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a53      	ldr	r2, [pc, #332]	@ (8003c90 <HAL_GPIO_DeInit+0x1b4>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d013      	beq.n	8003b6e <HAL_GPIO_DeInit+0x92>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a52      	ldr	r2, [pc, #328]	@ (8003c94 <HAL_GPIO_DeInit+0x1b8>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d00d      	beq.n	8003b6a <HAL_GPIO_DeInit+0x8e>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a51      	ldr	r2, [pc, #324]	@ (8003c98 <HAL_GPIO_DeInit+0x1bc>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d007      	beq.n	8003b66 <HAL_GPIO_DeInit+0x8a>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a50      	ldr	r2, [pc, #320]	@ (8003c9c <HAL_GPIO_DeInit+0x1c0>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d101      	bne.n	8003b62 <HAL_GPIO_DeInit+0x86>
 8003b5e:	2304      	movs	r3, #4
 8003b60:	e008      	b.n	8003b74 <HAL_GPIO_DeInit+0x98>
 8003b62:	2307      	movs	r3, #7
 8003b64:	e006      	b.n	8003b74 <HAL_GPIO_DeInit+0x98>
 8003b66:	2303      	movs	r3, #3
 8003b68:	e004      	b.n	8003b74 <HAL_GPIO_DeInit+0x98>
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	e002      	b.n	8003b74 <HAL_GPIO_DeInit+0x98>
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e000      	b.n	8003b74 <HAL_GPIO_DeInit+0x98>
 8003b72:	2300      	movs	r3, #0
 8003b74:	697a      	ldr	r2, [r7, #20]
 8003b76:	f002 0203 	and.w	r2, r2, #3
 8003b7a:	0092      	lsls	r2, r2, #2
 8003b7c:	4093      	lsls	r3, r2
 8003b7e:	68ba      	ldr	r2, [r7, #8]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d132      	bne.n	8003bea <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003b84:	4b46      	ldr	r3, [pc, #280]	@ (8003ca0 <HAL_GPIO_DeInit+0x1c4>)
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	43db      	mvns	r3, r3
 8003b8c:	4944      	ldr	r1, [pc, #272]	@ (8003ca0 <HAL_GPIO_DeInit+0x1c4>)
 8003b8e:	4013      	ands	r3, r2
 8003b90:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003b92:	4b43      	ldr	r3, [pc, #268]	@ (8003ca0 <HAL_GPIO_DeInit+0x1c4>)
 8003b94:	685a      	ldr	r2, [r3, #4]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	43db      	mvns	r3, r3
 8003b9a:	4941      	ldr	r1, [pc, #260]	@ (8003ca0 <HAL_GPIO_DeInit+0x1c4>)
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003ba0:	4b3f      	ldr	r3, [pc, #252]	@ (8003ca0 <HAL_GPIO_DeInit+0x1c4>)
 8003ba2:	68da      	ldr	r2, [r3, #12]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	43db      	mvns	r3, r3
 8003ba8:	493d      	ldr	r1, [pc, #244]	@ (8003ca0 <HAL_GPIO_DeInit+0x1c4>)
 8003baa:	4013      	ands	r3, r2
 8003bac:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003bae:	4b3c      	ldr	r3, [pc, #240]	@ (8003ca0 <HAL_GPIO_DeInit+0x1c4>)
 8003bb0:	689a      	ldr	r2, [r3, #8]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	43db      	mvns	r3, r3
 8003bb6:	493a      	ldr	r1, [pc, #232]	@ (8003ca0 <HAL_GPIO_DeInit+0x1c4>)
 8003bb8:	4013      	ands	r3, r2
 8003bba:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	f003 0303 	and.w	r3, r3, #3
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	220f      	movs	r2, #15
 8003bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bca:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003bcc:	4a2e      	ldr	r2, [pc, #184]	@ (8003c88 <HAL_GPIO_DeInit+0x1ac>)
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	089b      	lsrs	r3, r3, #2
 8003bd2:	3302      	adds	r3, #2
 8003bd4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	43da      	mvns	r2, r3
 8003bdc:	482a      	ldr	r0, [pc, #168]	@ (8003c88 <HAL_GPIO_DeInit+0x1ac>)
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	089b      	lsrs	r3, r3, #2
 8003be2:	400a      	ands	r2, r1
 8003be4:	3302      	adds	r3, #2
 8003be6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	005b      	lsls	r3, r3, #1
 8003bf2:	2103      	movs	r1, #3
 8003bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8003bf8:	43db      	mvns	r3, r3
 8003bfa:	401a      	ands	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	08da      	lsrs	r2, r3, #3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	3208      	adds	r2, #8
 8003c08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	f003 0307 	and.w	r3, r3, #7
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	220f      	movs	r2, #15
 8003c16:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1a:	43db      	mvns	r3, r3
 8003c1c:	697a      	ldr	r2, [r7, #20]
 8003c1e:	08d2      	lsrs	r2, r2, #3
 8003c20:	4019      	ands	r1, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	3208      	adds	r2, #8
 8003c26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	68da      	ldr	r2, [r3, #12]
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	005b      	lsls	r3, r3, #1
 8003c32:	2103      	movs	r1, #3
 8003c34:	fa01 f303 	lsl.w	r3, r1, r3
 8003c38:	43db      	mvns	r3, r3
 8003c3a:	401a      	ands	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	685a      	ldr	r2, [r3, #4]
 8003c44:	2101      	movs	r1, #1
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	fa01 f303 	lsl.w	r3, r1, r3
 8003c4c:	43db      	mvns	r3, r3
 8003c4e:	401a      	ands	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689a      	ldr	r2, [r3, #8]
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	005b      	lsls	r3, r3, #1
 8003c5c:	2103      	movs	r1, #3
 8003c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c62:	43db      	mvns	r3, r3
 8003c64:	401a      	ands	r2, r3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	617b      	str	r3, [r7, #20]
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	2b0f      	cmp	r3, #15
 8003c74:	f67f af40 	bls.w	8003af8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003c78:	bf00      	nop
 8003c7a:	bf00      	nop
 8003c7c:	371c      	adds	r7, #28
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	40013800 	.word	0x40013800
 8003c8c:	40020000 	.word	0x40020000
 8003c90:	40020400 	.word	0x40020400
 8003c94:	40020800 	.word	0x40020800
 8003c98:	40020c00 	.word	0x40020c00
 8003c9c:	40021000 	.word	0x40021000
 8003ca0:	40013c00 	.word	0x40013c00

08003ca4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b085      	sub	sp, #20
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	460b      	mov	r3, r1
 8003cae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	691a      	ldr	r2, [r3, #16]
 8003cb4:	887b      	ldrh	r3, [r7, #2]
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d002      	beq.n	8003cc2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	73fb      	strb	r3, [r7, #15]
 8003cc0:	e001      	b.n	8003cc6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3714      	adds	r7, #20
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	460b      	mov	r3, r1
 8003cde:	807b      	strh	r3, [r7, #2]
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ce4:	787b      	ldrb	r3, [r7, #1]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d003      	beq.n	8003cf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003cea:	887a      	ldrh	r2, [r7, #2]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003cf0:	e003      	b.n	8003cfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003cf2:	887b      	ldrh	r3, [r7, #2]
 8003cf4:	041a      	lsls	r2, r3, #16
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	619a      	str	r2, [r3, #24]
}
 8003cfa:	bf00      	nop
 8003cfc:	370c      	adds	r7, #12
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
	...

08003d08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b086      	sub	sp, #24
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d101      	bne.n	8003d1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e267      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0301 	and.w	r3, r3, #1
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d075      	beq.n	8003e12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d26:	4b88      	ldr	r3, [pc, #544]	@ (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f003 030c 	and.w	r3, r3, #12
 8003d2e:	2b04      	cmp	r3, #4
 8003d30:	d00c      	beq.n	8003d4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d32:	4b85      	ldr	r3, [pc, #532]	@ (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d3a:	2b08      	cmp	r3, #8
 8003d3c:	d112      	bne.n	8003d64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d3e:	4b82      	ldr	r3, [pc, #520]	@ (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d46:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d4a:	d10b      	bne.n	8003d64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d4c:	4b7e      	ldr	r3, [pc, #504]	@ (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d05b      	beq.n	8003e10 <HAL_RCC_OscConfig+0x108>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d157      	bne.n	8003e10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e242      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d6c:	d106      	bne.n	8003d7c <HAL_RCC_OscConfig+0x74>
 8003d6e:	4b76      	ldr	r3, [pc, #472]	@ (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a75      	ldr	r2, [pc, #468]	@ (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003d74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d78:	6013      	str	r3, [r2, #0]
 8003d7a:	e01d      	b.n	8003db8 <HAL_RCC_OscConfig+0xb0>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d84:	d10c      	bne.n	8003da0 <HAL_RCC_OscConfig+0x98>
 8003d86:	4b70      	ldr	r3, [pc, #448]	@ (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a6f      	ldr	r2, [pc, #444]	@ (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003d8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d90:	6013      	str	r3, [r2, #0]
 8003d92:	4b6d      	ldr	r3, [pc, #436]	@ (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a6c      	ldr	r2, [pc, #432]	@ (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003d98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d9c:	6013      	str	r3, [r2, #0]
 8003d9e:	e00b      	b.n	8003db8 <HAL_RCC_OscConfig+0xb0>
 8003da0:	4b69      	ldr	r3, [pc, #420]	@ (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a68      	ldr	r2, [pc, #416]	@ (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003da6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003daa:	6013      	str	r3, [r2, #0]
 8003dac:	4b66      	ldr	r3, [pc, #408]	@ (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a65      	ldr	r2, [pc, #404]	@ (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003db2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003db6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d013      	beq.n	8003de8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc0:	f7fe fbd2 	bl	8002568 <HAL_GetTick>
 8003dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dc6:	e008      	b.n	8003dda <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dc8:	f7fe fbce 	bl	8002568 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b64      	cmp	r3, #100	@ 0x64
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e207      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dda:	4b5b      	ldr	r3, [pc, #364]	@ (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d0f0      	beq.n	8003dc8 <HAL_RCC_OscConfig+0xc0>
 8003de6:	e014      	b.n	8003e12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de8:	f7fe fbbe 	bl	8002568 <HAL_GetTick>
 8003dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dee:	e008      	b.n	8003e02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003df0:	f7fe fbba 	bl	8002568 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	2b64      	cmp	r3, #100	@ 0x64
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e1f3      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e02:	4b51      	ldr	r3, [pc, #324]	@ (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1f0      	bne.n	8003df0 <HAL_RCC_OscConfig+0xe8>
 8003e0e:	e000      	b.n	8003e12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d063      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e1e:	4b4a      	ldr	r3, [pc, #296]	@ (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f003 030c 	and.w	r3, r3, #12
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00b      	beq.n	8003e42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e2a:	4b47      	ldr	r3, [pc, #284]	@ (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e32:	2b08      	cmp	r3, #8
 8003e34:	d11c      	bne.n	8003e70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e36:	4b44      	ldr	r3, [pc, #272]	@ (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d116      	bne.n	8003e70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e42:	4b41      	ldr	r3, [pc, #260]	@ (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d005      	beq.n	8003e5a <HAL_RCC_OscConfig+0x152>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d001      	beq.n	8003e5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e1c7      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e5a:	4b3b      	ldr	r3, [pc, #236]	@ (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	00db      	lsls	r3, r3, #3
 8003e68:	4937      	ldr	r1, [pc, #220]	@ (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e6e:	e03a      	b.n	8003ee6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d020      	beq.n	8003eba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e78:	4b34      	ldr	r3, [pc, #208]	@ (8003f4c <HAL_RCC_OscConfig+0x244>)
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e7e:	f7fe fb73 	bl	8002568 <HAL_GetTick>
 8003e82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e84:	e008      	b.n	8003e98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e86:	f7fe fb6f 	bl	8002568 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d901      	bls.n	8003e98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e1a8      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e98:	4b2b      	ldr	r3, [pc, #172]	@ (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0302 	and.w	r3, r3, #2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d0f0      	beq.n	8003e86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ea4:	4b28      	ldr	r3, [pc, #160]	@ (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	691b      	ldr	r3, [r3, #16]
 8003eb0:	00db      	lsls	r3, r3, #3
 8003eb2:	4925      	ldr	r1, [pc, #148]	@ (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	600b      	str	r3, [r1, #0]
 8003eb8:	e015      	b.n	8003ee6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003eba:	4b24      	ldr	r3, [pc, #144]	@ (8003f4c <HAL_RCC_OscConfig+0x244>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec0:	f7fe fb52 	bl	8002568 <HAL_GetTick>
 8003ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ec6:	e008      	b.n	8003eda <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ec8:	f7fe fb4e 	bl	8002568 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e187      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eda:	4b1b      	ldr	r3, [pc, #108]	@ (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1f0      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0308 	and.w	r3, r3, #8
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d036      	beq.n	8003f60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d016      	beq.n	8003f28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003efa:	4b15      	ldr	r3, [pc, #84]	@ (8003f50 <HAL_RCC_OscConfig+0x248>)
 8003efc:	2201      	movs	r2, #1
 8003efe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f00:	f7fe fb32 	bl	8002568 <HAL_GetTick>
 8003f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f06:	e008      	b.n	8003f1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f08:	f7fe fb2e 	bl	8002568 <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e167      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f1a:	4b0b      	ldr	r3, [pc, #44]	@ (8003f48 <HAL_RCC_OscConfig+0x240>)
 8003f1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d0f0      	beq.n	8003f08 <HAL_RCC_OscConfig+0x200>
 8003f26:	e01b      	b.n	8003f60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f28:	4b09      	ldr	r3, [pc, #36]	@ (8003f50 <HAL_RCC_OscConfig+0x248>)
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f2e:	f7fe fb1b 	bl	8002568 <HAL_GetTick>
 8003f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f34:	e00e      	b.n	8003f54 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f36:	f7fe fb17 	bl	8002568 <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d907      	bls.n	8003f54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e150      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
 8003f48:	40023800 	.word	0x40023800
 8003f4c:	42470000 	.word	0x42470000
 8003f50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f54:	4b88      	ldr	r3, [pc, #544]	@ (8004178 <HAL_RCC_OscConfig+0x470>)
 8003f56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f58:	f003 0302 	and.w	r3, r3, #2
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d1ea      	bne.n	8003f36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0304 	and.w	r3, r3, #4
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	f000 8097 	beq.w	800409c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f72:	4b81      	ldr	r3, [pc, #516]	@ (8004178 <HAL_RCC_OscConfig+0x470>)
 8003f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d10f      	bne.n	8003f9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f7e:	2300      	movs	r3, #0
 8003f80:	60bb      	str	r3, [r7, #8]
 8003f82:	4b7d      	ldr	r3, [pc, #500]	@ (8004178 <HAL_RCC_OscConfig+0x470>)
 8003f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f86:	4a7c      	ldr	r2, [pc, #496]	@ (8004178 <HAL_RCC_OscConfig+0x470>)
 8003f88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f8e:	4b7a      	ldr	r3, [pc, #488]	@ (8004178 <HAL_RCC_OscConfig+0x470>)
 8003f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f96:	60bb      	str	r3, [r7, #8]
 8003f98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f9e:	4b77      	ldr	r3, [pc, #476]	@ (800417c <HAL_RCC_OscConfig+0x474>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d118      	bne.n	8003fdc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003faa:	4b74      	ldr	r3, [pc, #464]	@ (800417c <HAL_RCC_OscConfig+0x474>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a73      	ldr	r2, [pc, #460]	@ (800417c <HAL_RCC_OscConfig+0x474>)
 8003fb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fb6:	f7fe fad7 	bl	8002568 <HAL_GetTick>
 8003fba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fbc:	e008      	b.n	8003fd0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fbe:	f7fe fad3 	bl	8002568 <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d901      	bls.n	8003fd0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e10c      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fd0:	4b6a      	ldr	r3, [pc, #424]	@ (800417c <HAL_RCC_OscConfig+0x474>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d0f0      	beq.n	8003fbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d106      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x2ea>
 8003fe4:	4b64      	ldr	r3, [pc, #400]	@ (8004178 <HAL_RCC_OscConfig+0x470>)
 8003fe6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fe8:	4a63      	ldr	r2, [pc, #396]	@ (8004178 <HAL_RCC_OscConfig+0x470>)
 8003fea:	f043 0301 	orr.w	r3, r3, #1
 8003fee:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ff0:	e01c      	b.n	800402c <HAL_RCC_OscConfig+0x324>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	2b05      	cmp	r3, #5
 8003ff8:	d10c      	bne.n	8004014 <HAL_RCC_OscConfig+0x30c>
 8003ffa:	4b5f      	ldr	r3, [pc, #380]	@ (8004178 <HAL_RCC_OscConfig+0x470>)
 8003ffc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ffe:	4a5e      	ldr	r2, [pc, #376]	@ (8004178 <HAL_RCC_OscConfig+0x470>)
 8004000:	f043 0304 	orr.w	r3, r3, #4
 8004004:	6713      	str	r3, [r2, #112]	@ 0x70
 8004006:	4b5c      	ldr	r3, [pc, #368]	@ (8004178 <HAL_RCC_OscConfig+0x470>)
 8004008:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800400a:	4a5b      	ldr	r2, [pc, #364]	@ (8004178 <HAL_RCC_OscConfig+0x470>)
 800400c:	f043 0301 	orr.w	r3, r3, #1
 8004010:	6713      	str	r3, [r2, #112]	@ 0x70
 8004012:	e00b      	b.n	800402c <HAL_RCC_OscConfig+0x324>
 8004014:	4b58      	ldr	r3, [pc, #352]	@ (8004178 <HAL_RCC_OscConfig+0x470>)
 8004016:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004018:	4a57      	ldr	r2, [pc, #348]	@ (8004178 <HAL_RCC_OscConfig+0x470>)
 800401a:	f023 0301 	bic.w	r3, r3, #1
 800401e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004020:	4b55      	ldr	r3, [pc, #340]	@ (8004178 <HAL_RCC_OscConfig+0x470>)
 8004022:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004024:	4a54      	ldr	r2, [pc, #336]	@ (8004178 <HAL_RCC_OscConfig+0x470>)
 8004026:	f023 0304 	bic.w	r3, r3, #4
 800402a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d015      	beq.n	8004060 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004034:	f7fe fa98 	bl	8002568 <HAL_GetTick>
 8004038:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800403a:	e00a      	b.n	8004052 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800403c:	f7fe fa94 	bl	8002568 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	f241 3288 	movw	r2, #5000	@ 0x1388
 800404a:	4293      	cmp	r3, r2
 800404c:	d901      	bls.n	8004052 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e0cb      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004052:	4b49      	ldr	r3, [pc, #292]	@ (8004178 <HAL_RCC_OscConfig+0x470>)
 8004054:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004056:	f003 0302 	and.w	r3, r3, #2
 800405a:	2b00      	cmp	r3, #0
 800405c:	d0ee      	beq.n	800403c <HAL_RCC_OscConfig+0x334>
 800405e:	e014      	b.n	800408a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004060:	f7fe fa82 	bl	8002568 <HAL_GetTick>
 8004064:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004066:	e00a      	b.n	800407e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004068:	f7fe fa7e 	bl	8002568 <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004076:	4293      	cmp	r3, r2
 8004078:	d901      	bls.n	800407e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e0b5      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800407e:	4b3e      	ldr	r3, [pc, #248]	@ (8004178 <HAL_RCC_OscConfig+0x470>)
 8004080:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004082:	f003 0302 	and.w	r3, r3, #2
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1ee      	bne.n	8004068 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800408a:	7dfb      	ldrb	r3, [r7, #23]
 800408c:	2b01      	cmp	r3, #1
 800408e:	d105      	bne.n	800409c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004090:	4b39      	ldr	r3, [pc, #228]	@ (8004178 <HAL_RCC_OscConfig+0x470>)
 8004092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004094:	4a38      	ldr	r2, [pc, #224]	@ (8004178 <HAL_RCC_OscConfig+0x470>)
 8004096:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800409a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	699b      	ldr	r3, [r3, #24]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	f000 80a1 	beq.w	80041e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040a6:	4b34      	ldr	r3, [pc, #208]	@ (8004178 <HAL_RCC_OscConfig+0x470>)
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f003 030c 	and.w	r3, r3, #12
 80040ae:	2b08      	cmp	r3, #8
 80040b0:	d05c      	beq.n	800416c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d141      	bne.n	800413e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ba:	4b31      	ldr	r3, [pc, #196]	@ (8004180 <HAL_RCC_OscConfig+0x478>)
 80040bc:	2200      	movs	r2, #0
 80040be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040c0:	f7fe fa52 	bl	8002568 <HAL_GetTick>
 80040c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040c6:	e008      	b.n	80040da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040c8:	f7fe fa4e 	bl	8002568 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d901      	bls.n	80040da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e087      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040da:	4b27      	ldr	r3, [pc, #156]	@ (8004178 <HAL_RCC_OscConfig+0x470>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1f0      	bne.n	80040c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	69da      	ldr	r2, [r3, #28]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a1b      	ldr	r3, [r3, #32]
 80040ee:	431a      	orrs	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f4:	019b      	lsls	r3, r3, #6
 80040f6:	431a      	orrs	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040fc:	085b      	lsrs	r3, r3, #1
 80040fe:	3b01      	subs	r3, #1
 8004100:	041b      	lsls	r3, r3, #16
 8004102:	431a      	orrs	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004108:	061b      	lsls	r3, r3, #24
 800410a:	491b      	ldr	r1, [pc, #108]	@ (8004178 <HAL_RCC_OscConfig+0x470>)
 800410c:	4313      	orrs	r3, r2
 800410e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004110:	4b1b      	ldr	r3, [pc, #108]	@ (8004180 <HAL_RCC_OscConfig+0x478>)
 8004112:	2201      	movs	r2, #1
 8004114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004116:	f7fe fa27 	bl	8002568 <HAL_GetTick>
 800411a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800411c:	e008      	b.n	8004130 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800411e:	f7fe fa23 	bl	8002568 <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	2b02      	cmp	r3, #2
 800412a:	d901      	bls.n	8004130 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	e05c      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004130:	4b11      	ldr	r3, [pc, #68]	@ (8004178 <HAL_RCC_OscConfig+0x470>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d0f0      	beq.n	800411e <HAL_RCC_OscConfig+0x416>
 800413c:	e054      	b.n	80041e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800413e:	4b10      	ldr	r3, [pc, #64]	@ (8004180 <HAL_RCC_OscConfig+0x478>)
 8004140:	2200      	movs	r2, #0
 8004142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004144:	f7fe fa10 	bl	8002568 <HAL_GetTick>
 8004148:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800414a:	e008      	b.n	800415e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800414c:	f7fe fa0c 	bl	8002568 <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	2b02      	cmp	r3, #2
 8004158:	d901      	bls.n	800415e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e045      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800415e:	4b06      	ldr	r3, [pc, #24]	@ (8004178 <HAL_RCC_OscConfig+0x470>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d1f0      	bne.n	800414c <HAL_RCC_OscConfig+0x444>
 800416a:	e03d      	b.n	80041e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d107      	bne.n	8004184 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e038      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
 8004178:	40023800 	.word	0x40023800
 800417c:	40007000 	.word	0x40007000
 8004180:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004184:	4b1b      	ldr	r3, [pc, #108]	@ (80041f4 <HAL_RCC_OscConfig+0x4ec>)
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d028      	beq.n	80041e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800419c:	429a      	cmp	r2, r3
 800419e:	d121      	bne.n	80041e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d11a      	bne.n	80041e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80041b4:	4013      	ands	r3, r2
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80041ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041bc:	4293      	cmp	r3, r2
 80041be:	d111      	bne.n	80041e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ca:	085b      	lsrs	r3, r3, #1
 80041cc:	3b01      	subs	r3, #1
 80041ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d107      	bne.n	80041e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d001      	beq.n	80041e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e000      	b.n	80041ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3718      	adds	r7, #24
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}
 80041f2:	bf00      	nop
 80041f4:	40023800 	.word	0x40023800

080041f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d101      	bne.n	800420c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e0cc      	b.n	80043a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800420c:	4b68      	ldr	r3, [pc, #416]	@ (80043b0 <HAL_RCC_ClockConfig+0x1b8>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0307 	and.w	r3, r3, #7
 8004214:	683a      	ldr	r2, [r7, #0]
 8004216:	429a      	cmp	r2, r3
 8004218:	d90c      	bls.n	8004234 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800421a:	4b65      	ldr	r3, [pc, #404]	@ (80043b0 <HAL_RCC_ClockConfig+0x1b8>)
 800421c:	683a      	ldr	r2, [r7, #0]
 800421e:	b2d2      	uxtb	r2, r2
 8004220:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004222:	4b63      	ldr	r3, [pc, #396]	@ (80043b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0307 	and.w	r3, r3, #7
 800422a:	683a      	ldr	r2, [r7, #0]
 800422c:	429a      	cmp	r2, r3
 800422e:	d001      	beq.n	8004234 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e0b8      	b.n	80043a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0302 	and.w	r3, r3, #2
 800423c:	2b00      	cmp	r3, #0
 800423e:	d020      	beq.n	8004282 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0304 	and.w	r3, r3, #4
 8004248:	2b00      	cmp	r3, #0
 800424a:	d005      	beq.n	8004258 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800424c:	4b59      	ldr	r3, [pc, #356]	@ (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	4a58      	ldr	r2, [pc, #352]	@ (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004252:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004256:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0308 	and.w	r3, r3, #8
 8004260:	2b00      	cmp	r3, #0
 8004262:	d005      	beq.n	8004270 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004264:	4b53      	ldr	r3, [pc, #332]	@ (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	4a52      	ldr	r2, [pc, #328]	@ (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 800426a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800426e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004270:	4b50      	ldr	r3, [pc, #320]	@ (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	494d      	ldr	r1, [pc, #308]	@ (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 800427e:	4313      	orrs	r3, r2
 8004280:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	2b00      	cmp	r3, #0
 800428c:	d044      	beq.n	8004318 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	2b01      	cmp	r3, #1
 8004294:	d107      	bne.n	80042a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004296:	4b47      	ldr	r3, [pc, #284]	@ (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d119      	bne.n	80042d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e07f      	b.n	80043a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d003      	beq.n	80042b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042b2:	2b03      	cmp	r3, #3
 80042b4:	d107      	bne.n	80042c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042b6:	4b3f      	ldr	r3, [pc, #252]	@ (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d109      	bne.n	80042d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e06f      	b.n	80043a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042c6:	4b3b      	ldr	r3, [pc, #236]	@ (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d101      	bne.n	80042d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e067      	b.n	80043a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042d6:	4b37      	ldr	r3, [pc, #220]	@ (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f023 0203 	bic.w	r2, r3, #3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	4934      	ldr	r1, [pc, #208]	@ (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042e8:	f7fe f93e 	bl	8002568 <HAL_GetTick>
 80042ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ee:	e00a      	b.n	8004306 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042f0:	f7fe f93a 	bl	8002568 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042fe:	4293      	cmp	r3, r2
 8004300:	d901      	bls.n	8004306 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e04f      	b.n	80043a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004306:	4b2b      	ldr	r3, [pc, #172]	@ (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f003 020c 	and.w	r2, r3, #12
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	429a      	cmp	r2, r3
 8004316:	d1eb      	bne.n	80042f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004318:	4b25      	ldr	r3, [pc, #148]	@ (80043b0 <HAL_RCC_ClockConfig+0x1b8>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0307 	and.w	r3, r3, #7
 8004320:	683a      	ldr	r2, [r7, #0]
 8004322:	429a      	cmp	r2, r3
 8004324:	d20c      	bcs.n	8004340 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004326:	4b22      	ldr	r3, [pc, #136]	@ (80043b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004328:	683a      	ldr	r2, [r7, #0]
 800432a:	b2d2      	uxtb	r2, r2
 800432c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800432e:	4b20      	ldr	r3, [pc, #128]	@ (80043b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0307 	and.w	r3, r3, #7
 8004336:	683a      	ldr	r2, [r7, #0]
 8004338:	429a      	cmp	r2, r3
 800433a:	d001      	beq.n	8004340 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e032      	b.n	80043a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0304 	and.w	r3, r3, #4
 8004348:	2b00      	cmp	r3, #0
 800434a:	d008      	beq.n	800435e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800434c:	4b19      	ldr	r3, [pc, #100]	@ (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	4916      	ldr	r1, [pc, #88]	@ (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 800435a:	4313      	orrs	r3, r2
 800435c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0308 	and.w	r3, r3, #8
 8004366:	2b00      	cmp	r3, #0
 8004368:	d009      	beq.n	800437e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800436a:	4b12      	ldr	r3, [pc, #72]	@ (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	00db      	lsls	r3, r3, #3
 8004378:	490e      	ldr	r1, [pc, #56]	@ (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 800437a:	4313      	orrs	r3, r2
 800437c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800437e:	f000 f821 	bl	80043c4 <HAL_RCC_GetSysClockFreq>
 8004382:	4602      	mov	r2, r0
 8004384:	4b0b      	ldr	r3, [pc, #44]	@ (80043b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	091b      	lsrs	r3, r3, #4
 800438a:	f003 030f 	and.w	r3, r3, #15
 800438e:	490a      	ldr	r1, [pc, #40]	@ (80043b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004390:	5ccb      	ldrb	r3, [r1, r3]
 8004392:	fa22 f303 	lsr.w	r3, r2, r3
 8004396:	4a09      	ldr	r2, [pc, #36]	@ (80043bc <HAL_RCC_ClockConfig+0x1c4>)
 8004398:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800439a:	4b09      	ldr	r3, [pc, #36]	@ (80043c0 <HAL_RCC_ClockConfig+0x1c8>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4618      	mov	r0, r3
 80043a0:	f7fe f89e 	bl	80024e0 <HAL_InitTick>

  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3710      	adds	r7, #16
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	40023c00 	.word	0x40023c00
 80043b4:	40023800 	.word	0x40023800
 80043b8:	0800ccbc 	.word	0x0800ccbc
 80043bc:	20000008 	.word	0x20000008
 80043c0:	2000000c 	.word	0x2000000c

080043c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043c8:	b094      	sub	sp, #80	@ 0x50
 80043ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80043cc:	2300      	movs	r3, #0
 80043ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80043d0:	2300      	movs	r3, #0
 80043d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043d4:	2300      	movs	r3, #0
 80043d6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80043d8:	2300      	movs	r3, #0
 80043da:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043dc:	4b79      	ldr	r3, [pc, #484]	@ (80045c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	f003 030c 	and.w	r3, r3, #12
 80043e4:	2b08      	cmp	r3, #8
 80043e6:	d00d      	beq.n	8004404 <HAL_RCC_GetSysClockFreq+0x40>
 80043e8:	2b08      	cmp	r3, #8
 80043ea:	f200 80e1 	bhi.w	80045b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d002      	beq.n	80043f8 <HAL_RCC_GetSysClockFreq+0x34>
 80043f2:	2b04      	cmp	r3, #4
 80043f4:	d003      	beq.n	80043fe <HAL_RCC_GetSysClockFreq+0x3a>
 80043f6:	e0db      	b.n	80045b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043f8:	4b73      	ldr	r3, [pc, #460]	@ (80045c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80043fa:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80043fc:	e0db      	b.n	80045b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043fe:	4b73      	ldr	r3, [pc, #460]	@ (80045cc <HAL_RCC_GetSysClockFreq+0x208>)
 8004400:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004402:	e0d8      	b.n	80045b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004404:	4b6f      	ldr	r3, [pc, #444]	@ (80045c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800440c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800440e:	4b6d      	ldr	r3, [pc, #436]	@ (80045c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d063      	beq.n	80044e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800441a:	4b6a      	ldr	r3, [pc, #424]	@ (80045c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	099b      	lsrs	r3, r3, #6
 8004420:	2200      	movs	r2, #0
 8004422:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004424:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004428:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800442c:	633b      	str	r3, [r7, #48]	@ 0x30
 800442e:	2300      	movs	r3, #0
 8004430:	637b      	str	r3, [r7, #52]	@ 0x34
 8004432:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004436:	4622      	mov	r2, r4
 8004438:	462b      	mov	r3, r5
 800443a:	f04f 0000 	mov.w	r0, #0
 800443e:	f04f 0100 	mov.w	r1, #0
 8004442:	0159      	lsls	r1, r3, #5
 8004444:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004448:	0150      	lsls	r0, r2, #5
 800444a:	4602      	mov	r2, r0
 800444c:	460b      	mov	r3, r1
 800444e:	4621      	mov	r1, r4
 8004450:	1a51      	subs	r1, r2, r1
 8004452:	6139      	str	r1, [r7, #16]
 8004454:	4629      	mov	r1, r5
 8004456:	eb63 0301 	sbc.w	r3, r3, r1
 800445a:	617b      	str	r3, [r7, #20]
 800445c:	f04f 0200 	mov.w	r2, #0
 8004460:	f04f 0300 	mov.w	r3, #0
 8004464:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004468:	4659      	mov	r1, fp
 800446a:	018b      	lsls	r3, r1, #6
 800446c:	4651      	mov	r1, sl
 800446e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004472:	4651      	mov	r1, sl
 8004474:	018a      	lsls	r2, r1, #6
 8004476:	4651      	mov	r1, sl
 8004478:	ebb2 0801 	subs.w	r8, r2, r1
 800447c:	4659      	mov	r1, fp
 800447e:	eb63 0901 	sbc.w	r9, r3, r1
 8004482:	f04f 0200 	mov.w	r2, #0
 8004486:	f04f 0300 	mov.w	r3, #0
 800448a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800448e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004492:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004496:	4690      	mov	r8, r2
 8004498:	4699      	mov	r9, r3
 800449a:	4623      	mov	r3, r4
 800449c:	eb18 0303 	adds.w	r3, r8, r3
 80044a0:	60bb      	str	r3, [r7, #8]
 80044a2:	462b      	mov	r3, r5
 80044a4:	eb49 0303 	adc.w	r3, r9, r3
 80044a8:	60fb      	str	r3, [r7, #12]
 80044aa:	f04f 0200 	mov.w	r2, #0
 80044ae:	f04f 0300 	mov.w	r3, #0
 80044b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80044b6:	4629      	mov	r1, r5
 80044b8:	024b      	lsls	r3, r1, #9
 80044ba:	4621      	mov	r1, r4
 80044bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80044c0:	4621      	mov	r1, r4
 80044c2:	024a      	lsls	r2, r1, #9
 80044c4:	4610      	mov	r0, r2
 80044c6:	4619      	mov	r1, r3
 80044c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044ca:	2200      	movs	r2, #0
 80044cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80044ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80044d4:	f7fc fbc0 	bl	8000c58 <__aeabi_uldivmod>
 80044d8:	4602      	mov	r2, r0
 80044da:	460b      	mov	r3, r1
 80044dc:	4613      	mov	r3, r2
 80044de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044e0:	e058      	b.n	8004594 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044e2:	4b38      	ldr	r3, [pc, #224]	@ (80045c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	099b      	lsrs	r3, r3, #6
 80044e8:	2200      	movs	r2, #0
 80044ea:	4618      	mov	r0, r3
 80044ec:	4611      	mov	r1, r2
 80044ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80044f2:	623b      	str	r3, [r7, #32]
 80044f4:	2300      	movs	r3, #0
 80044f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80044f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80044fc:	4642      	mov	r2, r8
 80044fe:	464b      	mov	r3, r9
 8004500:	f04f 0000 	mov.w	r0, #0
 8004504:	f04f 0100 	mov.w	r1, #0
 8004508:	0159      	lsls	r1, r3, #5
 800450a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800450e:	0150      	lsls	r0, r2, #5
 8004510:	4602      	mov	r2, r0
 8004512:	460b      	mov	r3, r1
 8004514:	4641      	mov	r1, r8
 8004516:	ebb2 0a01 	subs.w	sl, r2, r1
 800451a:	4649      	mov	r1, r9
 800451c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004520:	f04f 0200 	mov.w	r2, #0
 8004524:	f04f 0300 	mov.w	r3, #0
 8004528:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800452c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004530:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004534:	ebb2 040a 	subs.w	r4, r2, sl
 8004538:	eb63 050b 	sbc.w	r5, r3, fp
 800453c:	f04f 0200 	mov.w	r2, #0
 8004540:	f04f 0300 	mov.w	r3, #0
 8004544:	00eb      	lsls	r3, r5, #3
 8004546:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800454a:	00e2      	lsls	r2, r4, #3
 800454c:	4614      	mov	r4, r2
 800454e:	461d      	mov	r5, r3
 8004550:	4643      	mov	r3, r8
 8004552:	18e3      	adds	r3, r4, r3
 8004554:	603b      	str	r3, [r7, #0]
 8004556:	464b      	mov	r3, r9
 8004558:	eb45 0303 	adc.w	r3, r5, r3
 800455c:	607b      	str	r3, [r7, #4]
 800455e:	f04f 0200 	mov.w	r2, #0
 8004562:	f04f 0300 	mov.w	r3, #0
 8004566:	e9d7 4500 	ldrd	r4, r5, [r7]
 800456a:	4629      	mov	r1, r5
 800456c:	028b      	lsls	r3, r1, #10
 800456e:	4621      	mov	r1, r4
 8004570:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004574:	4621      	mov	r1, r4
 8004576:	028a      	lsls	r2, r1, #10
 8004578:	4610      	mov	r0, r2
 800457a:	4619      	mov	r1, r3
 800457c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800457e:	2200      	movs	r2, #0
 8004580:	61bb      	str	r3, [r7, #24]
 8004582:	61fa      	str	r2, [r7, #28]
 8004584:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004588:	f7fc fb66 	bl	8000c58 <__aeabi_uldivmod>
 800458c:	4602      	mov	r2, r0
 800458e:	460b      	mov	r3, r1
 8004590:	4613      	mov	r3, r2
 8004592:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004594:	4b0b      	ldr	r3, [pc, #44]	@ (80045c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	0c1b      	lsrs	r3, r3, #16
 800459a:	f003 0303 	and.w	r3, r3, #3
 800459e:	3301      	adds	r3, #1
 80045a0:	005b      	lsls	r3, r3, #1
 80045a2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80045a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80045a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80045ae:	e002      	b.n	80045b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045b0:	4b05      	ldr	r3, [pc, #20]	@ (80045c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80045b2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80045b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3750      	adds	r7, #80	@ 0x50
 80045bc:	46bd      	mov	sp, r7
 80045be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045c2:	bf00      	nop
 80045c4:	40023800 	.word	0x40023800
 80045c8:	00f42400 	.word	0x00f42400
 80045cc:	007a1200 	.word	0x007a1200

080045d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045d0:	b480      	push	{r7}
 80045d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045d4:	4b03      	ldr	r3, [pc, #12]	@ (80045e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80045d6:	681b      	ldr	r3, [r3, #0]
}
 80045d8:	4618      	mov	r0, r3
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	20000008 	.word	0x20000008

080045e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80045ec:	f7ff fff0 	bl	80045d0 <HAL_RCC_GetHCLKFreq>
 80045f0:	4602      	mov	r2, r0
 80045f2:	4b05      	ldr	r3, [pc, #20]	@ (8004608 <HAL_RCC_GetPCLK1Freq+0x20>)
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	0a9b      	lsrs	r3, r3, #10
 80045f8:	f003 0307 	and.w	r3, r3, #7
 80045fc:	4903      	ldr	r1, [pc, #12]	@ (800460c <HAL_RCC_GetPCLK1Freq+0x24>)
 80045fe:	5ccb      	ldrb	r3, [r1, r3]
 8004600:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004604:	4618      	mov	r0, r3
 8004606:	bd80      	pop	{r7, pc}
 8004608:	40023800 	.word	0x40023800
 800460c:	0800cccc 	.word	0x0800cccc

08004610 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004614:	f7ff ffdc 	bl	80045d0 <HAL_RCC_GetHCLKFreq>
 8004618:	4602      	mov	r2, r0
 800461a:	4b05      	ldr	r3, [pc, #20]	@ (8004630 <HAL_RCC_GetPCLK2Freq+0x20>)
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	0b5b      	lsrs	r3, r3, #13
 8004620:	f003 0307 	and.w	r3, r3, #7
 8004624:	4903      	ldr	r1, [pc, #12]	@ (8004634 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004626:	5ccb      	ldrb	r3, [r1, r3]
 8004628:	fa22 f303 	lsr.w	r3, r2, r3
}
 800462c:	4618      	mov	r0, r3
 800462e:	bd80      	pop	{r7, pc}
 8004630:	40023800 	.word	0x40023800
 8004634:	0800cccc 	.word	0x0800cccc

08004638 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d101      	bne.n	800464a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e041      	b.n	80046ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004650:	b2db      	uxtb	r3, r3
 8004652:	2b00      	cmp	r3, #0
 8004654:	d106      	bne.n	8004664 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f7fd fcb4 	bl	8001fcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2202      	movs	r2, #2
 8004668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	3304      	adds	r3, #4
 8004674:	4619      	mov	r1, r3
 8004676:	4610      	mov	r0, r2
 8004678:	f000 fa06 	bl	8004a88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3708      	adds	r7, #8
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
	...

080046d8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80046d8:	b480      	push	{r7}
 80046da:	b085      	sub	sp, #20
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d001      	beq.n	80046f0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e03c      	b.n	800476a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2202      	movs	r2, #2
 80046f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a1e      	ldr	r2, [pc, #120]	@ (8004778 <HAL_TIM_Base_Start+0xa0>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d018      	beq.n	8004734 <HAL_TIM_Base_Start+0x5c>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800470a:	d013      	beq.n	8004734 <HAL_TIM_Base_Start+0x5c>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a1a      	ldr	r2, [pc, #104]	@ (800477c <HAL_TIM_Base_Start+0xa4>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d00e      	beq.n	8004734 <HAL_TIM_Base_Start+0x5c>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a19      	ldr	r2, [pc, #100]	@ (8004780 <HAL_TIM_Base_Start+0xa8>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d009      	beq.n	8004734 <HAL_TIM_Base_Start+0x5c>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a17      	ldr	r2, [pc, #92]	@ (8004784 <HAL_TIM_Base_Start+0xac>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d004      	beq.n	8004734 <HAL_TIM_Base_Start+0x5c>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a16      	ldr	r2, [pc, #88]	@ (8004788 <HAL_TIM_Base_Start+0xb0>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d111      	bne.n	8004758 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f003 0307 	and.w	r3, r3, #7
 800473e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2b06      	cmp	r3, #6
 8004744:	d010      	beq.n	8004768 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f042 0201 	orr.w	r2, r2, #1
 8004754:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004756:	e007      	b.n	8004768 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f042 0201 	orr.w	r2, r2, #1
 8004766:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004768:	2300      	movs	r3, #0
}
 800476a:	4618      	mov	r0, r3
 800476c:	3714      	adds	r7, #20
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop
 8004778:	40010000 	.word	0x40010000
 800477c:	40000400 	.word	0x40000400
 8004780:	40000800 	.word	0x40000800
 8004784:	40000c00 	.word	0x40000c00
 8004788:	40014000 	.word	0x40014000

0800478c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b082      	sub	sp, #8
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d101      	bne.n	800479e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e041      	b.n	8004822 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d106      	bne.n	80047b8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 f839 	bl	800482a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2202      	movs	r2, #2
 80047bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	3304      	adds	r3, #4
 80047c8:	4619      	mov	r1, r3
 80047ca:	4610      	mov	r0, r2
 80047cc:	f000 f95c 	bl	8004a88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	3708      	adds	r7, #8
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}

0800482a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800482a:	b480      	push	{r7}
 800482c:	b083      	sub	sp, #12
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004832:	bf00      	nop
 8004834:	370c      	adds	r7, #12
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr
	...

08004840 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b086      	sub	sp, #24
 8004844:	af00      	add	r7, sp, #0
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800484c:	2300      	movs	r3, #0
 800484e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004856:	2b01      	cmp	r3, #1
 8004858:	d101      	bne.n	800485e <HAL_TIM_OC_ConfigChannel+0x1e>
 800485a:	2302      	movs	r3, #2
 800485c:	e048      	b.n	80048f0 <HAL_TIM_OC_ConfigChannel+0xb0>
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2201      	movs	r2, #1
 8004862:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2b0c      	cmp	r3, #12
 800486a:	d839      	bhi.n	80048e0 <HAL_TIM_OC_ConfigChannel+0xa0>
 800486c:	a201      	add	r2, pc, #4	@ (adr r2, 8004874 <HAL_TIM_OC_ConfigChannel+0x34>)
 800486e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004872:	bf00      	nop
 8004874:	080048a9 	.word	0x080048a9
 8004878:	080048e1 	.word	0x080048e1
 800487c:	080048e1 	.word	0x080048e1
 8004880:	080048e1 	.word	0x080048e1
 8004884:	080048b7 	.word	0x080048b7
 8004888:	080048e1 	.word	0x080048e1
 800488c:	080048e1 	.word	0x080048e1
 8004890:	080048e1 	.word	0x080048e1
 8004894:	080048c5 	.word	0x080048c5
 8004898:	080048e1 	.word	0x080048e1
 800489c:	080048e1 	.word	0x080048e1
 80048a0:	080048e1 	.word	0x080048e1
 80048a4:	080048d3 	.word	0x080048d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68b9      	ldr	r1, [r7, #8]
 80048ae:	4618      	mov	r0, r3
 80048b0:	f000 f976 	bl	8004ba0 <TIM_OC1_SetConfig>
      break;
 80048b4:	e017      	b.n	80048e6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68b9      	ldr	r1, [r7, #8]
 80048bc:	4618      	mov	r0, r3
 80048be:	f000 f9d5 	bl	8004c6c <TIM_OC2_SetConfig>
      break;
 80048c2:	e010      	b.n	80048e6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68b9      	ldr	r1, [r7, #8]
 80048ca:	4618      	mov	r0, r3
 80048cc:	f000 fa3a 	bl	8004d44 <TIM_OC3_SetConfig>
      break;
 80048d0:	e009      	b.n	80048e6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	68b9      	ldr	r1, [r7, #8]
 80048d8:	4618      	mov	r0, r3
 80048da:	f000 fa9d 	bl	8004e18 <TIM_OC4_SetConfig>
      break;
 80048de:	e002      	b.n	80048e6 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	75fb      	strb	r3, [r7, #23]
      break;
 80048e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80048ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3718      	adds	r7, #24
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004902:	2300      	movs	r3, #0
 8004904:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800490c:	2b01      	cmp	r3, #1
 800490e:	d101      	bne.n	8004914 <HAL_TIM_ConfigClockSource+0x1c>
 8004910:	2302      	movs	r3, #2
 8004912:	e0b4      	b.n	8004a7e <HAL_TIM_ConfigClockSource+0x186>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2202      	movs	r2, #2
 8004920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004932:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800493a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	68ba      	ldr	r2, [r7, #8]
 8004942:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800494c:	d03e      	beq.n	80049cc <HAL_TIM_ConfigClockSource+0xd4>
 800494e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004952:	f200 8087 	bhi.w	8004a64 <HAL_TIM_ConfigClockSource+0x16c>
 8004956:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800495a:	f000 8086 	beq.w	8004a6a <HAL_TIM_ConfigClockSource+0x172>
 800495e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004962:	d87f      	bhi.n	8004a64 <HAL_TIM_ConfigClockSource+0x16c>
 8004964:	2b70      	cmp	r3, #112	@ 0x70
 8004966:	d01a      	beq.n	800499e <HAL_TIM_ConfigClockSource+0xa6>
 8004968:	2b70      	cmp	r3, #112	@ 0x70
 800496a:	d87b      	bhi.n	8004a64 <HAL_TIM_ConfigClockSource+0x16c>
 800496c:	2b60      	cmp	r3, #96	@ 0x60
 800496e:	d050      	beq.n	8004a12 <HAL_TIM_ConfigClockSource+0x11a>
 8004970:	2b60      	cmp	r3, #96	@ 0x60
 8004972:	d877      	bhi.n	8004a64 <HAL_TIM_ConfigClockSource+0x16c>
 8004974:	2b50      	cmp	r3, #80	@ 0x50
 8004976:	d03c      	beq.n	80049f2 <HAL_TIM_ConfigClockSource+0xfa>
 8004978:	2b50      	cmp	r3, #80	@ 0x50
 800497a:	d873      	bhi.n	8004a64 <HAL_TIM_ConfigClockSource+0x16c>
 800497c:	2b40      	cmp	r3, #64	@ 0x40
 800497e:	d058      	beq.n	8004a32 <HAL_TIM_ConfigClockSource+0x13a>
 8004980:	2b40      	cmp	r3, #64	@ 0x40
 8004982:	d86f      	bhi.n	8004a64 <HAL_TIM_ConfigClockSource+0x16c>
 8004984:	2b30      	cmp	r3, #48	@ 0x30
 8004986:	d064      	beq.n	8004a52 <HAL_TIM_ConfigClockSource+0x15a>
 8004988:	2b30      	cmp	r3, #48	@ 0x30
 800498a:	d86b      	bhi.n	8004a64 <HAL_TIM_ConfigClockSource+0x16c>
 800498c:	2b20      	cmp	r3, #32
 800498e:	d060      	beq.n	8004a52 <HAL_TIM_ConfigClockSource+0x15a>
 8004990:	2b20      	cmp	r3, #32
 8004992:	d867      	bhi.n	8004a64 <HAL_TIM_ConfigClockSource+0x16c>
 8004994:	2b00      	cmp	r3, #0
 8004996:	d05c      	beq.n	8004a52 <HAL_TIM_ConfigClockSource+0x15a>
 8004998:	2b10      	cmp	r3, #16
 800499a:	d05a      	beq.n	8004a52 <HAL_TIM_ConfigClockSource+0x15a>
 800499c:	e062      	b.n	8004a64 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80049ae:	f000 fafd 	bl	8004fac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80049c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	68ba      	ldr	r2, [r7, #8]
 80049c8:	609a      	str	r2, [r3, #8]
      break;
 80049ca:	e04f      	b.n	8004a6c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80049dc:	f000 fae6 	bl	8004fac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	689a      	ldr	r2, [r3, #8]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80049ee:	609a      	str	r2, [r3, #8]
      break;
 80049f0:	e03c      	b.n	8004a6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049fe:	461a      	mov	r2, r3
 8004a00:	f000 fa5a 	bl	8004eb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2150      	movs	r1, #80	@ 0x50
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f000 fab3 	bl	8004f76 <TIM_ITRx_SetConfig>
      break;
 8004a10:	e02c      	b.n	8004a6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a1e:	461a      	mov	r2, r3
 8004a20:	f000 fa79 	bl	8004f16 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2160      	movs	r1, #96	@ 0x60
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f000 faa3 	bl	8004f76 <TIM_ITRx_SetConfig>
      break;
 8004a30:	e01c      	b.n	8004a6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a3e:	461a      	mov	r2, r3
 8004a40:	f000 fa3a 	bl	8004eb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2140      	movs	r1, #64	@ 0x40
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f000 fa93 	bl	8004f76 <TIM_ITRx_SetConfig>
      break;
 8004a50:	e00c      	b.n	8004a6c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	4610      	mov	r0, r2
 8004a5e:	f000 fa8a 	bl	8004f76 <TIM_ITRx_SetConfig>
      break;
 8004a62:	e003      	b.n	8004a6c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	73fb      	strb	r3, [r7, #15]
      break;
 8004a68:	e000      	b.n	8004a6c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004a6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3710      	adds	r7, #16
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
	...

08004a88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b085      	sub	sp, #20
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	4a3a      	ldr	r2, [pc, #232]	@ (8004b84 <TIM_Base_SetConfig+0xfc>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d00f      	beq.n	8004ac0 <TIM_Base_SetConfig+0x38>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004aa6:	d00b      	beq.n	8004ac0 <TIM_Base_SetConfig+0x38>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4a37      	ldr	r2, [pc, #220]	@ (8004b88 <TIM_Base_SetConfig+0x100>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d007      	beq.n	8004ac0 <TIM_Base_SetConfig+0x38>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	4a36      	ldr	r2, [pc, #216]	@ (8004b8c <TIM_Base_SetConfig+0x104>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d003      	beq.n	8004ac0 <TIM_Base_SetConfig+0x38>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	4a35      	ldr	r2, [pc, #212]	@ (8004b90 <TIM_Base_SetConfig+0x108>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d108      	bne.n	8004ad2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ac6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a2b      	ldr	r2, [pc, #172]	@ (8004b84 <TIM_Base_SetConfig+0xfc>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d01b      	beq.n	8004b12 <TIM_Base_SetConfig+0x8a>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ae0:	d017      	beq.n	8004b12 <TIM_Base_SetConfig+0x8a>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a28      	ldr	r2, [pc, #160]	@ (8004b88 <TIM_Base_SetConfig+0x100>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d013      	beq.n	8004b12 <TIM_Base_SetConfig+0x8a>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a27      	ldr	r2, [pc, #156]	@ (8004b8c <TIM_Base_SetConfig+0x104>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d00f      	beq.n	8004b12 <TIM_Base_SetConfig+0x8a>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a26      	ldr	r2, [pc, #152]	@ (8004b90 <TIM_Base_SetConfig+0x108>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d00b      	beq.n	8004b12 <TIM_Base_SetConfig+0x8a>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a25      	ldr	r2, [pc, #148]	@ (8004b94 <TIM_Base_SetConfig+0x10c>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d007      	beq.n	8004b12 <TIM_Base_SetConfig+0x8a>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4a24      	ldr	r2, [pc, #144]	@ (8004b98 <TIM_Base_SetConfig+0x110>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d003      	beq.n	8004b12 <TIM_Base_SetConfig+0x8a>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a23      	ldr	r2, [pc, #140]	@ (8004b9c <TIM_Base_SetConfig+0x114>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d108      	bne.n	8004b24 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	68fa      	ldr	r2, [r7, #12]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	695b      	ldr	r3, [r3, #20]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	68fa      	ldr	r2, [r7, #12]
 8004b36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	689a      	ldr	r2, [r3, #8]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	4a0e      	ldr	r2, [pc, #56]	@ (8004b84 <TIM_Base_SetConfig+0xfc>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d103      	bne.n	8004b58 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	691a      	ldr	r2, [r3, #16]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	f003 0301 	and.w	r3, r3, #1
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d105      	bne.n	8004b76 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	f023 0201 	bic.w	r2, r3, #1
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	611a      	str	r2, [r3, #16]
  }
}
 8004b76:	bf00      	nop
 8004b78:	3714      	adds	r7, #20
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	40010000 	.word	0x40010000
 8004b88:	40000400 	.word	0x40000400
 8004b8c:	40000800 	.word	0x40000800
 8004b90:	40000c00 	.word	0x40000c00
 8004b94:	40014000 	.word	0x40014000
 8004b98:	40014400 	.word	0x40014400
 8004b9c:	40014800 	.word	0x40014800

08004ba0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b087      	sub	sp, #28
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a1b      	ldr	r3, [r3, #32]
 8004bae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a1b      	ldr	r3, [r3, #32]
 8004bb4:	f023 0201 	bic.w	r2, r3, #1
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f023 0303 	bic.w	r3, r3, #3
 8004bd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68fa      	ldr	r2, [r7, #12]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	f023 0302 	bic.w	r3, r3, #2
 8004be8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	697a      	ldr	r2, [r7, #20]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a1c      	ldr	r2, [pc, #112]	@ (8004c68 <TIM_OC1_SetConfig+0xc8>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d10c      	bne.n	8004c16 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	f023 0308 	bic.w	r3, r3, #8
 8004c02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	697a      	ldr	r2, [r7, #20]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	f023 0304 	bic.w	r3, r3, #4
 8004c14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a13      	ldr	r2, [pc, #76]	@ (8004c68 <TIM_OC1_SetConfig+0xc8>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d111      	bne.n	8004c42 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004c2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	693a      	ldr	r2, [r7, #16]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	699b      	ldr	r3, [r3, #24]
 8004c3c:	693a      	ldr	r2, [r7, #16]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	693a      	ldr	r2, [r7, #16]
 8004c46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	685a      	ldr	r2, [r3, #4]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	697a      	ldr	r2, [r7, #20]
 8004c5a:	621a      	str	r2, [r3, #32]
}
 8004c5c:	bf00      	nop
 8004c5e:	371c      	adds	r7, #28
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr
 8004c68:	40010000 	.word	0x40010000

08004c6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b087      	sub	sp, #28
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a1b      	ldr	r3, [r3, #32]
 8004c7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6a1b      	ldr	r3, [r3, #32]
 8004c80:	f023 0210 	bic.w	r2, r3, #16
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	699b      	ldr	r3, [r3, #24]
 8004c92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ca2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	021b      	lsls	r3, r3, #8
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	f023 0320 	bic.w	r3, r3, #32
 8004cb6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	011b      	lsls	r3, r3, #4
 8004cbe:	697a      	ldr	r2, [r7, #20]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a1e      	ldr	r2, [pc, #120]	@ (8004d40 <TIM_OC2_SetConfig+0xd4>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d10d      	bne.n	8004ce8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004cd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	011b      	lsls	r3, r3, #4
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ce6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a15      	ldr	r2, [pc, #84]	@ (8004d40 <TIM_OC2_SetConfig+0xd4>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d113      	bne.n	8004d18 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004cf6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004cfe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	695b      	ldr	r3, [r3, #20]
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	693a      	ldr	r2, [r7, #16]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	699b      	ldr	r3, [r3, #24]
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	693a      	ldr	r2, [r7, #16]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	693a      	ldr	r2, [r7, #16]
 8004d1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	68fa      	ldr	r2, [r7, #12]
 8004d22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	685a      	ldr	r2, [r3, #4]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	697a      	ldr	r2, [r7, #20]
 8004d30:	621a      	str	r2, [r3, #32]
}
 8004d32:	bf00      	nop
 8004d34:	371c      	adds	r7, #28
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop
 8004d40:	40010000 	.word	0x40010000

08004d44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b087      	sub	sp, #28
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a1b      	ldr	r3, [r3, #32]
 8004d52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6a1b      	ldr	r3, [r3, #32]
 8004d58:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	69db      	ldr	r3, [r3, #28]
 8004d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f023 0303 	bic.w	r3, r3, #3
 8004d7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004d8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	021b      	lsls	r3, r3, #8
 8004d94:	697a      	ldr	r2, [r7, #20]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a1d      	ldr	r2, [pc, #116]	@ (8004e14 <TIM_OC3_SetConfig+0xd0>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d10d      	bne.n	8004dbe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004da8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	021b      	lsls	r3, r3, #8
 8004db0:	697a      	ldr	r2, [r7, #20]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004dbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a14      	ldr	r2, [pc, #80]	@ (8004e14 <TIM_OC3_SetConfig+0xd0>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d113      	bne.n	8004dee <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004dcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004dd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	695b      	ldr	r3, [r3, #20]
 8004dda:	011b      	lsls	r3, r3, #4
 8004ddc:	693a      	ldr	r2, [r7, #16]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	699b      	ldr	r3, [r3, #24]
 8004de6:	011b      	lsls	r3, r3, #4
 8004de8:	693a      	ldr	r2, [r7, #16]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	693a      	ldr	r2, [r7, #16]
 8004df2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	685a      	ldr	r2, [r3, #4]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	697a      	ldr	r2, [r7, #20]
 8004e06:	621a      	str	r2, [r3, #32]
}
 8004e08:	bf00      	nop
 8004e0a:	371c      	adds	r7, #28
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr
 8004e14:	40010000 	.word	0x40010000

08004e18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b087      	sub	sp, #28
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a1b      	ldr	r3, [r3, #32]
 8004e26:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6a1b      	ldr	r3, [r3, #32]
 8004e2c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	69db      	ldr	r3, [r3, #28]
 8004e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	021b      	lsls	r3, r3, #8
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004e62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	031b      	lsls	r3, r3, #12
 8004e6a:	693a      	ldr	r2, [r7, #16]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4a10      	ldr	r2, [pc, #64]	@ (8004eb4 <TIM_OC4_SetConfig+0x9c>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d109      	bne.n	8004e8c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	695b      	ldr	r3, [r3, #20]
 8004e84:	019b      	lsls	r3, r3, #6
 8004e86:	697a      	ldr	r2, [r7, #20]
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	697a      	ldr	r2, [r7, #20]
 8004e90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	68fa      	ldr	r2, [r7, #12]
 8004e96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	685a      	ldr	r2, [r3, #4]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	693a      	ldr	r2, [r7, #16]
 8004ea4:	621a      	str	r2, [r3, #32]
}
 8004ea6:	bf00      	nop
 8004ea8:	371c      	adds	r7, #28
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr
 8004eb2:	bf00      	nop
 8004eb4:	40010000 	.word	0x40010000

08004eb8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b087      	sub	sp, #28
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	60b9      	str	r1, [r7, #8]
 8004ec2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6a1b      	ldr	r3, [r3, #32]
 8004ec8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6a1b      	ldr	r3, [r3, #32]
 8004ece:	f023 0201 	bic.w	r2, r3, #1
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	699b      	ldr	r3, [r3, #24]
 8004eda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ee2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	011b      	lsls	r3, r3, #4
 8004ee8:	693a      	ldr	r2, [r7, #16]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	f023 030a 	bic.w	r3, r3, #10
 8004ef4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ef6:	697a      	ldr	r2, [r7, #20]
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	693a      	ldr	r2, [r7, #16]
 8004f02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	697a      	ldr	r2, [r7, #20]
 8004f08:	621a      	str	r2, [r3, #32]
}
 8004f0a:	bf00      	nop
 8004f0c:	371c      	adds	r7, #28
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr

08004f16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f16:	b480      	push	{r7}
 8004f18:	b087      	sub	sp, #28
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	60f8      	str	r0, [r7, #12]
 8004f1e:	60b9      	str	r1, [r7, #8]
 8004f20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6a1b      	ldr	r3, [r3, #32]
 8004f26:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6a1b      	ldr	r3, [r3, #32]
 8004f2c:	f023 0210 	bic.w	r2, r3, #16
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	699b      	ldr	r3, [r3, #24]
 8004f38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004f40:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	031b      	lsls	r3, r3, #12
 8004f46:	693a      	ldr	r2, [r7, #16]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004f52:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	011b      	lsls	r3, r3, #4
 8004f58:	697a      	ldr	r2, [r7, #20]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	693a      	ldr	r2, [r7, #16]
 8004f62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	697a      	ldr	r2, [r7, #20]
 8004f68:	621a      	str	r2, [r3, #32]
}
 8004f6a:	bf00      	nop
 8004f6c:	371c      	adds	r7, #28
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr

08004f76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f76:	b480      	push	{r7}
 8004f78:	b085      	sub	sp, #20
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
 8004f7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f8e:	683a      	ldr	r2, [r7, #0]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	f043 0307 	orr.w	r3, r3, #7
 8004f98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	68fa      	ldr	r2, [r7, #12]
 8004f9e:	609a      	str	r2, [r3, #8]
}
 8004fa0:	bf00      	nop
 8004fa2:	3714      	adds	r7, #20
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr

08004fac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b087      	sub	sp, #28
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	607a      	str	r2, [r7, #4]
 8004fb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004fc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	021a      	lsls	r2, r3, #8
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	431a      	orrs	r2, r3
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	697a      	ldr	r2, [r7, #20]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	697a      	ldr	r2, [r7, #20]
 8004fde:	609a      	str	r2, [r3, #8]
}
 8004fe0:	bf00      	nop
 8004fe2:	371c      	adds	r7, #28
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b085      	sub	sp, #20
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d101      	bne.n	8005004 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005000:	2302      	movs	r3, #2
 8005002:	e050      	b.n	80050a6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2202      	movs	r2, #2
 8005010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800502a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	68fa      	ldr	r2, [r7, #12]
 8005032:	4313      	orrs	r3, r2
 8005034:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a1c      	ldr	r2, [pc, #112]	@ (80050b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d018      	beq.n	800507a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005050:	d013      	beq.n	800507a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a18      	ldr	r2, [pc, #96]	@ (80050b8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d00e      	beq.n	800507a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a16      	ldr	r2, [pc, #88]	@ (80050bc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d009      	beq.n	800507a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a15      	ldr	r2, [pc, #84]	@ (80050c0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d004      	beq.n	800507a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a13      	ldr	r2, [pc, #76]	@ (80050c4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d10c      	bne.n	8005094 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005080:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	68ba      	ldr	r2, [r7, #8]
 8005088:	4313      	orrs	r3, r2
 800508a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	68ba      	ldr	r2, [r7, #8]
 8005092:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80050a4:	2300      	movs	r3, #0
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3714      	adds	r7, #20
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr
 80050b2:	bf00      	nop
 80050b4:	40010000 	.word	0x40010000
 80050b8:	40000400 	.word	0x40000400
 80050bc:	40000800 	.word	0x40000800
 80050c0:	40000c00 	.word	0x40000c00
 80050c4:	40014000 	.word	0x40014000

080050c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b085      	sub	sp, #20
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80050d2:	2300      	movs	r3, #0
 80050d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d101      	bne.n	80050e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80050e0:	2302      	movs	r3, #2
 80050e2:	e03d      	b.n	8005160 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	4313      	orrs	r3, r2
 8005106:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	4313      	orrs	r3, r2
 8005114:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4313      	orrs	r3, r2
 8005122:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	4313      	orrs	r3, r2
 8005130:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	695b      	ldr	r3, [r3, #20]
 800513c:	4313      	orrs	r3, r2
 800513e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	69db      	ldr	r3, [r3, #28]
 800514a:	4313      	orrs	r3, r2
 800514c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800515e:	2300      	movs	r3, #0
}
 8005160:	4618      	mov	r0, r3
 8005162:	3714      	adds	r7, #20
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr

0800516c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b082      	sub	sp, #8
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d101      	bne.n	800517e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e042      	b.n	8005204 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005184:	b2db      	uxtb	r3, r3
 8005186:	2b00      	cmp	r3, #0
 8005188:	d106      	bne.n	8005198 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f7fc ff76 	bl	8002084 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2224      	movs	r2, #36	@ 0x24
 800519c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	68da      	ldr	r2, [r3, #12]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80051ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f000 fe55 	bl	8005e60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	691a      	ldr	r2, [r3, #16]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80051c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	695a      	ldr	r2, [r3, #20]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80051d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	68da      	ldr	r2, [r3, #12]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80051e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2220      	movs	r2, #32
 80051f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2220      	movs	r2, #32
 80051f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005202:	2300      	movs	r3, #0
}
 8005204:	4618      	mov	r0, r3
 8005206:	3708      	adds	r7, #8
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b08a      	sub	sp, #40	@ 0x28
 8005210:	af02      	add	r7, sp, #8
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	603b      	str	r3, [r7, #0]
 8005218:	4613      	mov	r3, r2
 800521a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800521c:	2300      	movs	r3, #0
 800521e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005226:	b2db      	uxtb	r3, r3
 8005228:	2b20      	cmp	r3, #32
 800522a:	d175      	bne.n	8005318 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d002      	beq.n	8005238 <HAL_UART_Transmit+0x2c>
 8005232:	88fb      	ldrh	r3, [r7, #6]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d101      	bne.n	800523c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e06e      	b.n	800531a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2200      	movs	r2, #0
 8005240:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2221      	movs	r2, #33	@ 0x21
 8005246:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800524a:	f7fd f98d 	bl	8002568 <HAL_GetTick>
 800524e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	88fa      	ldrh	r2, [r7, #6]
 8005254:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	88fa      	ldrh	r2, [r7, #6]
 800525a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005264:	d108      	bne.n	8005278 <HAL_UART_Transmit+0x6c>
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d104      	bne.n	8005278 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800526e:	2300      	movs	r3, #0
 8005270:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	61bb      	str	r3, [r7, #24]
 8005276:	e003      	b.n	8005280 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800527c:	2300      	movs	r3, #0
 800527e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005280:	e02e      	b.n	80052e0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	9300      	str	r3, [sp, #0]
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	2200      	movs	r2, #0
 800528a:	2180      	movs	r1, #128	@ 0x80
 800528c:	68f8      	ldr	r0, [r7, #12]
 800528e:	f000 fbb7 	bl	8005a00 <UART_WaitOnFlagUntilTimeout>
 8005292:	4603      	mov	r3, r0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d005      	beq.n	80052a4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2220      	movs	r2, #32
 800529c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80052a0:	2303      	movs	r3, #3
 80052a2:	e03a      	b.n	800531a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d10b      	bne.n	80052c2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	881b      	ldrh	r3, [r3, #0]
 80052ae:	461a      	mov	r2, r3
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80052ba:	69bb      	ldr	r3, [r7, #24]
 80052bc:	3302      	adds	r3, #2
 80052be:	61bb      	str	r3, [r7, #24]
 80052c0:	e007      	b.n	80052d2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	781a      	ldrb	r2, [r3, #0]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	3301      	adds	r3, #1
 80052d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	3b01      	subs	r3, #1
 80052da:	b29a      	uxth	r2, r3
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d1cb      	bne.n	8005282 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	9300      	str	r3, [sp, #0]
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	2200      	movs	r2, #0
 80052f2:	2140      	movs	r1, #64	@ 0x40
 80052f4:	68f8      	ldr	r0, [r7, #12]
 80052f6:	f000 fb83 	bl	8005a00 <UART_WaitOnFlagUntilTimeout>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d005      	beq.n	800530c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2220      	movs	r2, #32
 8005304:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005308:	2303      	movs	r3, #3
 800530a:	e006      	b.n	800531a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2220      	movs	r2, #32
 8005310:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005314:	2300      	movs	r3, #0
 8005316:	e000      	b.n	800531a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005318:	2302      	movs	r3, #2
  }
}
 800531a:	4618      	mov	r0, r3
 800531c:	3720      	adds	r7, #32
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}

08005322 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005322:	b580      	push	{r7, lr}
 8005324:	b08a      	sub	sp, #40	@ 0x28
 8005326:	af02      	add	r7, sp, #8
 8005328:	60f8      	str	r0, [r7, #12]
 800532a:	60b9      	str	r1, [r7, #8]
 800532c:	603b      	str	r3, [r7, #0]
 800532e:	4613      	mov	r3, r2
 8005330:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005332:	2300      	movs	r3, #0
 8005334:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800533c:	b2db      	uxtb	r3, r3
 800533e:	2b20      	cmp	r3, #32
 8005340:	f040 8081 	bne.w	8005446 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d002      	beq.n	8005350 <HAL_UART_Receive+0x2e>
 800534a:	88fb      	ldrh	r3, [r7, #6]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d101      	bne.n	8005354 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	e079      	b.n	8005448 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2200      	movs	r2, #0
 8005358:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2222      	movs	r2, #34	@ 0x22
 800535e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2200      	movs	r2, #0
 8005366:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005368:	f7fd f8fe 	bl	8002568 <HAL_GetTick>
 800536c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	88fa      	ldrh	r2, [r7, #6]
 8005372:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	88fa      	ldrh	r2, [r7, #6]
 8005378:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005382:	d108      	bne.n	8005396 <HAL_UART_Receive+0x74>
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	691b      	ldr	r3, [r3, #16]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d104      	bne.n	8005396 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800538c:	2300      	movs	r3, #0
 800538e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	61bb      	str	r3, [r7, #24]
 8005394:	e003      	b.n	800539e <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800539a:	2300      	movs	r3, #0
 800539c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800539e:	e047      	b.n	8005430 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	9300      	str	r3, [sp, #0]
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	2200      	movs	r2, #0
 80053a8:	2120      	movs	r1, #32
 80053aa:	68f8      	ldr	r0, [r7, #12]
 80053ac:	f000 fb28 	bl	8005a00 <UART_WaitOnFlagUntilTimeout>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d005      	beq.n	80053c2 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2220      	movs	r2, #32
 80053ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e042      	b.n	8005448 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d10c      	bne.n	80053e2 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053d4:	b29a      	uxth	r2, r3
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80053da:	69bb      	ldr	r3, [r7, #24]
 80053dc:	3302      	adds	r3, #2
 80053de:	61bb      	str	r3, [r7, #24]
 80053e0:	e01f      	b.n	8005422 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053ea:	d007      	beq.n	80053fc <HAL_UART_Receive+0xda>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d10a      	bne.n	800540a <HAL_UART_Receive+0xe8>
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	691b      	ldr	r3, [r3, #16]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d106      	bne.n	800540a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	b2da      	uxtb	r2, r3
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	701a      	strb	r2, [r3, #0]
 8005408:	e008      	b.n	800541c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	b2db      	uxtb	r3, r3
 8005412:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005416:	b2da      	uxtb	r2, r3
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	3301      	adds	r3, #1
 8005420:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005426:	b29b      	uxth	r3, r3
 8005428:	3b01      	subs	r3, #1
 800542a:	b29a      	uxth	r2, r3
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005434:	b29b      	uxth	r3, r3
 8005436:	2b00      	cmp	r3, #0
 8005438:	d1b2      	bne.n	80053a0 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2220      	movs	r2, #32
 800543e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8005442:	2300      	movs	r3, #0
 8005444:	e000      	b.n	8005448 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005446:	2302      	movs	r3, #2
  }
}
 8005448:	4618      	mov	r0, r3
 800544a:	3720      	adds	r7, #32
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	60b9      	str	r1, [r7, #8]
 800545a:	4613      	mov	r3, r2
 800545c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005464:	b2db      	uxtb	r3, r3
 8005466:	2b20      	cmp	r3, #32
 8005468:	d112      	bne.n	8005490 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d002      	beq.n	8005476 <HAL_UART_Receive_IT+0x26>
 8005470:	88fb      	ldrh	r3, [r7, #6]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d101      	bne.n	800547a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e00b      	b.n	8005492 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2200      	movs	r2, #0
 800547e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005480:	88fb      	ldrh	r3, [r7, #6]
 8005482:	461a      	mov	r2, r3
 8005484:	68b9      	ldr	r1, [r7, #8]
 8005486:	68f8      	ldr	r0, [r7, #12]
 8005488:	f000 fb13 	bl	8005ab2 <UART_Start_Receive_IT>
 800548c:	4603      	mov	r3, r0
 800548e:	e000      	b.n	8005492 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005490:	2302      	movs	r3, #2
  }
}
 8005492:	4618      	mov	r0, r3
 8005494:	3710      	adds	r7, #16
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
	...

0800549c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b0ba      	sub	sp, #232	@ 0xe8
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	695b      	ldr	r3, [r3, #20]
 80054be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80054c2:	2300      	movs	r3, #0
 80054c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80054c8:	2300      	movs	r3, #0
 80054ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80054ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054d2:	f003 030f 	and.w	r3, r3, #15
 80054d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80054da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d10f      	bne.n	8005502 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80054e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054e6:	f003 0320 	and.w	r3, r3, #32
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d009      	beq.n	8005502 <HAL_UART_IRQHandler+0x66>
 80054ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054f2:	f003 0320 	and.w	r3, r3, #32
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d003      	beq.n	8005502 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 fbf2 	bl	8005ce4 <UART_Receive_IT>
      return;
 8005500:	e25b      	b.n	80059ba <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005502:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005506:	2b00      	cmp	r3, #0
 8005508:	f000 80de 	beq.w	80056c8 <HAL_UART_IRQHandler+0x22c>
 800550c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005510:	f003 0301 	and.w	r3, r3, #1
 8005514:	2b00      	cmp	r3, #0
 8005516:	d106      	bne.n	8005526 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005518:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800551c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005520:	2b00      	cmp	r3, #0
 8005522:	f000 80d1 	beq.w	80056c8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800552a:	f003 0301 	and.w	r3, r3, #1
 800552e:	2b00      	cmp	r3, #0
 8005530:	d00b      	beq.n	800554a <HAL_UART_IRQHandler+0xae>
 8005532:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005536:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800553a:	2b00      	cmp	r3, #0
 800553c:	d005      	beq.n	800554a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005542:	f043 0201 	orr.w	r2, r3, #1
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800554a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800554e:	f003 0304 	and.w	r3, r3, #4
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00b      	beq.n	800556e <HAL_UART_IRQHandler+0xd2>
 8005556:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800555a:	f003 0301 	and.w	r3, r3, #1
 800555e:	2b00      	cmp	r3, #0
 8005560:	d005      	beq.n	800556e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005566:	f043 0202 	orr.w	r2, r3, #2
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800556e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005572:	f003 0302 	and.w	r3, r3, #2
 8005576:	2b00      	cmp	r3, #0
 8005578:	d00b      	beq.n	8005592 <HAL_UART_IRQHandler+0xf6>
 800557a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800557e:	f003 0301 	and.w	r3, r3, #1
 8005582:	2b00      	cmp	r3, #0
 8005584:	d005      	beq.n	8005592 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800558a:	f043 0204 	orr.w	r2, r3, #4
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005596:	f003 0308 	and.w	r3, r3, #8
 800559a:	2b00      	cmp	r3, #0
 800559c:	d011      	beq.n	80055c2 <HAL_UART_IRQHandler+0x126>
 800559e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055a2:	f003 0320 	and.w	r3, r3, #32
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d105      	bne.n	80055b6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80055aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055ae:	f003 0301 	and.w	r3, r3, #1
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d005      	beq.n	80055c2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055ba:	f043 0208 	orr.w	r2, r3, #8
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	f000 81f2 	beq.w	80059b0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80055cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055d0:	f003 0320 	and.w	r3, r3, #32
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d008      	beq.n	80055ea <HAL_UART_IRQHandler+0x14e>
 80055d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055dc:	f003 0320 	and.w	r3, r3, #32
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d002      	beq.n	80055ea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f000 fb7d 	bl	8005ce4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	695b      	ldr	r3, [r3, #20]
 80055f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055f4:	2b40      	cmp	r3, #64	@ 0x40
 80055f6:	bf0c      	ite	eq
 80055f8:	2301      	moveq	r3, #1
 80055fa:	2300      	movne	r3, #0
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005606:	f003 0308 	and.w	r3, r3, #8
 800560a:	2b00      	cmp	r3, #0
 800560c:	d103      	bne.n	8005616 <HAL_UART_IRQHandler+0x17a>
 800560e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005612:	2b00      	cmp	r3, #0
 8005614:	d04f      	beq.n	80056b6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 fa85 	bl	8005b26 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	695b      	ldr	r3, [r3, #20]
 8005622:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005626:	2b40      	cmp	r3, #64	@ 0x40
 8005628:	d141      	bne.n	80056ae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	3314      	adds	r3, #20
 8005630:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005634:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005638:	e853 3f00 	ldrex	r3, [r3]
 800563c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005640:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005644:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005648:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	3314      	adds	r3, #20
 8005652:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005656:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800565a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800565e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005662:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005666:	e841 2300 	strex	r3, r2, [r1]
 800566a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800566e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d1d9      	bne.n	800562a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800567a:	2b00      	cmp	r3, #0
 800567c:	d013      	beq.n	80056a6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005682:	4a7e      	ldr	r2, [pc, #504]	@ (800587c <HAL_UART_IRQHandler+0x3e0>)
 8005684:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800568a:	4618      	mov	r0, r3
 800568c:	f7fd fe16 	bl	80032bc <HAL_DMA_Abort_IT>
 8005690:	4603      	mov	r3, r0
 8005692:	2b00      	cmp	r3, #0
 8005694:	d016      	beq.n	80056c4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800569a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80056a0:	4610      	mov	r0, r2
 80056a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056a4:	e00e      	b.n	80056c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 f994 	bl	80059d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056ac:	e00a      	b.n	80056c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f000 f990 	bl	80059d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056b4:	e006      	b.n	80056c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 f98c 	bl	80059d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80056c2:	e175      	b.n	80059b0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056c4:	bf00      	nop
    return;
 80056c6:	e173      	b.n	80059b0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	f040 814f 	bne.w	8005970 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80056d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056d6:	f003 0310 	and.w	r3, r3, #16
 80056da:	2b00      	cmp	r3, #0
 80056dc:	f000 8148 	beq.w	8005970 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80056e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056e4:	f003 0310 	and.w	r3, r3, #16
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	f000 8141 	beq.w	8005970 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80056ee:	2300      	movs	r3, #0
 80056f0:	60bb      	str	r3, [r7, #8]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	60bb      	str	r3, [r7, #8]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	60bb      	str	r3, [r7, #8]
 8005702:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	695b      	ldr	r3, [r3, #20]
 800570a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800570e:	2b40      	cmp	r3, #64	@ 0x40
 8005710:	f040 80b6 	bne.w	8005880 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005720:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005724:	2b00      	cmp	r3, #0
 8005726:	f000 8145 	beq.w	80059b4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800572e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005732:	429a      	cmp	r2, r3
 8005734:	f080 813e 	bcs.w	80059b4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800573e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005744:	69db      	ldr	r3, [r3, #28]
 8005746:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800574a:	f000 8088 	beq.w	800585e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	330c      	adds	r3, #12
 8005754:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005758:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800575c:	e853 3f00 	ldrex	r3, [r3]
 8005760:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005764:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005768:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800576c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	330c      	adds	r3, #12
 8005776:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800577a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800577e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005782:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005786:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800578a:	e841 2300 	strex	r3, r2, [r1]
 800578e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005792:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005796:	2b00      	cmp	r3, #0
 8005798:	d1d9      	bne.n	800574e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	3314      	adds	r3, #20
 80057a0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80057a4:	e853 3f00 	ldrex	r3, [r3]
 80057a8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80057aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80057ac:	f023 0301 	bic.w	r3, r3, #1
 80057b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	3314      	adds	r3, #20
 80057ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80057be:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80057c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80057c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80057ca:	e841 2300 	strex	r3, r2, [r1]
 80057ce:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80057d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d1e1      	bne.n	800579a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	3314      	adds	r3, #20
 80057dc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80057e0:	e853 3f00 	ldrex	r3, [r3]
 80057e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80057e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80057e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	3314      	adds	r3, #20
 80057f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80057fa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80057fc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057fe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005800:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005802:	e841 2300 	strex	r3, r2, [r1]
 8005806:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005808:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1e3      	bne.n	80057d6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2220      	movs	r2, #32
 8005812:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	330c      	adds	r3, #12
 8005822:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005824:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005826:	e853 3f00 	ldrex	r3, [r3]
 800582a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800582c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800582e:	f023 0310 	bic.w	r3, r3, #16
 8005832:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	330c      	adds	r3, #12
 800583c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005840:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005842:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005844:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005846:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005848:	e841 2300 	strex	r3, r2, [r1]
 800584c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800584e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005850:	2b00      	cmp	r3, #0
 8005852:	d1e3      	bne.n	800581c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005858:	4618      	mov	r0, r3
 800585a:	f7fd fcbf 	bl	80031dc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2202      	movs	r2, #2
 8005862:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800586c:	b29b      	uxth	r3, r3
 800586e:	1ad3      	subs	r3, r2, r3
 8005870:	b29b      	uxth	r3, r3
 8005872:	4619      	mov	r1, r3
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f000 f8b7 	bl	80059e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800587a:	e09b      	b.n	80059b4 <HAL_UART_IRQHandler+0x518>
 800587c:	08005bed 	.word	0x08005bed
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005888:	b29b      	uxth	r3, r3
 800588a:	1ad3      	subs	r3, r2, r3
 800588c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005894:	b29b      	uxth	r3, r3
 8005896:	2b00      	cmp	r3, #0
 8005898:	f000 808e 	beq.w	80059b8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800589c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	f000 8089 	beq.w	80059b8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	330c      	adds	r3, #12
 80058ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058b0:	e853 3f00 	ldrex	r3, [r3]
 80058b4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80058b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80058bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	330c      	adds	r3, #12
 80058c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80058ca:	647a      	str	r2, [r7, #68]	@ 0x44
 80058cc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80058d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80058d2:	e841 2300 	strex	r3, r2, [r1]
 80058d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80058d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d1e3      	bne.n	80058a6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	3314      	adds	r3, #20
 80058e4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e8:	e853 3f00 	ldrex	r3, [r3]
 80058ec:	623b      	str	r3, [r7, #32]
   return(result);
 80058ee:	6a3b      	ldr	r3, [r7, #32]
 80058f0:	f023 0301 	bic.w	r3, r3, #1
 80058f4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	3314      	adds	r3, #20
 80058fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005902:	633a      	str	r2, [r7, #48]	@ 0x30
 8005904:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005906:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005908:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800590a:	e841 2300 	strex	r3, r2, [r1]
 800590e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005912:	2b00      	cmp	r3, #0
 8005914:	d1e3      	bne.n	80058de <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2220      	movs	r2, #32
 800591a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	330c      	adds	r3, #12
 800592a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	e853 3f00 	ldrex	r3, [r3]
 8005932:	60fb      	str	r3, [r7, #12]
   return(result);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f023 0310 	bic.w	r3, r3, #16
 800593a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	330c      	adds	r3, #12
 8005944:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005948:	61fa      	str	r2, [r7, #28]
 800594a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800594c:	69b9      	ldr	r1, [r7, #24]
 800594e:	69fa      	ldr	r2, [r7, #28]
 8005950:	e841 2300 	strex	r3, r2, [r1]
 8005954:	617b      	str	r3, [r7, #20]
   return(result);
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d1e3      	bne.n	8005924 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2202      	movs	r2, #2
 8005960:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005962:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005966:	4619      	mov	r1, r3
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 f83d 	bl	80059e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800596e:	e023      	b.n	80059b8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005970:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005974:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005978:	2b00      	cmp	r3, #0
 800597a:	d009      	beq.n	8005990 <HAL_UART_IRQHandler+0x4f4>
 800597c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005980:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005984:	2b00      	cmp	r3, #0
 8005986:	d003      	beq.n	8005990 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f000 f943 	bl	8005c14 <UART_Transmit_IT>
    return;
 800598e:	e014      	b.n	80059ba <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005990:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005994:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005998:	2b00      	cmp	r3, #0
 800599a:	d00e      	beq.n	80059ba <HAL_UART_IRQHandler+0x51e>
 800599c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d008      	beq.n	80059ba <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f000 f983 	bl	8005cb4 <UART_EndTransmit_IT>
    return;
 80059ae:	e004      	b.n	80059ba <HAL_UART_IRQHandler+0x51e>
    return;
 80059b0:	bf00      	nop
 80059b2:	e002      	b.n	80059ba <HAL_UART_IRQHandler+0x51e>
      return;
 80059b4:	bf00      	nop
 80059b6:	e000      	b.n	80059ba <HAL_UART_IRQHandler+0x51e>
      return;
 80059b8:	bf00      	nop
  }
}
 80059ba:	37e8      	adds	r7, #232	@ 0xe8
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}

080059c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80059c8:	bf00      	nop
 80059ca:	370c      	adds	r7, #12
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80059dc:	bf00      	nop
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	460b      	mov	r3, r1
 80059f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80059f4:	bf00      	nop
 80059f6:	370c      	adds	r7, #12
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b086      	sub	sp, #24
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	60f8      	str	r0, [r7, #12]
 8005a08:	60b9      	str	r1, [r7, #8]
 8005a0a:	603b      	str	r3, [r7, #0]
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a10:	e03b      	b.n	8005a8a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a12:	6a3b      	ldr	r3, [r7, #32]
 8005a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a18:	d037      	beq.n	8005a8a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a1a:	f7fc fda5 	bl	8002568 <HAL_GetTick>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	1ad3      	subs	r3, r2, r3
 8005a24:	6a3a      	ldr	r2, [r7, #32]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d302      	bcc.n	8005a30 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a2a:	6a3b      	ldr	r3, [r7, #32]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d101      	bne.n	8005a34 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a30:	2303      	movs	r3, #3
 8005a32:	e03a      	b.n	8005aaa <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	f003 0304 	and.w	r3, r3, #4
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d023      	beq.n	8005a8a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	2b80      	cmp	r3, #128	@ 0x80
 8005a46:	d020      	beq.n	8005a8a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	2b40      	cmp	r3, #64	@ 0x40
 8005a4c:	d01d      	beq.n	8005a8a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f003 0308 	and.w	r3, r3, #8
 8005a58:	2b08      	cmp	r3, #8
 8005a5a:	d116      	bne.n	8005a8a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	617b      	str	r3, [r7, #20]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	617b      	str	r3, [r7, #20]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	617b      	str	r3, [r7, #20]
 8005a70:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a72:	68f8      	ldr	r0, [r7, #12]
 8005a74:	f000 f857 	bl	8005b26 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2208      	movs	r2, #8
 8005a7c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e00f      	b.n	8005aaa <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	4013      	ands	r3, r2
 8005a94:	68ba      	ldr	r2, [r7, #8]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	bf0c      	ite	eq
 8005a9a:	2301      	moveq	r3, #1
 8005a9c:	2300      	movne	r3, #0
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	79fb      	ldrb	r3, [r7, #7]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d0b4      	beq.n	8005a12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3718      	adds	r7, #24
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}

08005ab2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ab2:	b480      	push	{r7}
 8005ab4:	b085      	sub	sp, #20
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	60f8      	str	r0, [r7, #12]
 8005aba:	60b9      	str	r1, [r7, #8]
 8005abc:	4613      	mov	r3, r2
 8005abe:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	68ba      	ldr	r2, [r7, #8]
 8005ac4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	88fa      	ldrh	r2, [r7, #6]
 8005aca:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	88fa      	ldrh	r2, [r7, #6]
 8005ad0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2222      	movs	r2, #34	@ 0x22
 8005adc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	691b      	ldr	r3, [r3, #16]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d007      	beq.n	8005af8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	68da      	ldr	r2, [r3, #12]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005af6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	695a      	ldr	r2, [r3, #20]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f042 0201 	orr.w	r2, r2, #1
 8005b06:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	68da      	ldr	r2, [r3, #12]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f042 0220 	orr.w	r2, r2, #32
 8005b16:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3714      	adds	r7, #20
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr

08005b26 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b26:	b480      	push	{r7}
 8005b28:	b095      	sub	sp, #84	@ 0x54
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	330c      	adds	r3, #12
 8005b34:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b38:	e853 3f00 	ldrex	r3, [r3]
 8005b3c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b40:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b44:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	330c      	adds	r3, #12
 8005b4c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005b4e:	643a      	str	r2, [r7, #64]	@ 0x40
 8005b50:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b52:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005b54:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b56:	e841 2300 	strex	r3, r2, [r1]
 8005b5a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005b5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d1e5      	bne.n	8005b2e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	3314      	adds	r3, #20
 8005b68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b6a:	6a3b      	ldr	r3, [r7, #32]
 8005b6c:	e853 3f00 	ldrex	r3, [r3]
 8005b70:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	f023 0301 	bic.w	r3, r3, #1
 8005b78:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	3314      	adds	r3, #20
 8005b80:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b84:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b86:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b8a:	e841 2300 	strex	r3, r2, [r1]
 8005b8e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d1e5      	bne.n	8005b62 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d119      	bne.n	8005bd2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	330c      	adds	r3, #12
 8005ba4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	e853 3f00 	ldrex	r3, [r3]
 8005bac:	60bb      	str	r3, [r7, #8]
   return(result);
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	f023 0310 	bic.w	r3, r3, #16
 8005bb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	330c      	adds	r3, #12
 8005bbc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005bbe:	61ba      	str	r2, [r7, #24]
 8005bc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc2:	6979      	ldr	r1, [r7, #20]
 8005bc4:	69ba      	ldr	r2, [r7, #24]
 8005bc6:	e841 2300 	strex	r3, r2, [r1]
 8005bca:	613b      	str	r3, [r7, #16]
   return(result);
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d1e5      	bne.n	8005b9e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2220      	movs	r2, #32
 8005bd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005be0:	bf00      	nop
 8005be2:	3754      	adds	r7, #84	@ 0x54
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bf8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2200      	movs	r2, #0
 8005c04:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c06:	68f8      	ldr	r0, [r7, #12]
 8005c08:	f7ff fee4 	bl	80059d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c0c:	bf00      	nop
 8005c0e:	3710      	adds	r7, #16
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b085      	sub	sp, #20
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	2b21      	cmp	r3, #33	@ 0x21
 8005c26:	d13e      	bne.n	8005ca6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c30:	d114      	bne.n	8005c5c <UART_Transmit_IT+0x48>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	691b      	ldr	r3, [r3, #16]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d110      	bne.n	8005c5c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a1b      	ldr	r3, [r3, #32]
 8005c3e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	881b      	ldrh	r3, [r3, #0]
 8005c44:	461a      	mov	r2, r3
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c4e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6a1b      	ldr	r3, [r3, #32]
 8005c54:	1c9a      	adds	r2, r3, #2
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	621a      	str	r2, [r3, #32]
 8005c5a:	e008      	b.n	8005c6e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6a1b      	ldr	r3, [r3, #32]
 8005c60:	1c59      	adds	r1, r3, #1
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	6211      	str	r1, [r2, #32]
 8005c66:	781a      	ldrb	r2, [r3, #0]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	3b01      	subs	r3, #1
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d10f      	bne.n	8005ca2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	68da      	ldr	r2, [r3, #12]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005c90:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	68da      	ldr	r2, [r3, #12]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005ca0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	e000      	b.n	8005ca8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005ca6:	2302      	movs	r3, #2
  }
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3714      	adds	r7, #20
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr

08005cb4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b082      	sub	sp, #8
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	68da      	ldr	r2, [r3, #12]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005cca:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2220      	movs	r2, #32
 8005cd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f7ff fe73 	bl	80059c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005cda:	2300      	movs	r3, #0
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3708      	adds	r7, #8
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b08c      	sub	sp, #48	@ 0x30
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	2b22      	cmp	r3, #34	@ 0x22
 8005cf6:	f040 80ae 	bne.w	8005e56 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d02:	d117      	bne.n	8005d34 <UART_Receive_IT+0x50>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	691b      	ldr	r3, [r3, #16]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d113      	bne.n	8005d34 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d14:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d22:	b29a      	uxth	r2, r3
 8005d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d26:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d2c:	1c9a      	adds	r2, r3, #2
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	629a      	str	r2, [r3, #40]	@ 0x28
 8005d32:	e026      	b.n	8005d82 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d38:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d46:	d007      	beq.n	8005d58 <UART_Receive_IT+0x74>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d10a      	bne.n	8005d66 <UART_Receive_IT+0x82>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	691b      	ldr	r3, [r3, #16]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d106      	bne.n	8005d66 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	b2da      	uxtb	r2, r3
 8005d60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d62:	701a      	strb	r2, [r3, #0]
 8005d64:	e008      	b.n	8005d78 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d72:	b2da      	uxtb	r2, r3
 8005d74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d76:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d7c:	1c5a      	adds	r2, r3, #1
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	3b01      	subs	r3, #1
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	4619      	mov	r1, r3
 8005d90:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d15d      	bne.n	8005e52 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	68da      	ldr	r2, [r3, #12]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f022 0220 	bic.w	r2, r2, #32
 8005da4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	68da      	ldr	r2, [r3, #12]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005db4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	695a      	ldr	r2, [r3, #20]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f022 0201 	bic.w	r2, r2, #1
 8005dc4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2220      	movs	r2, #32
 8005dca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d135      	bne.n	8005e48 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	330c      	adds	r3, #12
 8005de8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	e853 3f00 	ldrex	r3, [r3]
 8005df0:	613b      	str	r3, [r7, #16]
   return(result);
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	f023 0310 	bic.w	r3, r3, #16
 8005df8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	330c      	adds	r3, #12
 8005e00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e02:	623a      	str	r2, [r7, #32]
 8005e04:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e06:	69f9      	ldr	r1, [r7, #28]
 8005e08:	6a3a      	ldr	r2, [r7, #32]
 8005e0a:	e841 2300 	strex	r3, r2, [r1]
 8005e0e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e10:	69bb      	ldr	r3, [r7, #24]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d1e5      	bne.n	8005de2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 0310 	and.w	r3, r3, #16
 8005e20:	2b10      	cmp	r3, #16
 8005e22:	d10a      	bne.n	8005e3a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e24:	2300      	movs	r3, #0
 8005e26:	60fb      	str	r3, [r7, #12]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	60fb      	str	r3, [r7, #12]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	60fb      	str	r3, [r7, #12]
 8005e38:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005e3e:	4619      	mov	r1, r3
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f7ff fdd1 	bl	80059e8 <HAL_UARTEx_RxEventCallback>
 8005e46:	e002      	b.n	8005e4e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f001 fc1f 	bl	800768c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	e002      	b.n	8005e58 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005e52:	2300      	movs	r3, #0
 8005e54:	e000      	b.n	8005e58 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005e56:	2302      	movs	r3, #2
  }
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3730      	adds	r7, #48	@ 0x30
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e64:	b0c0      	sub	sp, #256	@ 0x100
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	691b      	ldr	r3, [r3, #16]
 8005e74:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e7c:	68d9      	ldr	r1, [r3, #12]
 8005e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	ea40 0301 	orr.w	r3, r0, r1
 8005e88:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e8e:	689a      	ldr	r2, [r3, #8]
 8005e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	431a      	orrs	r2, r3
 8005e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e9c:	695b      	ldr	r3, [r3, #20]
 8005e9e:	431a      	orrs	r2, r3
 8005ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ea4:	69db      	ldr	r3, [r3, #28]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005eb8:	f021 010c 	bic.w	r1, r1, #12
 8005ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005ec6:	430b      	orrs	r3, r1
 8005ec8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	695b      	ldr	r3, [r3, #20]
 8005ed2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005ed6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eda:	6999      	ldr	r1, [r3, #24]
 8005edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	ea40 0301 	orr.w	r3, r0, r1
 8005ee6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	4b8f      	ldr	r3, [pc, #572]	@ (800612c <UART_SetConfig+0x2cc>)
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d005      	beq.n	8005f00 <UART_SetConfig+0xa0>
 8005ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	4b8d      	ldr	r3, [pc, #564]	@ (8006130 <UART_SetConfig+0x2d0>)
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d104      	bne.n	8005f0a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005f00:	f7fe fb86 	bl	8004610 <HAL_RCC_GetPCLK2Freq>
 8005f04:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005f08:	e003      	b.n	8005f12 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f0a:	f7fe fb6d 	bl	80045e8 <HAL_RCC_GetPCLK1Freq>
 8005f0e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f16:	69db      	ldr	r3, [r3, #28]
 8005f18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f1c:	f040 810c 	bne.w	8006138 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f24:	2200      	movs	r2, #0
 8005f26:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005f2a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005f2e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005f32:	4622      	mov	r2, r4
 8005f34:	462b      	mov	r3, r5
 8005f36:	1891      	adds	r1, r2, r2
 8005f38:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005f3a:	415b      	adcs	r3, r3
 8005f3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005f3e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005f42:	4621      	mov	r1, r4
 8005f44:	eb12 0801 	adds.w	r8, r2, r1
 8005f48:	4629      	mov	r1, r5
 8005f4a:	eb43 0901 	adc.w	r9, r3, r1
 8005f4e:	f04f 0200 	mov.w	r2, #0
 8005f52:	f04f 0300 	mov.w	r3, #0
 8005f56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f62:	4690      	mov	r8, r2
 8005f64:	4699      	mov	r9, r3
 8005f66:	4623      	mov	r3, r4
 8005f68:	eb18 0303 	adds.w	r3, r8, r3
 8005f6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005f70:	462b      	mov	r3, r5
 8005f72:	eb49 0303 	adc.w	r3, r9, r3
 8005f76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005f86:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005f8a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005f8e:	460b      	mov	r3, r1
 8005f90:	18db      	adds	r3, r3, r3
 8005f92:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f94:	4613      	mov	r3, r2
 8005f96:	eb42 0303 	adc.w	r3, r2, r3
 8005f9a:	657b      	str	r3, [r7, #84]	@ 0x54
 8005f9c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005fa0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005fa4:	f7fa fe58 	bl	8000c58 <__aeabi_uldivmod>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	460b      	mov	r3, r1
 8005fac:	4b61      	ldr	r3, [pc, #388]	@ (8006134 <UART_SetConfig+0x2d4>)
 8005fae:	fba3 2302 	umull	r2, r3, r3, r2
 8005fb2:	095b      	lsrs	r3, r3, #5
 8005fb4:	011c      	lsls	r4, r3, #4
 8005fb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005fc0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005fc4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005fc8:	4642      	mov	r2, r8
 8005fca:	464b      	mov	r3, r9
 8005fcc:	1891      	adds	r1, r2, r2
 8005fce:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005fd0:	415b      	adcs	r3, r3
 8005fd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fd4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005fd8:	4641      	mov	r1, r8
 8005fda:	eb12 0a01 	adds.w	sl, r2, r1
 8005fde:	4649      	mov	r1, r9
 8005fe0:	eb43 0b01 	adc.w	fp, r3, r1
 8005fe4:	f04f 0200 	mov.w	r2, #0
 8005fe8:	f04f 0300 	mov.w	r3, #0
 8005fec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005ff0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005ff4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ff8:	4692      	mov	sl, r2
 8005ffa:	469b      	mov	fp, r3
 8005ffc:	4643      	mov	r3, r8
 8005ffe:	eb1a 0303 	adds.w	r3, sl, r3
 8006002:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006006:	464b      	mov	r3, r9
 8006008:	eb4b 0303 	adc.w	r3, fp, r3
 800600c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	2200      	movs	r2, #0
 8006018:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800601c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006020:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006024:	460b      	mov	r3, r1
 8006026:	18db      	adds	r3, r3, r3
 8006028:	643b      	str	r3, [r7, #64]	@ 0x40
 800602a:	4613      	mov	r3, r2
 800602c:	eb42 0303 	adc.w	r3, r2, r3
 8006030:	647b      	str	r3, [r7, #68]	@ 0x44
 8006032:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006036:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800603a:	f7fa fe0d 	bl	8000c58 <__aeabi_uldivmod>
 800603e:	4602      	mov	r2, r0
 8006040:	460b      	mov	r3, r1
 8006042:	4611      	mov	r1, r2
 8006044:	4b3b      	ldr	r3, [pc, #236]	@ (8006134 <UART_SetConfig+0x2d4>)
 8006046:	fba3 2301 	umull	r2, r3, r3, r1
 800604a:	095b      	lsrs	r3, r3, #5
 800604c:	2264      	movs	r2, #100	@ 0x64
 800604e:	fb02 f303 	mul.w	r3, r2, r3
 8006052:	1acb      	subs	r3, r1, r3
 8006054:	00db      	lsls	r3, r3, #3
 8006056:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800605a:	4b36      	ldr	r3, [pc, #216]	@ (8006134 <UART_SetConfig+0x2d4>)
 800605c:	fba3 2302 	umull	r2, r3, r3, r2
 8006060:	095b      	lsrs	r3, r3, #5
 8006062:	005b      	lsls	r3, r3, #1
 8006064:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006068:	441c      	add	r4, r3
 800606a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800606e:	2200      	movs	r2, #0
 8006070:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006074:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006078:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800607c:	4642      	mov	r2, r8
 800607e:	464b      	mov	r3, r9
 8006080:	1891      	adds	r1, r2, r2
 8006082:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006084:	415b      	adcs	r3, r3
 8006086:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006088:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800608c:	4641      	mov	r1, r8
 800608e:	1851      	adds	r1, r2, r1
 8006090:	6339      	str	r1, [r7, #48]	@ 0x30
 8006092:	4649      	mov	r1, r9
 8006094:	414b      	adcs	r3, r1
 8006096:	637b      	str	r3, [r7, #52]	@ 0x34
 8006098:	f04f 0200 	mov.w	r2, #0
 800609c:	f04f 0300 	mov.w	r3, #0
 80060a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80060a4:	4659      	mov	r1, fp
 80060a6:	00cb      	lsls	r3, r1, #3
 80060a8:	4651      	mov	r1, sl
 80060aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060ae:	4651      	mov	r1, sl
 80060b0:	00ca      	lsls	r2, r1, #3
 80060b2:	4610      	mov	r0, r2
 80060b4:	4619      	mov	r1, r3
 80060b6:	4603      	mov	r3, r0
 80060b8:	4642      	mov	r2, r8
 80060ba:	189b      	adds	r3, r3, r2
 80060bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80060c0:	464b      	mov	r3, r9
 80060c2:	460a      	mov	r2, r1
 80060c4:	eb42 0303 	adc.w	r3, r2, r3
 80060c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80060cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80060d8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80060dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80060e0:	460b      	mov	r3, r1
 80060e2:	18db      	adds	r3, r3, r3
 80060e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060e6:	4613      	mov	r3, r2
 80060e8:	eb42 0303 	adc.w	r3, r2, r3
 80060ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80060ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80060f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80060f6:	f7fa fdaf 	bl	8000c58 <__aeabi_uldivmod>
 80060fa:	4602      	mov	r2, r0
 80060fc:	460b      	mov	r3, r1
 80060fe:	4b0d      	ldr	r3, [pc, #52]	@ (8006134 <UART_SetConfig+0x2d4>)
 8006100:	fba3 1302 	umull	r1, r3, r3, r2
 8006104:	095b      	lsrs	r3, r3, #5
 8006106:	2164      	movs	r1, #100	@ 0x64
 8006108:	fb01 f303 	mul.w	r3, r1, r3
 800610c:	1ad3      	subs	r3, r2, r3
 800610e:	00db      	lsls	r3, r3, #3
 8006110:	3332      	adds	r3, #50	@ 0x32
 8006112:	4a08      	ldr	r2, [pc, #32]	@ (8006134 <UART_SetConfig+0x2d4>)
 8006114:	fba2 2303 	umull	r2, r3, r2, r3
 8006118:	095b      	lsrs	r3, r3, #5
 800611a:	f003 0207 	and.w	r2, r3, #7
 800611e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4422      	add	r2, r4
 8006126:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006128:	e106      	b.n	8006338 <UART_SetConfig+0x4d8>
 800612a:	bf00      	nop
 800612c:	40011000 	.word	0x40011000
 8006130:	40011400 	.word	0x40011400
 8006134:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006138:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800613c:	2200      	movs	r2, #0
 800613e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006142:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006146:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800614a:	4642      	mov	r2, r8
 800614c:	464b      	mov	r3, r9
 800614e:	1891      	adds	r1, r2, r2
 8006150:	6239      	str	r1, [r7, #32]
 8006152:	415b      	adcs	r3, r3
 8006154:	627b      	str	r3, [r7, #36]	@ 0x24
 8006156:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800615a:	4641      	mov	r1, r8
 800615c:	1854      	adds	r4, r2, r1
 800615e:	4649      	mov	r1, r9
 8006160:	eb43 0501 	adc.w	r5, r3, r1
 8006164:	f04f 0200 	mov.w	r2, #0
 8006168:	f04f 0300 	mov.w	r3, #0
 800616c:	00eb      	lsls	r3, r5, #3
 800616e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006172:	00e2      	lsls	r2, r4, #3
 8006174:	4614      	mov	r4, r2
 8006176:	461d      	mov	r5, r3
 8006178:	4643      	mov	r3, r8
 800617a:	18e3      	adds	r3, r4, r3
 800617c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006180:	464b      	mov	r3, r9
 8006182:	eb45 0303 	adc.w	r3, r5, r3
 8006186:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800618a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006196:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800619a:	f04f 0200 	mov.w	r2, #0
 800619e:	f04f 0300 	mov.w	r3, #0
 80061a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80061a6:	4629      	mov	r1, r5
 80061a8:	008b      	lsls	r3, r1, #2
 80061aa:	4621      	mov	r1, r4
 80061ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061b0:	4621      	mov	r1, r4
 80061b2:	008a      	lsls	r2, r1, #2
 80061b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80061b8:	f7fa fd4e 	bl	8000c58 <__aeabi_uldivmod>
 80061bc:	4602      	mov	r2, r0
 80061be:	460b      	mov	r3, r1
 80061c0:	4b60      	ldr	r3, [pc, #384]	@ (8006344 <UART_SetConfig+0x4e4>)
 80061c2:	fba3 2302 	umull	r2, r3, r3, r2
 80061c6:	095b      	lsrs	r3, r3, #5
 80061c8:	011c      	lsls	r4, r3, #4
 80061ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061ce:	2200      	movs	r2, #0
 80061d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80061d4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80061d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80061dc:	4642      	mov	r2, r8
 80061de:	464b      	mov	r3, r9
 80061e0:	1891      	adds	r1, r2, r2
 80061e2:	61b9      	str	r1, [r7, #24]
 80061e4:	415b      	adcs	r3, r3
 80061e6:	61fb      	str	r3, [r7, #28]
 80061e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80061ec:	4641      	mov	r1, r8
 80061ee:	1851      	adds	r1, r2, r1
 80061f0:	6139      	str	r1, [r7, #16]
 80061f2:	4649      	mov	r1, r9
 80061f4:	414b      	adcs	r3, r1
 80061f6:	617b      	str	r3, [r7, #20]
 80061f8:	f04f 0200 	mov.w	r2, #0
 80061fc:	f04f 0300 	mov.w	r3, #0
 8006200:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006204:	4659      	mov	r1, fp
 8006206:	00cb      	lsls	r3, r1, #3
 8006208:	4651      	mov	r1, sl
 800620a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800620e:	4651      	mov	r1, sl
 8006210:	00ca      	lsls	r2, r1, #3
 8006212:	4610      	mov	r0, r2
 8006214:	4619      	mov	r1, r3
 8006216:	4603      	mov	r3, r0
 8006218:	4642      	mov	r2, r8
 800621a:	189b      	adds	r3, r3, r2
 800621c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006220:	464b      	mov	r3, r9
 8006222:	460a      	mov	r2, r1
 8006224:	eb42 0303 	adc.w	r3, r2, r3
 8006228:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800622c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	2200      	movs	r2, #0
 8006234:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006236:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006238:	f04f 0200 	mov.w	r2, #0
 800623c:	f04f 0300 	mov.w	r3, #0
 8006240:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006244:	4649      	mov	r1, r9
 8006246:	008b      	lsls	r3, r1, #2
 8006248:	4641      	mov	r1, r8
 800624a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800624e:	4641      	mov	r1, r8
 8006250:	008a      	lsls	r2, r1, #2
 8006252:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006256:	f7fa fcff 	bl	8000c58 <__aeabi_uldivmod>
 800625a:	4602      	mov	r2, r0
 800625c:	460b      	mov	r3, r1
 800625e:	4611      	mov	r1, r2
 8006260:	4b38      	ldr	r3, [pc, #224]	@ (8006344 <UART_SetConfig+0x4e4>)
 8006262:	fba3 2301 	umull	r2, r3, r3, r1
 8006266:	095b      	lsrs	r3, r3, #5
 8006268:	2264      	movs	r2, #100	@ 0x64
 800626a:	fb02 f303 	mul.w	r3, r2, r3
 800626e:	1acb      	subs	r3, r1, r3
 8006270:	011b      	lsls	r3, r3, #4
 8006272:	3332      	adds	r3, #50	@ 0x32
 8006274:	4a33      	ldr	r2, [pc, #204]	@ (8006344 <UART_SetConfig+0x4e4>)
 8006276:	fba2 2303 	umull	r2, r3, r2, r3
 800627a:	095b      	lsrs	r3, r3, #5
 800627c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006280:	441c      	add	r4, r3
 8006282:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006286:	2200      	movs	r2, #0
 8006288:	673b      	str	r3, [r7, #112]	@ 0x70
 800628a:	677a      	str	r2, [r7, #116]	@ 0x74
 800628c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006290:	4642      	mov	r2, r8
 8006292:	464b      	mov	r3, r9
 8006294:	1891      	adds	r1, r2, r2
 8006296:	60b9      	str	r1, [r7, #8]
 8006298:	415b      	adcs	r3, r3
 800629a:	60fb      	str	r3, [r7, #12]
 800629c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80062a0:	4641      	mov	r1, r8
 80062a2:	1851      	adds	r1, r2, r1
 80062a4:	6039      	str	r1, [r7, #0]
 80062a6:	4649      	mov	r1, r9
 80062a8:	414b      	adcs	r3, r1
 80062aa:	607b      	str	r3, [r7, #4]
 80062ac:	f04f 0200 	mov.w	r2, #0
 80062b0:	f04f 0300 	mov.w	r3, #0
 80062b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80062b8:	4659      	mov	r1, fp
 80062ba:	00cb      	lsls	r3, r1, #3
 80062bc:	4651      	mov	r1, sl
 80062be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062c2:	4651      	mov	r1, sl
 80062c4:	00ca      	lsls	r2, r1, #3
 80062c6:	4610      	mov	r0, r2
 80062c8:	4619      	mov	r1, r3
 80062ca:	4603      	mov	r3, r0
 80062cc:	4642      	mov	r2, r8
 80062ce:	189b      	adds	r3, r3, r2
 80062d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80062d2:	464b      	mov	r3, r9
 80062d4:	460a      	mov	r2, r1
 80062d6:	eb42 0303 	adc.w	r3, r2, r3
 80062da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80062dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	663b      	str	r3, [r7, #96]	@ 0x60
 80062e6:	667a      	str	r2, [r7, #100]	@ 0x64
 80062e8:	f04f 0200 	mov.w	r2, #0
 80062ec:	f04f 0300 	mov.w	r3, #0
 80062f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80062f4:	4649      	mov	r1, r9
 80062f6:	008b      	lsls	r3, r1, #2
 80062f8:	4641      	mov	r1, r8
 80062fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062fe:	4641      	mov	r1, r8
 8006300:	008a      	lsls	r2, r1, #2
 8006302:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006306:	f7fa fca7 	bl	8000c58 <__aeabi_uldivmod>
 800630a:	4602      	mov	r2, r0
 800630c:	460b      	mov	r3, r1
 800630e:	4b0d      	ldr	r3, [pc, #52]	@ (8006344 <UART_SetConfig+0x4e4>)
 8006310:	fba3 1302 	umull	r1, r3, r3, r2
 8006314:	095b      	lsrs	r3, r3, #5
 8006316:	2164      	movs	r1, #100	@ 0x64
 8006318:	fb01 f303 	mul.w	r3, r1, r3
 800631c:	1ad3      	subs	r3, r2, r3
 800631e:	011b      	lsls	r3, r3, #4
 8006320:	3332      	adds	r3, #50	@ 0x32
 8006322:	4a08      	ldr	r2, [pc, #32]	@ (8006344 <UART_SetConfig+0x4e4>)
 8006324:	fba2 2303 	umull	r2, r3, r2, r3
 8006328:	095b      	lsrs	r3, r3, #5
 800632a:	f003 020f 	and.w	r2, r3, #15
 800632e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4422      	add	r2, r4
 8006336:	609a      	str	r2, [r3, #8]
}
 8006338:	bf00      	nop
 800633a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800633e:	46bd      	mov	sp, r7
 8006340:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006344:	51eb851f 	.word	0x51eb851f

08006348 <Button_Init>:
 * @brief  Initialize module button
 * @param  None
 * @retval None
 */
void
Button_Init(void) {
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af02      	add	r7, sp, #8
    for (uint8_t i = 0; i < BUTTON_MAX; i++) {
 800634e:	2300      	movs	r3, #0
 8006350:	71fb      	strb	r3, [r7, #7]
 8006352:	e040      	b.n	80063d6 <Button_Init+0x8e>
		kpad[i].index = i;
 8006354:	79fa      	ldrb	r2, [r7, #7]
 8006356:	4929      	ldr	r1, [pc, #164]	@ (80063fc <Button_Init+0xb4>)
 8006358:	4613      	mov	r3, r2
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	4413      	add	r3, r2
 800635e:	009b      	lsls	r3, r3, #2
 8006360:	440b      	add	r3, r1
 8006362:	330a      	adds	r3, #10
 8006364:	79fa      	ldrb	r2, [r7, #7]
 8006366:	701a      	strb	r2, [r3, #0]
		kpad[i].mode = BUTTON_TYPE_LOGIC;
 8006368:	79fa      	ldrb	r2, [r7, #7]
 800636a:	4924      	ldr	r1, [pc, #144]	@ (80063fc <Button_Init+0xb4>)
 800636c:	4613      	mov	r3, r2
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	4413      	add	r3, r2
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	440b      	add	r3, r1
 8006376:	330b      	adds	r3, #11
 8006378:	2201      	movs	r2, #1
 800637a:	701a      	strb	r2, [r3, #0]
		kpad[i].scanBtnFunc = ButtonScanTypeEdge;
 800637c:	79fa      	ldrb	r2, [r7, #7]
 800637e:	491f      	ldr	r1, [pc, #124]	@ (80063fc <Button_Init+0xb4>)
 8006380:	4613      	mov	r3, r2
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	4413      	add	r3, r2
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	440b      	add	r3, r1
 800638a:	3310      	adds	r3, #16
 800638c:	4a1c      	ldr	r2, [pc, #112]	@ (8006400 <Button_Init+0xb8>)
 800638e:	601a      	str	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(pinBtnPad[i].port, pinBtnPad[i].pin) == pinBtnPad[i].logicPress) {
 8006390:	79fb      	ldrb	r3, [r7, #7]
 8006392:	4a1c      	ldr	r2, [pc, #112]	@ (8006404 <Button_Init+0xbc>)
 8006394:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8006398:	79fb      	ldrb	r3, [r7, #7]
 800639a:	491a      	ldr	r1, [pc, #104]	@ (8006404 <Button_Init+0xbc>)
 800639c:	00db      	lsls	r3, r3, #3
 800639e:	440b      	add	r3, r1
 80063a0:	889b      	ldrh	r3, [r3, #4]
 80063a2:	4619      	mov	r1, r3
 80063a4:	4610      	mov	r0, r2
 80063a6:	f7fd fc7d 	bl	8003ca4 <HAL_GPIO_ReadPin>
 80063aa:	4603      	mov	r3, r0
 80063ac:	4619      	mov	r1, r3
 80063ae:	79fb      	ldrb	r3, [r7, #7]
 80063b0:	4a14      	ldr	r2, [pc, #80]	@ (8006404 <Button_Init+0xbc>)
 80063b2:	00db      	lsls	r3, r3, #3
 80063b4:	4413      	add	r3, r2
 80063b6:	799b      	ldrb	r3, [r3, #6]
 80063b8:	4299      	cmp	r1, r3
 80063ba:	d109      	bne.n	80063d0 <Button_Init+0x88>
			kpad[i].sold = PIN_ACTIVE;
 80063bc:	79fa      	ldrb	r2, [r7, #7]
 80063be:	490f      	ldr	r1, [pc, #60]	@ (80063fc <Button_Init+0xb4>)
 80063c0:	4613      	mov	r3, r2
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	4413      	add	r3, r2
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	440b      	add	r3, r1
 80063ca:	3309      	adds	r3, #9
 80063cc:	2201      	movs	r2, #1
 80063ce:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < BUTTON_MAX; i++) {
 80063d0:	79fb      	ldrb	r3, [r7, #7]
 80063d2:	3301      	adds	r3, #1
 80063d4:	71fb      	strb	r3, [r7, #7]
 80063d6:	79fb      	ldrb	r3, [r7, #7]
 80063d8:	2b07      	cmp	r3, #7
 80063da:	d9bb      	bls.n	8006354 <Button_Init+0xc>
		}
	}

    kpad[DOOR_SENSOR_ID].mode = BUTTON_TYPE_EDGE;
 80063dc:	4b07      	ldr	r3, [pc, #28]	@ (80063fc <Button_Init+0xb4>)
 80063de:	2202      	movs	r2, #2
 80063e0:	f883 2097 	strb.w	r2, [r3, #151]	@ 0x97
    TimerStart("", KEY_TIME_SCAN, TIMER_REPEAT_FOREVER, ButtonScan, NULL);
 80063e4:	2300      	movs	r3, #0
 80063e6:	9300      	str	r3, [sp, #0]
 80063e8:	4b07      	ldr	r3, [pc, #28]	@ (8006408 <Button_Init+0xc0>)
 80063ea:	22ff      	movs	r2, #255	@ 0xff
 80063ec:	2105      	movs	r1, #5
 80063ee:	4807      	ldr	r0, [pc, #28]	@ (800640c <Button_Init+0xc4>)
 80063f0:	f001 fb9c 	bl	8007b2c <TimerStart>
}
 80063f4:	bf00      	nop
 80063f6:	3708      	adds	r7, #8
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}
 80063fc:	20000664 	.word	0x20000664
 8006400:	08006459 	.word	0x08006459
 8006404:	20000014 	.word	0x20000014
 8006408:	0800666d 	.word	0x0800666d
 800640c:	0800c9f8 	.word	0x0800c9f8

08006410 <ButtonIndicateRegisterCallback>:
 * @retval None
 */
void
ButtonIndicateRegisterCallback(
	button_indicate_callback procButIndicate
) {
 8006410:	b480      	push	{r7}
 8006412:	b083      	sub	sp, #12
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
	pButtonIndicateCallbacks = procButIndicate;
 8006418:	4a04      	ldr	r2, [pc, #16]	@ (800642c <ButtonIndicateRegisterCallback+0x1c>)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6013      	str	r3, [r2, #0]
}
 800641e:	bf00      	nop
 8006420:	370c      	adds	r7, #12
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr
 800642a:	bf00      	nop
 800642c:	20000704 	.word	0x20000704

08006430 <Button_RegisterEventCallback>:
 */
void
Button_RegisterEventCallback(
    button_event_t buttonEvent,
    button_event_callback procbuttonEvent
) {
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	4603      	mov	r3, r0
 8006438:	6039      	str	r1, [r7, #0]
 800643a:	71fb      	strb	r3, [r7, #7]
    pEventCallbacks[buttonEvent] = procbuttonEvent;
 800643c:	79fb      	ldrb	r3, [r7, #7]
 800643e:	4905      	ldr	r1, [pc, #20]	@ (8006454 <Button_RegisterEventCallback+0x24>)
 8006440:	683a      	ldr	r2, [r7, #0]
 8006442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006446:	bf00      	nop
 8006448:	370c      	adds	r7, #12
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr
 8006452:	bf00      	nop
 8006454:	20000708 	.word	0x20000708

08006458 <ButtonScanTypeEdge>:
 * @retval None
 */
void
ButtonScanTypeEdge(
    void *arg
) {
 8006458:	b580      	push	{r7, lr}
 800645a:	b084      	sub	sp, #16
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
	buttondat_p bt = (buttondat_p)arg;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	60fb      	str	r3, [r7, #12]
    uint8_t i = bt->index;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	7a9b      	ldrb	r3, [r3, #10]
 8006468:	72fb      	strb	r3, [r7, #11]
    
    if (HAL_GPIO_ReadPin(pinBtnPad[i].port, pinBtnPad[i].pin) == pinBtnPad[i].logicPress) {
 800646a:	7afb      	ldrb	r3, [r7, #11]
 800646c:	4a7c      	ldr	r2, [pc, #496]	@ (8006660 <ButtonScanTypeEdge+0x208>)
 800646e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8006472:	7afb      	ldrb	r3, [r7, #11]
 8006474:	497a      	ldr	r1, [pc, #488]	@ (8006660 <ButtonScanTypeEdge+0x208>)
 8006476:	00db      	lsls	r3, r3, #3
 8006478:	440b      	add	r3, r1
 800647a:	889b      	ldrh	r3, [r3, #4]
 800647c:	4619      	mov	r1, r3
 800647e:	4610      	mov	r0, r2
 8006480:	f7fd fc10 	bl	8003ca4 <HAL_GPIO_ReadPin>
 8006484:	4603      	mov	r3, r0
 8006486:	4619      	mov	r1, r3
 8006488:	7afb      	ldrb	r3, [r7, #11]
 800648a:	4a75      	ldr	r2, [pc, #468]	@ (8006660 <ButtonScanTypeEdge+0x208>)
 800648c:	00db      	lsls	r3, r3, #3
 800648e:	4413      	add	r3, r2
 8006490:	799b      	ldrb	r3, [r3, #6]
 8006492:	4299      	cmp	r1, r3
 8006494:	d10a      	bne.n	80064ac <ButtonScanTypeEdge+0x54>
        if (bt->countActive != 0xFFU) {
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	7b5b      	ldrb	r3, [r3, #13]
 800649a:	2bff      	cmp	r3, #255	@ 0xff
 800649c:	d013      	beq.n	80064c6 <ButtonScanTypeEdge+0x6e>
            bt->countActive++;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	7b5b      	ldrb	r3, [r3, #13]
 80064a2:	3301      	adds	r3, #1
 80064a4:	b2da      	uxtb	r2, r3
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	735a      	strb	r2, [r3, #13]
 80064aa:	e00c      	b.n	80064c6 <ButtonScanTypeEdge+0x6e>
        }
    }
    else {
        if (bt->countInactive != 0xFFU) {
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	7b1b      	ldrb	r3, [r3, #12]
 80064b0:	2bff      	cmp	r3, #255	@ 0xff
 80064b2:	d005      	beq.n	80064c0 <ButtonScanTypeEdge+0x68>
            bt->countInactive++;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	7b1b      	ldrb	r3, [r3, #12]
 80064b8:	3301      	adds	r3, #1
 80064ba:	b2da      	uxtb	r2, r3
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	731a      	strb	r2, [r3, #12]
        }
        
        bt->countActive = 0;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2200      	movs	r2, #0
 80064c4:	735a      	strb	r2, [r3, #13]
    }
    
    if (bt->countInactive >= KEY_COUNT_IS_PRESS) {
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	7b1b      	ldrb	r3, [r3, #12]
 80064ca:	2b09      	cmp	r3, #9
 80064cc:	d958      	bls.n	8006580 <ButtonScanTypeEdge+0x128>
        if (bt->sold == PIN_ACTIVE) {
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	7a5b      	ldrb	r3, [r3, #9]
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d118      	bne.n	8006508 <ButtonScanTypeEdge+0xb0>
            bt->sold = PIN_UNACTIVE;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2200      	movs	r2, #0
 80064da:	725a      	strb	r2, [r3, #9]
            
            if ((pEventCallbacks[BUTTON_EVENT_EDGE] != NULL) && (bt->mode & BUTTON_TYPE_EDGE)) {
 80064dc:	4b61      	ldr	r3, [pc, #388]	@ (8006664 <ButtonScanTypeEdge+0x20c>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d00b      	beq.n	80064fc <ButtonScanTypeEdge+0xa4>
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	7adb      	ldrb	r3, [r3, #11]
 80064e8:	f003 0302 	and.w	r3, r3, #2
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d005      	beq.n	80064fc <ButtonScanTypeEdge+0xa4>
                pEventCallbacks[BUTTON_EVENT_EDGE](i, BUTTON_EDGE_FALLING);
 80064f0:	4b5c      	ldr	r3, [pc, #368]	@ (8006664 <ButtonScanTypeEdge+0x20c>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	7afa      	ldrb	r2, [r7, #11]
 80064f6:	2101      	movs	r1, #1
 80064f8:	4610      	mov	r0, r2
 80064fa:	4798      	blx	r3
            }
            
            bt->time = bt->countInactive;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	7b1b      	ldrb	r3, [r3, #12]
 8006500:	461a      	mov	r2, r3
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	601a      	str	r2, [r3, #0]
 8006506:	e03b      	b.n	8006580 <ButtonScanTypeEdge+0x128>
        } else {
            bt->time++;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	1c5a      	adds	r2, r3, #1
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	601a      	str	r2, [r3, #0]
            if (bt->time >= TIMECNT_BW2PRESS) {
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	2b4f      	cmp	r3, #79	@ 0x4f
 8006518:	d932      	bls.n	8006580 <ButtonScanTypeEdge+0x128>
                if (bt->holdCnt != 0) {
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d012      	beq.n	8006548 <ButtonScanTypeEdge+0xf0>
                    if ((pEventCallbacks[BUTTON_EVENT_RELEASE] != NULL) && (bt->mode & BUTTON_TYPE_LOGIC)) {
 8006522:	4b50      	ldr	r3, [pc, #320]	@ (8006664 <ButtonScanTypeEdge+0x20c>)
 8006524:	68db      	ldr	r3, [r3, #12]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d024      	beq.n	8006574 <ButtonScanTypeEdge+0x11c>
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	7adb      	ldrb	r3, [r3, #11]
 800652e:	f003 0301 	and.w	r3, r3, #1
 8006532:	2b00      	cmp	r3, #0
 8006534:	d01e      	beq.n	8006574 <ButtonScanTypeEdge+0x11c>
                        pEventCallbacks[BUTTON_EVENT_RELEASE](i, bt->holdCnt);
 8006536:	4b4b      	ldr	r3, [pc, #300]	@ (8006664 <ButtonScanTypeEdge+0x20c>)
 8006538:	68db      	ldr	r3, [r3, #12]
 800653a:	68fa      	ldr	r2, [r7, #12]
 800653c:	6852      	ldr	r2, [r2, #4]
 800653e:	b291      	uxth	r1, r2
 8006540:	7afa      	ldrb	r2, [r7, #11]
 8006542:	4610      	mov	r0, r2
 8006544:	4798      	blx	r3
 8006546:	e015      	b.n	8006574 <ButtonScanTypeEdge+0x11c>
                    }
                }
                else if ((pEventCallbacks[BUTTON_EVENT_PRESS] != NULL) && (bt->mode & BUTTON_TYPE_LOGIC) \
 8006548:	4b46      	ldr	r3, [pc, #280]	@ (8006664 <ButtonScanTypeEdge+0x20c>)
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d011      	beq.n	8006574 <ButtonScanTypeEdge+0x11c>
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	7adb      	ldrb	r3, [r3, #11]
 8006554:	f003 0301 	and.w	r3, r3, #1
 8006558:	2b00      	cmp	r3, #0
 800655a:	d00b      	beq.n	8006574 <ButtonScanTypeEdge+0x11c>
                         && bt->pressCnt != 0) 
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	7a1b      	ldrb	r3, [r3, #8]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d007      	beq.n	8006574 <ButtonScanTypeEdge+0x11c>
                {
                    pEventCallbacks[BUTTON_EVENT_PRESS](i, bt->pressCnt);
 8006564:	4b3f      	ldr	r3, [pc, #252]	@ (8006664 <ButtonScanTypeEdge+0x20c>)
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	68fa      	ldr	r2, [r7, #12]
 800656a:	7a12      	ldrb	r2, [r2, #8]
 800656c:	4611      	mov	r1, r2
 800656e:	7afa      	ldrb	r2, [r7, #11]
 8006570:	4610      	mov	r0, r2
 8006572:	4798      	blx	r3
                }
                
                bt->holdCnt = 0;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2200      	movs	r2, #0
 8006578:	605a      	str	r2, [r3, #4]
                bt->pressCnt = 0;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2200      	movs	r2, #0
 800657e:	721a      	strb	r2, [r3, #8]
            }
        }
    }
    
    if (bt->countActive >= KEY_COUNT_IS_PRESS) {
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	7b5b      	ldrb	r3, [r3, #13]
 8006584:	2b09      	cmp	r3, #9
 8006586:	d967      	bls.n	8006658 <ButtonScanTypeEdge+0x200>
        /* reset count inactive */
        bt->countInactive = 0; 
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2200      	movs	r2, #0
 800658c:	731a      	strb	r2, [r3, #12]
        
        if (bt->sold == PIN_UNACTIVE) {
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	7a5b      	ldrb	r3, [r3, #9]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d127      	bne.n	80065e6 <ButtonScanTypeEdge+0x18e>
            bt->sold = PIN_ACTIVE;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2201      	movs	r2, #1
 800659a:	725a      	strb	r2, [r3, #9]
            
            if ((pEventCallbacks[BUTTON_EVENT_EDGE] != NULL) && (bt->mode & BUTTON_TYPE_EDGE)) {
 800659c:	4b31      	ldr	r3, [pc, #196]	@ (8006664 <ButtonScanTypeEdge+0x20c>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d00b      	beq.n	80065bc <ButtonScanTypeEdge+0x164>
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	7adb      	ldrb	r3, [r3, #11]
 80065a8:	f003 0302 	and.w	r3, r3, #2
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d005      	beq.n	80065bc <ButtonScanTypeEdge+0x164>
                pEventCallbacks[BUTTON_EVENT_EDGE](i, BUTTON_EDGE_RISING);
 80065b0:	4b2c      	ldr	r3, [pc, #176]	@ (8006664 <ButtonScanTypeEdge+0x20c>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	7afa      	ldrb	r2, [r7, #11]
 80065b6:	2100      	movs	r1, #0
 80065b8:	4610      	mov	r0, r2
 80065ba:	4798      	blx	r3
            }
            if (pButtonIndicateCallbacks != NULL) {
 80065bc:	4b2a      	ldr	r3, [pc, #168]	@ (8006668 <ButtonScanTypeEdge+0x210>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d004      	beq.n	80065ce <ButtonScanTypeEdge+0x176>
				pButtonIndicateCallbacks(i);
 80065c4:	4b28      	ldr	r3, [pc, #160]	@ (8006668 <ButtonScanTypeEdge+0x210>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	7afa      	ldrb	r2, [r7, #11]
 80065ca:	4610      	mov	r0, r2
 80065cc:	4798      	blx	r3
			}
            
            bt->time = bt->countActive;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	7b5b      	ldrb	r3, [r3, #13]
 80065d2:	461a      	mov	r2, r3
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	601a      	str	r2, [r3, #0]
            bt->pressCnt++;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	7a1b      	ldrb	r3, [r3, #8]
 80065dc:	3301      	adds	r3, #1
 80065de:	b2da      	uxtb	r2, r3
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	721a      	strb	r2, [r3, #8]
                    }
                }
            }
        }
    }
}
 80065e4:	e038      	b.n	8006658 <ButtonScanTypeEdge+0x200>
            bt->time++;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	1c5a      	adds	r2, r3, #1
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	601a      	str	r2, [r3, #0]
            if (bt->time >= TIMECNT_IS_HOLD) {
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	2b77      	cmp	r3, #119	@ 0x77
 80065f6:	d92f      	bls.n	8006658 <ButtonScanTypeEdge+0x200>
                bt->pressCnt = 0;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2200      	movs	r2, #0
 80065fc:	721a      	strb	r2, [r3, #8]
                bt->holdCnt = bt->time;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	605a      	str	r2, [r3, #4]
                if ((bt->holdCnt == TIMECNT_IS_HOLD) || (bt->holdCnt == TIMECNT_HOLD1S) || (bt->holdCnt == TIMECNT_HOLD3S) ||
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	2b78      	cmp	r3, #120	@ 0x78
 800660c:	d012      	beq.n	8006634 <ButtonScanTypeEdge+0x1dc>
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	2bc8      	cmp	r3, #200	@ 0xc8
 8006614:	d00e      	beq.n	8006634 <ButtonScanTypeEdge+0x1dc>
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 800661e:	d009      	beq.n	8006634 <ButtonScanTypeEdge+0x1dc>
                    (bt->holdCnt == TIMECNT_HOLD5S) || (bt->holdCnt == TIMECNT_HOLD10S)) 
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	685b      	ldr	r3, [r3, #4]
                if ((bt->holdCnt == TIMECNT_IS_HOLD) || (bt->holdCnt == TIMECNT_HOLD1S) || (bt->holdCnt == TIMECNT_HOLD3S) ||
 8006624:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006628:	d004      	beq.n	8006634 <ButtonScanTypeEdge+0x1dc>
                    (bt->holdCnt == TIMECNT_HOLD5S) || (bt->holdCnt == TIMECNT_HOLD10S)) 
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8006632:	d111      	bne.n	8006658 <ButtonScanTypeEdge+0x200>
                    if (pEventCallbacks[BUTTON_EVENT_HOLD] != NULL && (bt->mode & BUTTON_TYPE_LOGIC)) {
 8006634:	4b0b      	ldr	r3, [pc, #44]	@ (8006664 <ButtonScanTypeEdge+0x20c>)
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d00d      	beq.n	8006658 <ButtonScanTypeEdge+0x200>
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	7adb      	ldrb	r3, [r3, #11]
 8006640:	f003 0301 	and.w	r3, r3, #1
 8006644:	2b00      	cmp	r3, #0
 8006646:	d007      	beq.n	8006658 <ButtonScanTypeEdge+0x200>
                        pEventCallbacks[BUTTON_EVENT_HOLD](i, bt->holdCnt);
 8006648:	4b06      	ldr	r3, [pc, #24]	@ (8006664 <ButtonScanTypeEdge+0x20c>)
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	68fa      	ldr	r2, [r7, #12]
 800664e:	6852      	ldr	r2, [r2, #4]
 8006650:	b291      	uxth	r1, r2
 8006652:	7afa      	ldrb	r2, [r7, #11]
 8006654:	4610      	mov	r0, r2
 8006656:	4798      	blx	r3
}
 8006658:	bf00      	nop
 800665a:	3710      	adds	r7, #16
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}
 8006660:	20000014 	.word	0x20000014
 8006664:	20000708 	.word	0x20000708
 8006668:	20000704 	.word	0x20000704

0800666c <ButtonScan>:
 * @retval None
 */
void
ButtonScan(
    void *arg
) {
 800666c:	b580      	push	{r7, lr}
 800666e:	b084      	sub	sp, #16
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < BUTTON_MAX; i++) {
 8006674:	2300      	movs	r3, #0
 8006676:	73fb      	strb	r3, [r7, #15]
 8006678:	e014      	b.n	80066a4 <ButtonScan+0x38>
        kpad[i].scanBtnFunc(&kpad[i]);
 800667a:	7bfa      	ldrb	r2, [r7, #15]
 800667c:	490d      	ldr	r1, [pc, #52]	@ (80066b4 <ButtonScan+0x48>)
 800667e:	4613      	mov	r3, r2
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	4413      	add	r3, r2
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	440b      	add	r3, r1
 8006688:	3310      	adds	r3, #16
 800668a:	6819      	ldr	r1, [r3, #0]
 800668c:	7bfa      	ldrb	r2, [r7, #15]
 800668e:	4613      	mov	r3, r2
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	4413      	add	r3, r2
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	4a07      	ldr	r2, [pc, #28]	@ (80066b4 <ButtonScan+0x48>)
 8006698:	4413      	add	r3, r2
 800669a:	4618      	mov	r0, r3
 800669c:	4788      	blx	r1
    for (uint8_t i = 0; i < BUTTON_MAX; i++) {
 800669e:	7bfb      	ldrb	r3, [r7, #15]
 80066a0:	3301      	adds	r3, #1
 80066a2:	73fb      	strb	r3, [r7, #15]
 80066a4:	7bfb      	ldrb	r3, [r7, #15]
 80066a6:	2b07      	cmp	r3, #7
 80066a8:	d9e7      	bls.n	800667a <ButtonScan+0xe>
    }
}
 80066aa:	bf00      	nop
 80066ac:	bf00      	nop
 80066ae:	3710      	adds	r7, #16
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}
 80066b4:	20000664 	.word	0x20000664

080066b8 <DHT_DelayInit>:
#include <stdio.h>

#define MAX_TIMEOUT    1000 // us

static void DHT_DelayInit(DHT_Name* DHT)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b082      	sub	sp, #8
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start(DHT->Timer);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	4618      	mov	r0, r3
 80066c6:	f7fe f807 	bl	80046d8 <HAL_TIM_Base_Start>
}
 80066ca:	bf00      	nop
 80066cc:	3708      	adds	r7, #8
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}

080066d2 <DHT_DelayUs>:

static void DHT_DelayUs(DHT_Name* DHT, uint16_t time_us)
{
 80066d2:	b480      	push	{r7}
 80066d4:	b083      	sub	sp, #12
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
 80066da:	460b      	mov	r3, r1
 80066dc:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COUNTER(DHT->Timer, 0);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	2200      	movs	r2, #0
 80066e6:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(DHT->Timer) < time_us) {}
 80066e8:	bf00      	nop
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80066f2:	887b      	ldrh	r3, [r7, #2]
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d3f8      	bcc.n	80066ea <DHT_DelayUs+0x18>
}
 80066f8:	bf00      	nop
 80066fa:	bf00      	nop
 80066fc:	370c      	adds	r7, #12
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr

08006706 <DHT_SetPinOut>:

static void DHT_SetPinOut(DHT_Name* DHT)
{
 8006706:	b580      	push	{r7, lr}
 8006708:	b088      	sub	sp, #32
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800670e:	f107 030c 	add.w	r3, r7, #12
 8006712:	2200      	movs	r2, #0
 8006714:	601a      	str	r2, [r3, #0]
 8006716:	605a      	str	r2, [r3, #4]
 8006718:	609a      	str	r2, [r3, #8]
 800671a:	60da      	str	r2, [r3, #12]
 800671c:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = DHT->Pin;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	891b      	ldrh	r3, [r3, #8]
 8006722:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006724:	2301      	movs	r3, #1
 8006726:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006728:	2300      	movs	r3, #0
 800672a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_DeInit(DHT->Port, DHT->Pin);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	68da      	ldr	r2, [r3, #12]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	891b      	ldrh	r3, [r3, #8]
 8006734:	4619      	mov	r1, r3
 8006736:	4610      	mov	r0, r2
 8006738:	f7fd f9d0 	bl	8003adc <HAL_GPIO_DeInit>
	HAL_GPIO_Init(DHT->Port, &GPIO_InitStruct);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	68db      	ldr	r3, [r3, #12]
 8006740:	f107 020c 	add.w	r2, r7, #12
 8006744:	4611      	mov	r1, r2
 8006746:	4618      	mov	r0, r3
 8006748:	f7fd f844 	bl	80037d4 <HAL_GPIO_Init>
}
 800674c:	bf00      	nop
 800674e:	3720      	adds	r7, #32
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}

08006754 <DHT_SetPinIn>:

static void DHT_SetPinIn(DHT_Name* DHT)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b088      	sub	sp, #32
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800675c:	f107 030c 	add.w	r3, r7, #12
 8006760:	2200      	movs	r2, #0
 8006762:	601a      	str	r2, [r3, #0]
 8006764:	605a      	str	r2, [r3, #4]
 8006766:	609a      	str	r2, [r3, #8]
 8006768:	60da      	str	r2, [r3, #12]
 800676a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = DHT->Pin;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	891b      	ldrh	r3, [r3, #8]
 8006770:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006772:	2300      	movs	r3, #0
 8006774:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006776:	2301      	movs	r3, #1
 8006778:	617b      	str	r3, [r7, #20]
	HAL_GPIO_DeInit(DHT->Port, DHT->Pin);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	68da      	ldr	r2, [r3, #12]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	891b      	ldrh	r3, [r3, #8]
 8006782:	4619      	mov	r1, r3
 8006784:	4610      	mov	r0, r2
 8006786:	f7fd f9a9 	bl	8003adc <HAL_GPIO_DeInit>
	HAL_GPIO_Init(DHT->Port, &GPIO_InitStruct);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	68db      	ldr	r3, [r3, #12]
 800678e:	f107 020c 	add.w	r2, r7, #12
 8006792:	4611      	mov	r1, r2
 8006794:	4618      	mov	r0, r3
 8006796:	f7fd f81d 	bl	80037d4 <HAL_GPIO_Init>
}
 800679a:	bf00      	nop
 800679c:	3720      	adds	r7, #32
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}

080067a2 <DHT_WritePin>:

static void DHT_WritePin(DHT_Name* DHT, uint8_t Value)
{
 80067a2:	b580      	push	{r7, lr}
 80067a4:	b082      	sub	sp, #8
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
 80067aa:	460b      	mov	r3, r1
 80067ac:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(DHT->Port, DHT->Pin, Value);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	68d8      	ldr	r0, [r3, #12]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	891b      	ldrh	r3, [r3, #8]
 80067b6:	78fa      	ldrb	r2, [r7, #3]
 80067b8:	4619      	mov	r1, r3
 80067ba:	f7fd fa8b 	bl	8003cd4 <HAL_GPIO_WritePin>
}
 80067be:	bf00      	nop
 80067c0:	3708      	adds	r7, #8
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}

080067c6 <DHT_ReadPin>:

static uint8_t DHT_ReadPin(DHT_Name* DHT)
{
 80067c6:	b580      	push	{r7, lr}
 80067c8:	b084      	sub	sp, #16
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
	uint8_t Value = HAL_GPIO_ReadPin(DHT->Port, DHT->Pin);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	68da      	ldr	r2, [r3, #12]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	891b      	ldrh	r3, [r3, #8]
 80067d6:	4619      	mov	r1, r3
 80067d8:	4610      	mov	r0, r2
 80067da:	f7fd fa63 	bl	8003ca4 <HAL_GPIO_ReadPin>
 80067de:	4603      	mov	r3, r0
 80067e0:	73fb      	strb	r3, [r7, #15]
	return Value;
 80067e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3710      	adds	r7, #16
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}

080067ec <DHT_Start>:
//********************************* Middle level Layer ****************************************************//
static uint8_t DHT_Start(DHT_Name* DHT)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b084      	sub	sp, #16
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
	uint8_t Response = 0;
 80067f4:	2300      	movs	r3, #0
 80067f6:	73fb      	strb	r3, [r7, #15]
	uint32_t micros_ticks = 0;
 80067f8:	2300      	movs	r3, #0
 80067fa:	60bb      	str	r3, [r7, #8]

	DHT_SetPinOut(DHT);  
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f7ff ff82 	bl	8006706 <DHT_SetPinOut>
	DHT_WritePin(DHT, 0);
 8006802:	2100      	movs	r1, #0
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f7ff ffcc 	bl	80067a2 <DHT_WritePin>
	DHT_DelayUs(DHT, DHT->Type);    
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	885b      	ldrh	r3, [r3, #2]
 800680e:	4619      	mov	r1, r3
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f7ff ff5e 	bl	80066d2 <DHT_DelayUs>
	DHT_SetPinIn(DHT);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f7ff ff9c 	bl	8006754 <DHT_SetPinIn>
	DHT_DelayUs(DHT, 40);
 800681c:	2128      	movs	r1, #40	@ 0x28
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f7ff ff57 	bl	80066d2 <DHT_DelayUs>

	if (!DHT_ReadPin(DHT))
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f7ff ffce 	bl	80067c6 <DHT_ReadPin>
 800682a:	4603      	mov	r3, r0
 800682c:	2b00      	cmp	r3, #0
 800682e:	d11b      	bne.n	8006868 <DHT_Start+0x7c>
	{
		DHT_DelayUs(DHT, 80); 
 8006830:	2150      	movs	r1, #80	@ 0x50
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f7ff ff4d 	bl	80066d2 <DHT_DelayUs>
		if (DHT_ReadPin(DHT))
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f7ff ffc4 	bl	80067c6 <DHT_ReadPin>
 800683e:	4603      	mov	r3, r0
 8006840:	2b00      	cmp	r3, #0
 8006842:	d002      	beq.n	800684a <DHT_Start+0x5e>
		{
			Response = DHT_STA_OK;
 8006844:	2300      	movs	r3, #0
 8006846:	73fb      	strb	r3, [r7, #15]
 8006848:	e00e      	b.n	8006868 <DHT_Start+0x7c>
		}
		else 
		{
			Response = DHT_STA_FAIL;
 800684a:	2301      	movs	r3, #1
 800684c:	73fb      	strb	r3, [r7, #15]
		}
	}		
	while (DHT_ReadPin(DHT)) {
 800684e:	e00b      	b.n	8006868 <DHT_Start+0x7c>
		if (micros_ticks++ > MAX_TIMEOUT) {
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	1c5a      	adds	r2, r3, #1
 8006854:	60ba      	str	r2, [r7, #8]
 8006856:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800685a:	d901      	bls.n	8006860 <DHT_Start+0x74>
			return DHT_STA_TIMEOUT_ERROR;
 800685c:	2303      	movs	r3, #3
 800685e:	e00a      	b.n	8006876 <DHT_Start+0x8a>
		}
		DHT_DelayUs(DHT, 1); // 1us
 8006860:	2101      	movs	r1, #1
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f7ff ff35 	bl	80066d2 <DHT_DelayUs>
	while (DHT_ReadPin(DHT)) {
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f7ff ffac 	bl	80067c6 <DHT_ReadPin>
 800686e:	4603      	mov	r3, r0
 8006870:	2b00      	cmp	r3, #0
 8006872:	d1ed      	bne.n	8006850 <DHT_Start+0x64>
	}
	return Response;
 8006874:	7bfb      	ldrb	r3, [r7, #15]
}
 8006876:	4618      	mov	r0, r3
 8006878:	3710      	adds	r7, #16
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}

0800687e <DHT_Read>:

static uint8_t DHT_Read(DHT_Name* DHT)
{
 800687e:	b580      	push	{r7, lr}
 8006880:	b086      	sub	sp, #24
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
	uint8_t value = 0;
 8006886:	2300      	movs	r3, #0
 8006888:	75fb      	strb	r3, [r7, #23]
	uint32_t micros_ticks = 0;
 800688a:	2300      	movs	r3, #0
 800688c:	613b      	str	r3, [r7, #16]

	DHT_SetPinIn(DHT);
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f7ff ff60 	bl	8006754 <DHT_SetPinIn>

	for (int i = 0; i < 8; i++)
 8006894:	2300      	movs	r3, #0
 8006896:	60fb      	str	r3, [r7, #12]
 8006898:	e04e      	b.n	8006938 <DHT_Read+0xba>
	{
		while (!DHT_ReadPin(DHT)) {
			if (micros_ticks++ > MAX_TIMEOUT) {
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	1c5a      	adds	r2, r3, #1
 800689e:	613a      	str	r2, [r7, #16]
 80068a0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80068a4:	d901      	bls.n	80068aa <DHT_Read+0x2c>
				return DHT_STA_TIMEOUT_ERROR;
 80068a6:	2303      	movs	r3, #3
 80068a8:	e04a      	b.n	8006940 <DHT_Read+0xc2>
			}
			DHT_DelayUs(DHT, 1); // 1us
 80068aa:	2101      	movs	r1, #1
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f7ff ff10 	bl	80066d2 <DHT_DelayUs>
		while (!DHT_ReadPin(DHT)) {
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f7ff ff87 	bl	80067c6 <DHT_ReadPin>
 80068b8:	4603      	mov	r3, r0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d0ed      	beq.n	800689a <DHT_Read+0x1c>
		}
		micros_ticks = 0;
 80068be:	2300      	movs	r3, #0
 80068c0:	613b      	str	r3, [r7, #16]

		DHT_DelayUs(DHT, 40);
 80068c2:	2128      	movs	r1, #40	@ 0x28
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f7ff ff04 	bl	80066d2 <DHT_DelayUs>

		if (!DHT_ReadPin(DHT)) {
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f7ff ff7b 	bl	80067c6 <DHT_ReadPin>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d10e      	bne.n	80068f4 <DHT_Read+0x76>
			value &= ~(1 << (7-i));
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	f1c3 0307 	rsb	r3, r3, #7
 80068dc:	2201      	movs	r2, #1
 80068de:	fa02 f303 	lsl.w	r3, r2, r3
 80068e2:	b25b      	sxtb	r3, r3
 80068e4:	43db      	mvns	r3, r3
 80068e6:	b25a      	sxtb	r2, r3
 80068e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80068ec:	4013      	ands	r3, r2
 80068ee:	b25b      	sxtb	r3, r3
 80068f0:	75fb      	strb	r3, [r7, #23]
 80068f2:	e018      	b.n	8006926 <DHT_Read+0xa8>
		} else {
			value |= 1 << (7-i);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f1c3 0307 	rsb	r3, r3, #7
 80068fa:	2201      	movs	r2, #1
 80068fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006900:	b25a      	sxtb	r2, r3
 8006902:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006906:	4313      	orrs	r3, r2
 8006908:	b25b      	sxtb	r3, r3
 800690a:	75fb      	strb	r3, [r7, #23]
		}

		while (DHT_ReadPin(DHT)) {
 800690c:	e00b      	b.n	8006926 <DHT_Read+0xa8>
			if (micros_ticks++ > MAX_TIMEOUT) {
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	1c5a      	adds	r2, r3, #1
 8006912:	613a      	str	r2, [r7, #16]
 8006914:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006918:	d901      	bls.n	800691e <DHT_Read+0xa0>
				return DHT_STA_TIMEOUT_ERROR;
 800691a:	2303      	movs	r3, #3
 800691c:	e010      	b.n	8006940 <DHT_Read+0xc2>
			}
			DHT_DelayUs(DHT, 1); // 1us
 800691e:	2101      	movs	r1, #1
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f7ff fed6 	bl	80066d2 <DHT_DelayUs>
		while (DHT_ReadPin(DHT)) {
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f7ff ff4d 	bl	80067c6 <DHT_ReadPin>
 800692c:	4603      	mov	r3, r0
 800692e:	2b00      	cmp	r3, #0
 8006930:	d1ed      	bne.n	800690e <DHT_Read+0x90>
	for (int i = 0; i < 8; i++)
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	3301      	adds	r3, #1
 8006936:	60fb      	str	r3, [r7, #12]
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2b07      	cmp	r3, #7
 800693c:	ddb9      	ble.n	80068b2 <DHT_Read+0x34>
		}
	}
	return value;
 800693e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006940:	4618      	mov	r0, r3
 8006942:	3718      	adds	r7, #24
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <DHT_Init>:

//************************** High Level Layer ********************************************************//
void DHT_Init(DHT_Name* DHT, uint8_t DHT_Type, TIM_HandleTypeDef* Timer, GPIO_TypeDef* DH_PORT, uint16_t DH_Pin)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b084      	sub	sp, #16
 800694c:	af00      	add	r7, sp, #0
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	607a      	str	r2, [r7, #4]
 8006952:	603b      	str	r3, [r7, #0]
 8006954:	460b      	mov	r3, r1
 8006956:	72fb      	strb	r3, [r7, #11]
	if (DHT_Type == DHT11) {
 8006958:	7afb      	ldrb	r3, [r7, #11]
 800695a:	2b01      	cmp	r3, #1
 800695c:	d104      	bne.n	8006968 <DHT_Init+0x20>
		DHT->Type = DHT11_STARTTIME;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	f244 6250 	movw	r2, #18000	@ 0x4650
 8006964:	805a      	strh	r2, [r3, #2]
 8006966:	e006      	b.n	8006976 <DHT_Init+0x2e>
	}
	else if (DHT_Type == DHT22) {
 8006968:	7afb      	ldrb	r3, [r7, #11]
 800696a:	2b02      	cmp	r3, #2
 800696c:	d103      	bne.n	8006976 <DHT_Init+0x2e>
		DHT->Type = DHT22_STARTTIME;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f642 62e0 	movw	r2, #12000	@ 0x2ee0
 8006974:	805a      	strh	r2, [r3, #2]
	}

	DHT->Port = DH_PORT;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	683a      	ldr	r2, [r7, #0]
 800697a:	60da      	str	r2, [r3, #12]
	DHT->Pin = DH_Pin;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	8b3a      	ldrh	r2, [r7, #24]
 8006980:	811a      	strh	r2, [r3, #8]
	DHT->Timer = Timer;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	605a      	str	r2, [r3, #4]
	DHT_DelayInit(DHT);
 8006988:	68f8      	ldr	r0, [r7, #12]
 800698a:	f7ff fe95 	bl	80066b8 <DHT_DelayInit>
}
 800698e:	bf00      	nop
 8006990:	3710      	adds	r7, #16
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
	...

08006998 <DHT_ReadTempHum>:

dht_status DHT_ReadTempHum(DHT_Name* DHT)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b086      	sub	sp, #24
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
	dht_status status;
	uint8_t Temp1, Temp2, RH1, RH2, SUM;
	uint16_t Temp, Humi;

	DHT->Respone = DHT_Start(DHT);
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f7ff ff23 	bl	80067ec <DHT_Start>
 80069a6:	4603      	mov	r3, r0
 80069a8:	461a      	mov	r2, r3
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	701a      	strb	r2, [r3, #0]
	RH1 = DHT_Read(DHT);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f7ff ff65 	bl	800687e <DHT_Read>
 80069b4:	4603      	mov	r3, r0
 80069b6:	75bb      	strb	r3, [r7, #22]
	RH2 = DHT_Read(DHT);
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f7ff ff60 	bl	800687e <DHT_Read>
 80069be:	4603      	mov	r3, r0
 80069c0:	757b      	strb	r3, [r7, #21]
	Temp1 = DHT_Read(DHT);
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f7ff ff5b 	bl	800687e <DHT_Read>
 80069c8:	4603      	mov	r3, r0
 80069ca:	753b      	strb	r3, [r7, #20]
	Temp2 = DHT_Read(DHT);
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f7ff ff56 	bl	800687e <DHT_Read>
 80069d2:	4603      	mov	r3, r0
 80069d4:	74fb      	strb	r3, [r7, #19]
	SUM = DHT_Read(DHT);
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f7ff ff51 	bl	800687e <DHT_Read>
 80069dc:	4603      	mov	r3, r0
 80069de:	74bb      	strb	r3, [r7, #18]

	if (SUM == (uint8_t)(RH1 + RH2 + Temp1 + Temp2)) {
 80069e0:	7dba      	ldrb	r2, [r7, #22]
 80069e2:	7d7b      	ldrb	r3, [r7, #21]
 80069e4:	4413      	add	r3, r2
 80069e6:	b2da      	uxtb	r2, r3
 80069e8:	7d3b      	ldrb	r3, [r7, #20]
 80069ea:	4413      	add	r3, r2
 80069ec:	b2da      	uxtb	r2, r3
 80069ee:	7cfb      	ldrb	r3, [r7, #19]
 80069f0:	4413      	add	r3, r2
 80069f2:	b2db      	uxtb	r3, r3
 80069f4:	7cba      	ldrb	r2, [r7, #18]
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d136      	bne.n	8006a68 <DHT_ReadTempHum+0xd0>
		Temp = (Temp1 << 8) | Temp2;
 80069fa:	7d3b      	ldrb	r3, [r7, #20]
 80069fc:	021b      	lsls	r3, r3, #8
 80069fe:	b21a      	sxth	r2, r3
 8006a00:	7cfb      	ldrb	r3, [r7, #19]
 8006a02:	b21b      	sxth	r3, r3
 8006a04:	4313      	orrs	r3, r2
 8006a06:	b21b      	sxth	r3, r3
 8006a08:	823b      	strh	r3, [r7, #16]
		Humi = (RH1 << 8) | RH2;
 8006a0a:	7dbb      	ldrb	r3, [r7, #22]
 8006a0c:	021b      	lsls	r3, r3, #8
 8006a0e:	b21a      	sxth	r2, r3
 8006a10:	7d7b      	ldrb	r3, [r7, #21]
 8006a12:	b21b      	sxth	r3, r3
 8006a14:	4313      	orrs	r3, r2
 8006a16:	b21b      	sxth	r3, r3
 8006a18:	81fb      	strh	r3, [r7, #14]
		DHT->Temp = (float)(Temp / 10.0);
 8006a1a:	8a3b      	ldrh	r3, [r7, #16]
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f7f9 fd89 	bl	8000534 <__aeabi_i2d>
 8006a22:	f04f 0200 	mov.w	r2, #0
 8006a26:	4b17      	ldr	r3, [pc, #92]	@ (8006a84 <DHT_ReadTempHum+0xec>)
 8006a28:	f7f9 ff18 	bl	800085c <__aeabi_ddiv>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	460b      	mov	r3, r1
 8006a30:	4610      	mov	r0, r2
 8006a32:	4619      	mov	r1, r3
 8006a34:	f7fa f8c0 	bl	8000bb8 <__aeabi_d2f>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	611a      	str	r2, [r3, #16]
		DHT->Humi = (float)(Humi / 10.0);
 8006a3e:	89fb      	ldrh	r3, [r7, #14]
 8006a40:	4618      	mov	r0, r3
 8006a42:	f7f9 fd77 	bl	8000534 <__aeabi_i2d>
 8006a46:	f04f 0200 	mov.w	r2, #0
 8006a4a:	4b0e      	ldr	r3, [pc, #56]	@ (8006a84 <DHT_ReadTempHum+0xec>)
 8006a4c:	f7f9 ff06 	bl	800085c <__aeabi_ddiv>
 8006a50:	4602      	mov	r2, r0
 8006a52:	460b      	mov	r3, r1
 8006a54:	4610      	mov	r0, r2
 8006a56:	4619      	mov	r1, r3
 8006a58:	f7fa f8ae 	bl	8000bb8 <__aeabi_d2f>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	615a      	str	r2, [r3, #20]
		status = DHT_STA_OK;
 8006a62:	2300      	movs	r3, #0
 8006a64:	75fb      	strb	r3, [r7, #23]
 8006a66:	e007      	b.n	8006a78 <DHT_ReadTempHum+0xe0>
    }
	else {
		DHT->Temp = -1;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	4a07      	ldr	r2, [pc, #28]	@ (8006a88 <DHT_ReadTempHum+0xf0>)
 8006a6c:	611a      	str	r2, [r3, #16]
		DHT->Humi = -1;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	4a05      	ldr	r2, [pc, #20]	@ (8006a88 <DHT_ReadTempHum+0xf0>)
 8006a72:	615a      	str	r2, [r3, #20]
		status = DHT_STA_CRC_ERROR;
 8006a74:	2302      	movs	r3, #2
 8006a76:	75fb      	strb	r3, [r7, #23]

//	char str[50];
//	snprintf(str, sizeof(str), "DHT_Type = %d, Temp = %0.1f, Humi = %0.1f\n", DHT->Type, DHT->Temp, DHT->Humi);
//	printf("%s", str);

	return status;
 8006a78:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3718      	adds	r7, #24
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}
 8006a82:	bf00      	nop
 8006a84:	40240000 	.word	0x40240000
 8006a88:	bf800000 	.word	0xbf800000

08006a8c <door_set_status>:
/*                            PRIVATE FUNCTIONS                               */
/******************************************************************************/
/******************************************************************************/
/*                            EXPORTED FUNCTIONS                              */
/******************************************************************************/
void door_set_status(door_status_e status) {
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	4603      	mov	r3, r0
 8006a94:	71fb      	strb	r3, [r7, #7]
	doorStatus = status;
 8006a96:	4a04      	ldr	r2, [pc, #16]	@ (8006aa8 <door_set_status+0x1c>)
 8006a98:	79fb      	ldrb	r3, [r7, #7]
 8006a9a:	7013      	strb	r3, [r2, #0]
}
 8006a9c:	bf00      	nop
 8006a9e:	370c      	adds	r7, #12
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr
 8006aa8:	20000054 	.word	0x20000054

08006aac <door_get_status>:

door_status_e door_get_status(void) {
 8006aac:	b480      	push	{r7}
 8006aae:	af00      	add	r7, sp, #0
	return doorStatus;
 8006ab0:	4b03      	ldr	r3, [pc, #12]	@ (8006ac0 <door_get_status+0x14>)
 8006ab2:	781b      	ldrb	r3, [r3, #0]
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr
 8006abe:	bf00      	nop
 8006ac0:	20000054 	.word	0x20000054

08006ac4 <EventButton_Init>:
 * @brief  Initialize events of button
 * @param  pFuncAppProcEvent: funtion callback
 * @retval None
 */
void
EventButton_Init(void) {
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	af00      	add	r7, sp, #0
    /* Init callback functions */
	ButtonIndicateRegisterCallback(ButtonProcessIndicator);
 8006ac8:	480b      	ldr	r0, [pc, #44]	@ (8006af8 <EventButton_Init+0x34>)
 8006aca:	f7ff fca1 	bl	8006410 <ButtonIndicateRegisterCallback>
	Button_RegisterEventCallback(BUTTON_EVENT_EDGE, ButtonProcessEventEdge);
 8006ace:	490b      	ldr	r1, [pc, #44]	@ (8006afc <EventButton_Init+0x38>)
 8006ad0:	2000      	movs	r0, #0
 8006ad2:	f7ff fcad 	bl	8006430 <Button_RegisterEventCallback>
	Button_RegisterEventCallback(BUTTON_EVENT_PRESS, ButtonProcessEventPress);
 8006ad6:	490a      	ldr	r1, [pc, #40]	@ (8006b00 <EventButton_Init+0x3c>)
 8006ad8:	2001      	movs	r0, #1
 8006ada:	f7ff fca9 	bl	8006430 <Button_RegisterEventCallback>
	Button_RegisterEventCallback(BUTTON_EVENT_HOLD, ButtonProcessEventHold);
 8006ade:	4909      	ldr	r1, [pc, #36]	@ (8006b04 <EventButton_Init+0x40>)
 8006ae0:	2002      	movs	r0, #2
 8006ae2:	f7ff fca5 	bl	8006430 <Button_RegisterEventCallback>
	Button_RegisterEventCallback(BUTTON_EVENT_RELEASE, ButtonProcessEventRelease);
 8006ae6:	4908      	ldr	r1, [pc, #32]	@ (8006b08 <EventButton_Init+0x44>)
 8006ae8:	2003      	movs	r0, #3
 8006aea:	f7ff fca1 	bl	8006430 <Button_RegisterEventCallback>

    Button_Init();
 8006aee:	f7ff fc2b 	bl	8006348 <Button_Init>
}
 8006af2:	bf00      	nop
 8006af4:	bd80      	pop	{r7, pc}
 8006af6:	bf00      	nop
 8006af8:	08006b0d 	.word	0x08006b0d
 8006afc:	08006b25 	.word	0x08006b25
 8006b00:	08006b59 	.word	0x08006b59
 8006b04:	08006bb9 	.word	0x08006bb9
 8006b08:	08006bef 	.word	0x08006bef

08006b0c <ButtonProcessIndicator>:
 * @brief  Led indicate button press
 * @param  button_id
 * @retval None
 */
static void ButtonProcessIndicator(uint8_t button_id)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b082      	sub	sp, #8
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	4603      	mov	r3, r0
 8006b14:	71fb      	strb	r3, [r7, #7]
	// Display status led when press button configure
	led_event_show(LEDEV_BT_PRESS);
 8006b16:	2002      	movs	r0, #2
 8006b18:	f000 faf0 	bl	80070fc <led_event_show>
}
 8006b1c:	bf00      	nop
 8006b1e:	3708      	adds	r7, #8
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <ButtonProcessEventEdge>:
 */
static void
ButtonProcessEventEdge(
    uint8_t btnID,
    uint16_t edge
) {
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b082      	sub	sp, #8
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	460a      	mov	r2, r1
 8006b2e:	71fb      	strb	r3, [r7, #7]
 8006b30:	4613      	mov	r3, r2
 8006b32:	80bb      	strh	r3, [r7, #4]
	if (btnID == DOOR_SENSOR_ID) {
 8006b34:	79fb      	ldrb	r3, [r7, #7]
 8006b36:	2b07      	cmp	r3, #7
 8006b38:	d109      	bne.n	8006b4e <ButtonProcessEventEdge+0x2a>
		if (edge == BUTTON_EDGE_RISING)
 8006b3a:	88bb      	ldrh	r3, [r7, #4]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d103      	bne.n	8006b48 <ButtonProcessEventEdge+0x24>
		{
			door_set_status(DOOR_STATUS_CLOSE);
 8006b40:	2000      	movs	r0, #0
 8006b42:	f7ff ffa3 	bl	8006a8c <door_set_status>
		else /* (edge == BUTTON_EDGE_FAILING) */
		{
			door_set_status(DOOR_STATUS_OPEN);
		}
	}
}
 8006b46:	e002      	b.n	8006b4e <ButtonProcessEventEdge+0x2a>
			door_set_status(DOOR_STATUS_OPEN);
 8006b48:	2001      	movs	r0, #1
 8006b4a:	f7ff ff9f 	bl	8006a8c <door_set_status>
}
 8006b4e:	bf00      	nop
 8006b50:	3708      	adds	r7, #8
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
	...

08006b58 <ButtonProcessEventPress>:
 */
static void 
ButtonProcessEventPress(
    uint8_t btnID,
    uint16_t time
) {
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b082      	sub	sp, #8
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	4603      	mov	r3, r0
 8006b60:	460a      	mov	r2, r1
 8006b62:	71fb      	strb	r3, [r7, #7]
 8006b64:	4613      	mov	r3, r2
 8006b66:	80bb      	strh	r3, [r7, #4]
	if (time == 1)
 8006b68:	88bb      	ldrh	r3, [r7, #4]
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d11a      	bne.n	8006ba4 <ButtonProcessEventPress+0x4c>
	{
		switch (btnID) {
 8006b6e:	79fb      	ldrb	r3, [r7, #7]
 8006b70:	3b01      	subs	r3, #1
 8006b72:	2b05      	cmp	r3, #5
 8006b74:	d81c      	bhi.n	8006bb0 <ButtonProcessEventPress+0x58>
 8006b76:	a201      	add	r2, pc, #4	@ (adr r2, 8006b7c <ButtonProcessEventPress+0x24>)
 8006b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b7c:	08006b95 	.word	0x08006b95
 8006b80:	08006b9d 	.word	0x08006b9d
 8006b84:	08006bb1 	.word	0x08006bb1
 8006b88:	08006bb1 	.word	0x08006bb1
 8006b8c:	08006bb1 	.word	0x08006bb1
 8006b90:	08006bb1 	.word	0x08006bb1
			case BUTTON_FAN_ON_ID:
				FanCtrl_SetLevel(100);
 8006b94:	2064      	movs	r0, #100	@ 0x64
 8006b96:	f000 f8d1 	bl	8006d3c <FanCtrl_SetLevel>
				break;
 8006b9a:	e00a      	b.n	8006bb2 <ButtonProcessEventPress+0x5a>

			case BUTTON_FAN_OFF_ID:
				FanCtrl_SetLevel(0);
 8006b9c:	2000      	movs	r0, #0
 8006b9e:	f000 f8cd 	bl	8006d3c <FanCtrl_SetLevel>
				break;
 8006ba2:	e006      	b.n	8006bb2 <ButtonProcessEventPress+0x5a>

			default:
				break;
			}
	}
	else if (time == 2)
 8006ba4:	88bb      	ldrh	r3, [r7, #4]
 8006ba6:	2b02      	cmp	r3, #2
 8006ba8:	d003      	beq.n	8006bb2 <ButtonProcessEventPress+0x5a>
	{
	}
	else if (time == 5)
 8006baa:	88bb      	ldrh	r3, [r7, #4]
 8006bac:	2b05      	cmp	r3, #5
 8006bae:	e000      	b.n	8006bb2 <ButtonProcessEventPress+0x5a>
				break;
 8006bb0:	bf00      	nop
	{
	}
	else return;
}
 8006bb2:	3708      	adds	r7, #8
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <ButtonProcessEventHold>:
 */
static void 
ButtonProcessEventHold(
    uint8_t btnID,
    uint16_t time
) {
 8006bb8:	b480      	push	{r7}
 8006bba:	b083      	sub	sp, #12
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	460a      	mov	r2, r1
 8006bc2:	71fb      	strb	r3, [r7, #7]
 8006bc4:	4613      	mov	r3, r2
 8006bc6:	80bb      	strh	r3, [r7, #4]
	if (time == TIMECNT_HOLD10S)
 8006bc8:	88bb      	ldrh	r3, [r7, #4]
 8006bca:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8006bce:	d009      	beq.n	8006be4 <ButtonProcessEventHold+0x2c>
	{
	}
	else if (time == TIMECNT_HOLD5S)
 8006bd0:	88bb      	ldrh	r3, [r7, #4]
 8006bd2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006bd6:	d005      	beq.n	8006be4 <ButtonProcessEventHold+0x2c>
	{
	}
	else if (time == TIMECNT_HOLD3S)
 8006bd8:	88bb      	ldrh	r3, [r7, #4]
 8006bda:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8006bde:	d001      	beq.n	8006be4 <ButtonProcessEventHold+0x2c>
	{
	}
	else if (time == TIMECNT_HOLD1S)
 8006be0:	88bb      	ldrh	r3, [r7, #4]
 8006be2:	2bc8      	cmp	r3, #200	@ 0xc8
	{
	}
	else return;
}
 8006be4:	370c      	adds	r7, #12
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr

08006bee <ButtonProcessEventRelease>:
 */
static void 
ButtonProcessEventRelease(
    uint8_t btnID,
    uint16_t time
) {
 8006bee:	b480      	push	{r7}
 8006bf0:	b083      	sub	sp, #12
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	460a      	mov	r2, r1
 8006bf8:	71fb      	strb	r3, [r7, #7]
 8006bfa:	4613      	mov	r3, r2
 8006bfc:	80bb      	strh	r3, [r7, #4]
	if (time >= TIMECNT_HOLD10S)
 8006bfe:	88bb      	ldrh	r3, [r7, #4]
 8006c00:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8006c04:	d209      	bcs.n	8006c1a <ButtonProcessEventRelease+0x2c>
	{
	}
	else if (time >= TIMECNT_HOLD5S)
 8006c06:	88bb      	ldrh	r3, [r7, #4]
 8006c08:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006c0c:	d205      	bcs.n	8006c1a <ButtonProcessEventRelease+0x2c>
	{
	}
	else if (time >= TIMECNT_HOLD3S)
 8006c0e:	88bb      	ldrh	r3, [r7, #4]
 8006c10:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8006c14:	d201      	bcs.n	8006c1a <ButtonProcessEventRelease+0x2c>
	{
	}
	else if (time >= TIMECNT_HOLD1S)
 8006c16:	88bb      	ldrh	r3, [r7, #4]
 8006c18:	2bc7      	cmp	r3, #199	@ 0xc7
	{
	}
	else return;
}
 8006c1a:	370c      	adds	r7, #12
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr

08006c24 <rs232_GetTempDht22>:

/******************************************************************************/
/*                            EXPORTED FUNCTIONS                              */
/******************************************************************************/

float rs232_GetTempDht22(void) {
 8006c24:	b480      	push	{r7}
 8006c26:	af00      	add	r7, sp, #0
	return dht22_Temp;
 8006c28:	4b04      	ldr	r3, [pc, #16]	@ (8006c3c <rs232_GetTempDht22+0x18>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	ee07 3a90 	vmov	s15, r3
}
 8006c30:	eeb0 0a67 	vmov.f32	s0, s15
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr
 8006c3c:	20000058 	.word	0x20000058

08006c40 <rs232TimeoutConnectionTimerCb>:

static void rs232TimeoutConnectionTimerCb(void *arg) {
 8006c40:	b480      	push	{r7}
 8006c42:	b083      	sub	sp, #12
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
	dht22_Temp = -1;
 8006c48:	4b04      	ldr	r3, [pc, #16]	@ (8006c5c <rs232TimeoutConnectionTimerCb+0x1c>)
 8006c4a:	4a05      	ldr	r2, [pc, #20]	@ (8006c60 <rs232TimeoutConnectionTimerCb+0x20>)
 8006c4c:	601a      	str	r2, [r3, #0]
}
 8006c4e:	bf00      	nop
 8006c50:	370c      	adds	r7, #12
 8006c52:	46bd      	mov	sp, r7
 8006c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c58:	4770      	bx	lr
 8006c5a:	bf00      	nop
 8006c5c:	20000058 	.word	0x20000058
 8006c60:	bf800000 	.word	0xbf800000

08006c64 <eventSerial_rs232ReceiverCallback>:

static void eventSerial_rs232ReceiverCallback(
	uint8_t lenPayload,
	uint8_t *payload
) {
 8006c64:	b5b0      	push	{r4, r5, r7, lr}
 8006c66:	b084      	sub	sp, #16
 8006c68:	af02      	add	r7, sp, #8
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	6039      	str	r1, [r7, #0]
 8006c6e:	71fb      	strb	r3, [r7, #7]
	dht22_Temp = payload[0] + (payload[1] / 100.0);
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	4618      	mov	r0, r3
 8006c76:	f7f9 fc5d 	bl	8000534 <__aeabi_i2d>
 8006c7a:	4604      	mov	r4, r0
 8006c7c:	460d      	mov	r5, r1
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	3301      	adds	r3, #1
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	4618      	mov	r0, r3
 8006c86:	f7f9 fc55 	bl	8000534 <__aeabi_i2d>
 8006c8a:	f04f 0200 	mov.w	r2, #0
 8006c8e:	4b1d      	ldr	r3, [pc, #116]	@ (8006d04 <eventSerial_rs232ReceiverCallback+0xa0>)
 8006c90:	f7f9 fde4 	bl	800085c <__aeabi_ddiv>
 8006c94:	4602      	mov	r2, r0
 8006c96:	460b      	mov	r3, r1
 8006c98:	4620      	mov	r0, r4
 8006c9a:	4629      	mov	r1, r5
 8006c9c:	f7f9 fafe 	bl	800029c <__adddf3>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	460b      	mov	r3, r1
 8006ca4:	4610      	mov	r0, r2
 8006ca6:	4619      	mov	r1, r3
 8006ca8:	f7f9 ff86 	bl	8000bb8 <__aeabi_d2f>
 8006cac:	4603      	mov	r3, r0
 8006cae:	4a16      	ldr	r2, [pc, #88]	@ (8006d08 <eventSerial_rs232ReceiverCallback+0xa4>)
 8006cb0:	6013      	str	r3, [r2, #0]
    printf("RS232 length: %d, temp = %0.2f\n", lenPayload, dht22_Temp);
 8006cb2:	79fc      	ldrb	r4, [r7, #7]
 8006cb4:	4b14      	ldr	r3, [pc, #80]	@ (8006d08 <eventSerial_rs232ReceiverCallback+0xa4>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f7f9 fc4d 	bl	8000558 <__aeabi_f2d>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	460b      	mov	r3, r1
 8006cc2:	4621      	mov	r1, r4
 8006cc4:	4811      	ldr	r0, [pc, #68]	@ (8006d0c <eventSerial_rs232ReceiverCallback+0xa8>)
 8006cc6:	f001 ffa7 	bl	8008c18 <iprintf>

    if (rs232TimeoutConnectionTimerEvt != NO_TIMER) {
 8006cca:	4b11      	ldr	r3, [pc, #68]	@ (8006d10 <eventSerial_rs232ReceiverCallback+0xac>)
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	2bff      	cmp	r3, #255	@ 0xff
 8006cd0:	d007      	beq.n	8006ce2 <eventSerial_rs232ReceiverCallback+0x7e>
		TimerStop(rs232TimeoutConnectionTimerEvt);
 8006cd2:	4b0f      	ldr	r3, [pc, #60]	@ (8006d10 <eventSerial_rs232ReceiverCallback+0xac>)
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f000 ffa6 	bl	8007c28 <TimerStop>
		rs232TimeoutConnectionTimerEvt = NO_TIMER;
 8006cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8006d10 <eventSerial_rs232ReceiverCallback+0xac>)
 8006cde:	22ff      	movs	r2, #255	@ 0xff
 8006ce0:	701a      	strb	r2, [r3, #0]
	}
    rs232TimeoutConnectionTimerEvt = TimerStart("rs232TimeoutConnection", \
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	9300      	str	r3, [sp, #0]
 8006ce6:	4b0b      	ldr	r3, [pc, #44]	@ (8006d14 <eventSerial_rs232ReceiverCallback+0xb0>)
 8006ce8:	22ff      	movs	r2, #255	@ 0xff
 8006cea:	f241 3188 	movw	r1, #5000	@ 0x1388
 8006cee:	480a      	ldr	r0, [pc, #40]	@ (8006d18 <eventSerial_rs232ReceiverCallback+0xb4>)
 8006cf0:	f000 ff1c 	bl	8007b2c <TimerStart>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	4b05      	ldr	r3, [pc, #20]	@ (8006d10 <eventSerial_rs232ReceiverCallback+0xac>)
 8006cfa:	701a      	strb	r2, [r3, #0]
    		                                    RS232_CONNECTION_TIMEOUT, \
												TIMER_REPEAT_FOREVER, \
												rs232TimeoutConnectionTimerCb, \
												NULL);
}
 8006cfc:	bf00      	nop
 8006cfe:	3708      	adds	r7, #8
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bdb0      	pop	{r4, r5, r7, pc}
 8006d04:	40590000 	.word	0x40590000
 8006d08:	20000058 	.word	0x20000058
 8006d0c:	0800c9fc 	.word	0x0800c9fc
 8006d10:	2000005c 	.word	0x2000005c
 8006d14:	08006c41 	.word	0x08006c41
 8006d18:	0800ca1c 	.word	0x0800ca1c

08006d1c <eventSerial_init>:
 * @func   eventSerial_init
 * @brief  None
 * @param  None
 * @retval None
 */
void eventSerial_init(void) {
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	af00      	add	r7, sp, #0
	RS232_Init(eventSerial_rs232ReceiverCallback);
 8006d20:	4802      	ldr	r0, [pc, #8]	@ (8006d2c <eventSerial_init+0x10>)
 8006d22:	f000 fbb5 	bl	8007490 <RS232_Init>
}
 8006d26:	bf00      	nop
 8006d28:	bd80      	pop	{r7, pc}
 8006d2a:	bf00      	nop
 8006d2c:	08006c65 	.word	0x08006c65

08006d30 <processSerialReceiver>:

void processSerialReceiver(void) {
 8006d30:	b580      	push	{r7, lr}
 8006d32:	af00      	add	r7, sp, #0
	RS232_ReceiverProcedure();
 8006d34:	f000 fc6c 	bl	8007610 <RS232_ReceiverProcedure>
}
 8006d38:	bf00      	nop
 8006d3a:	bd80      	pop	{r7, pc}

08006d3c <FanCtrl_SetLevel>:

void FanCtrl_Init(void) {

}

void FanCtrl_SetLevel(uint8_t level) {
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b082      	sub	sp, #8
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	4603      	mov	r3, r0
 8006d44:	71fb      	strb	r3, [r7, #7]
	if (level > 100) return;
 8006d46:	79fb      	ldrb	r3, [r7, #7]
 8006d48:	2b64      	cmp	r3, #100	@ 0x64
 8006d4a:	d813      	bhi.n	8006d74 <FanCtrl_SetLevel+0x38>

	fanLevel = level;
 8006d4c:	4a0b      	ldr	r2, [pc, #44]	@ (8006d7c <FanCtrl_SetLevel+0x40>)
 8006d4e:	79fb      	ldrb	r3, [r7, #7]
 8006d50:	7013      	strb	r3, [r2, #0]

    if (level != 0) {
 8006d52:	79fb      	ldrb	r3, [r7, #7]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d006      	beq.n	8006d66 <FanCtrl_SetLevel+0x2a>
    	HAL_GPIO_WritePin(FAN_OUT_GPIO_Port, FAN_OUT_Pin, GPIO_PIN_RESET);
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006d5e:	4808      	ldr	r0, [pc, #32]	@ (8006d80 <FanCtrl_SetLevel+0x44>)
 8006d60:	f7fc ffb8 	bl	8003cd4 <HAL_GPIO_WritePin>
 8006d64:	e007      	b.n	8006d76 <FanCtrl_SetLevel+0x3a>
    } else {
    	HAL_GPIO_WritePin(FAN_OUT_GPIO_Port, FAN_OUT_Pin, GPIO_PIN_SET);
 8006d66:	2201      	movs	r2, #1
 8006d68:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006d6c:	4804      	ldr	r0, [pc, #16]	@ (8006d80 <FanCtrl_SetLevel+0x44>)
 8006d6e:	f7fc ffb1 	bl	8003cd4 <HAL_GPIO_WritePin>
 8006d72:	e000      	b.n	8006d76 <FanCtrl_SetLevel+0x3a>
	if (level > 100) return;
 8006d74:	bf00      	nop
    }
}
 8006d76:	3708      	adds	r7, #8
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}
 8006d7c:	20000718 	.word	0x20000718
 8006d80:	40020800 	.word	0x40020800

08006d84 <FanCtrl_GetLevel>:

uint8_t FanCtrl_GetLevel(void) {
 8006d84:	b480      	push	{r7}
 8006d86:	af00      	add	r7, sp, #0
    return fanLevel;
 8006d88:	4b03      	ldr	r3, [pc, #12]	@ (8006d98 <FanCtrl_GetLevel+0x14>)
 8006d8a:	781b      	ldrb	r3, [r3, #0]
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr
 8006d96:	bf00      	nop
 8006d98:	20000718 	.word	0x20000718

08006d9c <IRCtrl_GetState>:

void IRCtrl_SetState(uint8_t state) {

}

uint8_t IRCtrl_GetState(void) {
 8006d9c:	b480      	push	{r7}
 8006d9e:	af00      	add	r7, sp, #0
    return IRState;
 8006da0:	4b03      	ldr	r3, [pc, #12]	@ (8006db0 <IRCtrl_GetState+0x14>)
 8006da2:	781b      	ldrb	r3, [r3, #0]
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	4770      	bx	lr
 8006dae:	bf00      	nop
 8006db0:	20000719 	.word	0x20000719

08006db4 <led_set_on>:
 */
static void
led_set_on(
    uint8_t byLedNumber,
    uint8_t byLedType
) {
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b082      	sub	sp, #8
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	4603      	mov	r3, r0
 8006dbc:	460a      	mov	r2, r1
 8006dbe:	71fb      	strb	r3, [r7, #7]
 8006dc0:	4613      	mov	r3, r2
 8006dc2:	71bb      	strb	r3, [r7, #6]
    if ((byLedNumber >= NUM_OF_LED) || !isTypeLED(byLedType) )
 8006dc4:	79fb      	ldrb	r3, [r7, #7]
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d814      	bhi.n	8006df4 <led_set_on+0x40>
 8006dca:	79bb      	ldrb	r3, [r7, #6]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d111      	bne.n	8006df4 <led_set_on+0x40>
        return;

    HAL_GPIO_WritePin(g_ledArray[byLedNumber][byLedType].port, \
 8006dd0:	79fa      	ldrb	r2, [r7, #7]
 8006dd2:	79bb      	ldrb	r3, [r7, #6]
 8006dd4:	4909      	ldr	r1, [pc, #36]	@ (8006dfc <led_set_on+0x48>)
 8006dd6:	4413      	add	r3, r2
 8006dd8:	f851 0033 	ldr.w	r0, [r1, r3, lsl #3]
 8006ddc:	79fa      	ldrb	r2, [r7, #7]
 8006dde:	79bb      	ldrb	r3, [r7, #6]
    		g_ledArray[byLedNumber][byLedType].pin, GPIO_PIN_SET);
 8006de0:	4906      	ldr	r1, [pc, #24]	@ (8006dfc <led_set_on+0x48>)
 8006de2:	4413      	add	r3, r2
 8006de4:	00db      	lsls	r3, r3, #3
 8006de6:	440b      	add	r3, r1
 8006de8:	889b      	ldrh	r3, [r3, #4]
    HAL_GPIO_WritePin(g_ledArray[byLedNumber][byLedType].port, \
 8006dea:	2201      	movs	r2, #1
 8006dec:	4619      	mov	r1, r3
 8006dee:	f7fc ff71 	bl	8003cd4 <HAL_GPIO_WritePin>
 8006df2:	e000      	b.n	8006df6 <led_set_on+0x42>
        return;
 8006df4:	bf00      	nop
}
 8006df6:	3708      	adds	r7, #8
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}
 8006dfc:	0800ccdc 	.word	0x0800ccdc

08006e00 <led_set_off>:
 */
static void
led_set_off(
    uint8_t byLedNumber,
    uint8_t byLedType
) {
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	4603      	mov	r3, r0
 8006e08:	460a      	mov	r2, r1
 8006e0a:	71fb      	strb	r3, [r7, #7]
 8006e0c:	4613      	mov	r3, r2
 8006e0e:	71bb      	strb	r3, [r7, #6]
    if ((byLedNumber >= NUM_OF_LED) || !isTypeLED(byLedType))
 8006e10:	79fb      	ldrb	r3, [r7, #7]
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d814      	bhi.n	8006e40 <led_set_off+0x40>
 8006e16:	79bb      	ldrb	r3, [r7, #6]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d111      	bne.n	8006e40 <led_set_off+0x40>
        return;

    HAL_GPIO_WritePin(g_ledArray[byLedNumber][byLedType].port, \
 8006e1c:	79fa      	ldrb	r2, [r7, #7]
 8006e1e:	79bb      	ldrb	r3, [r7, #6]
 8006e20:	4909      	ldr	r1, [pc, #36]	@ (8006e48 <led_set_off+0x48>)
 8006e22:	4413      	add	r3, r2
 8006e24:	f851 0033 	ldr.w	r0, [r1, r3, lsl #3]
 8006e28:	79fa      	ldrb	r2, [r7, #7]
 8006e2a:	79bb      	ldrb	r3, [r7, #6]
			g_ledArray[byLedNumber][byLedType].pin, GPIO_PIN_RESET);
 8006e2c:	4906      	ldr	r1, [pc, #24]	@ (8006e48 <led_set_off+0x48>)
 8006e2e:	4413      	add	r3, r2
 8006e30:	00db      	lsls	r3, r3, #3
 8006e32:	440b      	add	r3, r1
 8006e34:	889b      	ldrh	r3, [r3, #4]
    HAL_GPIO_WritePin(g_ledArray[byLedNumber][byLedType].port, \
 8006e36:	2200      	movs	r2, #0
 8006e38:	4619      	mov	r1, r3
 8006e3a:	f7fc ff4b 	bl	8003cd4 <HAL_GPIO_WritePin>
 8006e3e:	e000      	b.n	8006e42 <led_set_off+0x42>
        return;
 8006e40:	bf00      	nop
}
 8006e42:	3708      	adds	r7, #8
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}
 8006e48:	0800ccdc 	.word	0x0800ccdc

08006e4c <led_set_toggle>:
 */
static void
led_set_toggle(
	uint8_t byLedNumber,
	uint8_t byLedColor
) {
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b082      	sub	sp, #8
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	4603      	mov	r3, r0
 8006e54:	460a      	mov	r2, r1
 8006e56:	71fb      	strb	r3, [r7, #7]
 8006e58:	4613      	mov	r3, r2
 8006e5a:	71bb      	strb	r3, [r7, #6]
    if ((byLedNumber >= NUM_OF_LED) || (byLedColor >= CLED_MAX))
 8006e5c:	79fb      	ldrb	r3, [r7, #7]
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d825      	bhi.n	8006eae <led_set_toggle+0x62>
 8006e62:	79bb      	ldrb	r3, [r7, #6]
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d822      	bhi.n	8006eae <led_set_toggle+0x62>
        return;

    if (g_bToggleColor == false) {
 8006e68:	4b13      	ldr	r3, [pc, #76]	@ (8006eb8 <led_set_toggle+0x6c>)
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	f083 0301 	eor.w	r3, r3, #1
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d005      	beq.n	8006e82 <led_set_toggle+0x36>
		led_set_color(byLedNumber, CLED_OFF);
 8006e76:	79fb      	ldrb	r3, [r7, #7]
 8006e78:	2100      	movs	r1, #0
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f000 f81e 	bl	8006ebc <led_set_color>
 8006e80:	e005      	b.n	8006e8e <led_set_toggle+0x42>
	}
	else {
		led_set_color(byLedNumber, byLedColor);
 8006e82:	79ba      	ldrb	r2, [r7, #6]
 8006e84:	79fb      	ldrb	r3, [r7, #7]
 8006e86:	4611      	mov	r1, r2
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f000 f817 	bl	8006ebc <led_set_color>
	}

    g_bToggleColor = !g_bToggleColor;
 8006e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8006eb8 <led_set_toggle+0x6c>)
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	bf14      	ite	ne
 8006e96:	2301      	movne	r3, #1
 8006e98:	2300      	moveq	r3, #0
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	f083 0301 	eor.w	r3, r3, #1
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	f003 0301 	and.w	r3, r3, #1
 8006ea6:	b2da      	uxtb	r2, r3
 8006ea8:	4b03      	ldr	r3, [pc, #12]	@ (8006eb8 <led_set_toggle+0x6c>)
 8006eaa:	701a      	strb	r2, [r3, #0]
 8006eac:	e000      	b.n	8006eb0 <led_set_toggle+0x64>
        return;
 8006eae:	bf00      	nop
}
 8006eb0:	3708      	adds	r7, #8
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	bf00      	nop
 8006eb8:	2000072c 	.word	0x2000072c

08006ebc <led_set_color>:
 */
void
led_set_color(
    uint8_t byLedNumber,
    uint8_t byLedColor
) {
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b082      	sub	sp, #8
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	460a      	mov	r2, r1
 8006ec6:	71fb      	strb	r3, [r7, #7]
 8006ec8:	4613      	mov	r3, r2
 8006eca:	71bb      	strb	r3, [r7, #6]
    switch (byLedColor) {
 8006ecc:	79bb      	ldrb	r3, [r7, #6]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d002      	beq.n	8006ed8 <led_set_color+0x1c>
 8006ed2:	2b01      	cmp	r3, #1
 8006ed4:	d006      	beq.n	8006ee4 <led_set_color+0x28>

        case CLED_BLUE:
            led_set_on(byLedNumber, LED_TYPE_BLUE);

        default:
            break;
 8006ed6:	e00a      	b.n	8006eee <led_set_color+0x32>
            led_set_off(byLedNumber, LED_TYPE_BLUE);
 8006ed8:	79fb      	ldrb	r3, [r7, #7]
 8006eda:	2100      	movs	r1, #0
 8006edc:	4618      	mov	r0, r3
 8006ede:	f7ff ff8f 	bl	8006e00 <led_set_off>
            break;
 8006ee2:	e005      	b.n	8006ef0 <led_set_color+0x34>
            led_set_on(byLedNumber, LED_TYPE_BLUE);
 8006ee4:	79fb      	ldrb	r3, [r7, #7]
 8006ee6:	2100      	movs	r1, #0
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f7ff ff63 	bl	8006db4 <led_set_on>
            break;
 8006eee:	bf00      	nop
    }
}
 8006ef0:	bf00      	nop
 8006ef2:	3708      	adds	r7, #8
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}

08006ef8 <ledUserBlinkTimerCb>:
 * @func   ledUserBlinkTimerCb
 * @brief  Callback handle blink led user
 * @param  None
 * @retval None
 */
static void ledUserBlinkTimerCb(void *arg) {
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b082      	sub	sp, #8
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
	if (ledUserBlink.times == 0) {
 8006f00:	4b19      	ldr	r3, [pc, #100]	@ (8006f68 <ledUserBlinkTimerCb+0x70>)
 8006f02:	789b      	ldrb	r3, [r3, #2]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d10a      	bne.n	8006f1e <ledUserBlinkTimerCb+0x26>
		led_blink_stop();
 8006f08:	f000 f832 	bl	8006f70 <led_blink_stop>

		TimerStop(ledUserBlinkTimerEvt);
 8006f0c:	4b17      	ldr	r3, [pc, #92]	@ (8006f6c <ledUserBlinkTimerCb+0x74>)
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	4618      	mov	r0, r3
 8006f12:	f000 fe89 	bl	8007c28 <TimerStop>
		ledUserBlinkTimerEvt = NO_TIMER;
 8006f16:	4b15      	ldr	r3, [pc, #84]	@ (8006f6c <ledUserBlinkTimerCb+0x74>)
 8006f18:	22ff      	movs	r2, #255	@ 0xff
 8006f1a:	701a      	strb	r2, [r3, #0]
		return;
 8006f1c:	e021      	b.n	8006f62 <ledUserBlinkTimerCb+0x6a>
	}
	if ((ledUserBlink.times != BLINK_FOREVER) && (ledUserBlink.times != 0)) {
 8006f1e:	4b12      	ldr	r3, [pc, #72]	@ (8006f68 <ledUserBlinkTimerCb+0x70>)
 8006f20:	789b      	ldrb	r3, [r3, #2]
 8006f22:	2bff      	cmp	r3, #255	@ 0xff
 8006f24:	d009      	beq.n	8006f3a <ledUserBlinkTimerCb+0x42>
 8006f26:	4b10      	ldr	r3, [pc, #64]	@ (8006f68 <ledUserBlinkTimerCb+0x70>)
 8006f28:	789b      	ldrb	r3, [r3, #2]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d005      	beq.n	8006f3a <ledUserBlinkTimerCb+0x42>
		ledUserBlink.times--;
 8006f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8006f68 <ledUserBlinkTimerCb+0x70>)
 8006f30:	789b      	ldrb	r3, [r3, #2]
 8006f32:	3b01      	subs	r3, #1
 8006f34:	b2da      	uxtb	r2, r3
 8006f36:	4b0c      	ldr	r3, [pc, #48]	@ (8006f68 <ledUserBlinkTimerCb+0x70>)
 8006f38:	709a      	strb	r2, [r3, #2]
	}

	switch (ledUserBlink.type) {
 8006f3a:	4b0b      	ldr	r3, [pc, #44]	@ (8006f68 <ledUserBlinkTimerCb+0x70>)
 8006f3c:	785b      	ldrb	r3, [r3, #1]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d106      	bne.n	8006f50 <ledUserBlinkTimerCb+0x58>
		case BLINK_BLUE:
			led_set_toggle(ledUserBlink.id, CLED_BLUE);
 8006f42:	4b09      	ldr	r3, [pc, #36]	@ (8006f68 <ledUserBlinkTimerCb+0x70>)
 8006f44:	781b      	ldrb	r3, [r3, #0]
 8006f46:	2101      	movs	r1, #1
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f7ff ff7f 	bl	8006e4c <led_set_toggle>
			break;
 8006f4e:	e000      	b.n	8006f52 <ledUserBlinkTimerCb+0x5a>

		default:
			break;
 8006f50:	bf00      	nop
	}

	TimerChangePeriod(ledUserBlinkTimerEvt, ledUserBlink.interval);
 8006f52:	4b06      	ldr	r3, [pc, #24]	@ (8006f6c <ledUserBlinkTimerCb+0x74>)
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	4a04      	ldr	r2, [pc, #16]	@ (8006f68 <ledUserBlinkTimerCb+0x70>)
 8006f58:	8892      	ldrh	r2, [r2, #4]
 8006f5a:	4611      	mov	r1, r2
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f000 fe47 	bl	8007bf0 <TimerChangePeriod>
}
 8006f62:	3708      	adds	r7, #8
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}
 8006f68:	2000071c 	.word	0x2000071c
 8006f6c:	2000005d 	.word	0x2000005d

08006f70 <led_blink_stop>:
 * @func   led_blink_stop
 * @brief  Blink stop
 * @param  type:
 * @retval None
 */
static void led_blink_stop(void) {
 8006f70:	b580      	push	{r7, lr}
 8006f72:	af00      	add	r7, sp, #0
    // Return state last
	led_set_color(ledUserBlink.id, ledUserBlink.laststate);
 8006f74:	4b06      	ldr	r3, [pc, #24]	@ (8006f90 <led_blink_stop+0x20>)
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	4a05      	ldr	r2, [pc, #20]	@ (8006f90 <led_blink_stop+0x20>)
 8006f7a:	7992      	ldrb	r2, [r2, #6]
 8006f7c:	4611      	mov	r1, r2
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f7ff ff9c 	bl	8006ebc <led_set_color>

    // Reset variable to default
    ledUserBlink.times = 0;
 8006f84:	4b02      	ldr	r3, [pc, #8]	@ (8006f90 <led_blink_stop+0x20>)
 8006f86:	2200      	movs	r2, #0
 8006f88:	709a      	strb	r2, [r3, #2]
}
 8006f8a:	bf00      	nop
 8006f8c:	bd80      	pop	{r7, pc}
 8006f8e:	bf00      	nop
 8006f90:	2000071c 	.word	0x2000071c

08006f94 <led_user_blink>:
	led_blink_type_t type,
	uint8_t timesBlink,
	uint16_t timeDelay,
	led_color_t lastState,
	uint16_t delay
) {
 8006f94:	b590      	push	{r4, r7, lr}
 8006f96:	b085      	sub	sp, #20
 8006f98:	af02      	add	r7, sp, #8
 8006f9a:	4604      	mov	r4, r0
 8006f9c:	4608      	mov	r0, r1
 8006f9e:	4611      	mov	r1, r2
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	4623      	mov	r3, r4
 8006fa4:	71fb      	strb	r3, [r7, #7]
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	71bb      	strb	r3, [r7, #6]
 8006faa:	460b      	mov	r3, r1
 8006fac:	717b      	strb	r3, [r7, #5]
 8006fae:	4613      	mov	r3, r2
 8006fb0:	807b      	strh	r3, [r7, #2]
	g_bToggleColor = false;
 8006fb2:	4b17      	ldr	r3, [pc, #92]	@ (8007010 <led_user_blink+0x7c>)
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	701a      	strb	r2, [r3, #0]
	ledUserBlink.id = ledMask;
 8006fb8:	4a16      	ldr	r2, [pc, #88]	@ (8007014 <led_user_blink+0x80>)
 8006fba:	79fb      	ldrb	r3, [r7, #7]
 8006fbc:	7013      	strb	r3, [r2, #0]
	ledUserBlink.type = (uint8_t)type;
 8006fbe:	4a15      	ldr	r2, [pc, #84]	@ (8007014 <led_user_blink+0x80>)
 8006fc0:	79bb      	ldrb	r3, [r7, #6]
 8006fc2:	7053      	strb	r3, [r2, #1]
	ledUserBlink.times = timesBlink;
 8006fc4:	4a13      	ldr	r2, [pc, #76]	@ (8007014 <led_user_blink+0x80>)
 8006fc6:	797b      	ldrb	r3, [r7, #5]
 8006fc8:	7093      	strb	r3, [r2, #2]
	ledUserBlink.interval = timeDelay;
 8006fca:	4a12      	ldr	r2, [pc, #72]	@ (8007014 <led_user_blink+0x80>)
 8006fcc:	887b      	ldrh	r3, [r7, #2]
 8006fce:	8093      	strh	r3, [r2, #4]
	ledUserBlink.laststate = (uint8_t)lastState;
 8006fd0:	4a10      	ldr	r2, [pc, #64]	@ (8007014 <led_user_blink+0x80>)
 8006fd2:	7e3b      	ldrb	r3, [r7, #24]
 8006fd4:	7193      	strb	r3, [r2, #6]

	// Start timer blink
	if (ledUserBlinkTimerEvt) {
 8006fd6:	4b10      	ldr	r3, [pc, #64]	@ (8007018 <led_user_blink+0x84>)
 8006fd8:	781b      	ldrb	r3, [r3, #0]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d007      	beq.n	8006fee <led_user_blink+0x5a>
		TimerStop(ledUserBlinkTimerEvt);
 8006fde:	4b0e      	ldr	r3, [pc, #56]	@ (8007018 <led_user_blink+0x84>)
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f000 fe20 	bl	8007c28 <TimerStop>
		ledUserBlinkTimerEvt = NO_TIMER;
 8006fe8:	4b0b      	ldr	r3, [pc, #44]	@ (8007018 <led_user_blink+0x84>)
 8006fea:	22ff      	movs	r2, #255	@ 0xff
 8006fec:	701a      	strb	r2, [r3, #0]
	}
	ledUserBlinkTimerEvt = TimerStart("ledUserBlinkTimerCb", \
 8006fee:	8bb9      	ldrh	r1, [r7, #28]
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	9300      	str	r3, [sp, #0]
 8006ff4:	4b09      	ldr	r3, [pc, #36]	@ (800701c <led_user_blink+0x88>)
 8006ff6:	22ff      	movs	r2, #255	@ 0xff
 8006ff8:	4809      	ldr	r0, [pc, #36]	@ (8007020 <led_user_blink+0x8c>)
 8006ffa:	f000 fd97 	bl	8007b2c <TimerStart>
 8006ffe:	4603      	mov	r3, r0
 8007000:	461a      	mov	r2, r3
 8007002:	4b05      	ldr	r3, [pc, #20]	@ (8007018 <led_user_blink+0x84>)
 8007004:	701a      	strb	r2, [r3, #0]
			                          delay, \
									  TIMER_REPEAT_FOREVER, \
									  ledUserBlinkTimerCb, \
									  NULL);
}
 8007006:	bf00      	nop
 8007008:	370c      	adds	r7, #12
 800700a:	46bd      	mov	sp, r7
 800700c:	bd90      	pop	{r4, r7, pc}
 800700e:	bf00      	nop
 8007010:	2000072c 	.word	0x2000072c
 8007014:	2000071c 	.word	0x2000071c
 8007018:	2000005d 	.word	0x2000005d
 800701c:	08006ef9 	.word	0x08006ef9
 8007020:	0800ca34 	.word	0x0800ca34

08007024 <ledNetworkBlinkTimerCb>:
 * @func   ledNetworkBlinkTimerCb
 * @brief  Callback handle blink led network
 * @param  None
 * @retval None
 */
static void ledNetworkBlinkTimerCb(void *arg) {
 8007024:	b580      	push	{r7, lr}
 8007026:	b082      	sub	sp, #8
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
	if (ledNetworkBlink.times == 0) {
 800702c:	4b16      	ldr	r3, [pc, #88]	@ (8007088 <ledNetworkBlinkTimerCb+0x64>)
 800702e:	789b      	ldrb	r3, [r3, #2]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d10c      	bne.n	800704e <ledNetworkBlinkTimerCb+0x2a>
		led_set_color(LED_ID_NETWORK, CLED_BLUE);
 8007034:	2101      	movs	r1, #1
 8007036:	2000      	movs	r0, #0
 8007038:	f7ff ff40 	bl	8006ebc <led_set_color>
		TimerStop(ledNetworkBlinkTimerEvt);
 800703c:	4b13      	ldr	r3, [pc, #76]	@ (800708c <ledNetworkBlinkTimerCb+0x68>)
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	4618      	mov	r0, r3
 8007042:	f000 fdf1 	bl	8007c28 <TimerStop>
		ledNetworkBlinkTimerEvt = NO_TIMER;
 8007046:	4b11      	ldr	r3, [pc, #68]	@ (800708c <ledNetworkBlinkTimerCb+0x68>)
 8007048:	22ff      	movs	r2, #255	@ 0xff
 800704a:	701a      	strb	r2, [r3, #0]
		return;
 800704c:	e018      	b.n	8007080 <ledNetworkBlinkTimerCb+0x5c>
	}
	if ((ledNetworkBlink.times != BLINK_FOREVER) && (ledNetworkBlink.times != 0)) {
 800704e:	4b0e      	ldr	r3, [pc, #56]	@ (8007088 <ledNetworkBlinkTimerCb+0x64>)
 8007050:	789b      	ldrb	r3, [r3, #2]
 8007052:	2bff      	cmp	r3, #255	@ 0xff
 8007054:	d009      	beq.n	800706a <ledNetworkBlinkTimerCb+0x46>
 8007056:	4b0c      	ldr	r3, [pc, #48]	@ (8007088 <ledNetworkBlinkTimerCb+0x64>)
 8007058:	789b      	ldrb	r3, [r3, #2]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d005      	beq.n	800706a <ledNetworkBlinkTimerCb+0x46>
		ledNetworkBlink.times--;
 800705e:	4b0a      	ldr	r3, [pc, #40]	@ (8007088 <ledNetworkBlinkTimerCb+0x64>)
 8007060:	789b      	ldrb	r3, [r3, #2]
 8007062:	3b01      	subs	r3, #1
 8007064:	b2da      	uxtb	r2, r3
 8007066:	4b08      	ldr	r3, [pc, #32]	@ (8007088 <ledNetworkBlinkTimerCb+0x64>)
 8007068:	709a      	strb	r2, [r3, #2]
	}

	led_set_toggle(LED_ID_NETWORK, CLED_BLUE);
 800706a:	2101      	movs	r1, #1
 800706c:	2000      	movs	r0, #0
 800706e:	f7ff feed 	bl	8006e4c <led_set_toggle>
	TimerChangePeriod(ledNetworkBlinkTimerEvt, 300);
 8007072:	4b06      	ldr	r3, [pc, #24]	@ (800708c <ledNetworkBlinkTimerCb+0x68>)
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800707a:	4618      	mov	r0, r3
 800707c:	f000 fdb8 	bl	8007bf0 <TimerChangePeriod>
}
 8007080:	3708      	adds	r7, #8
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}
 8007086:	bf00      	nop
 8007088:	20000724 	.word	0x20000724
 800708c:	2000005e 	.word	0x2000005e

08007090 <led_network_blink>:

static void led_network_blink(
	uint8_t numBlink,
	uint16_t interval,
	led_color_t lastState
) {
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af02      	add	r7, sp, #8
 8007096:	4603      	mov	r3, r0
 8007098:	71fb      	strb	r3, [r7, #7]
 800709a:	460b      	mov	r3, r1
 800709c:	80bb      	strh	r3, [r7, #4]
 800709e:	4613      	mov	r3, r2
 80070a0:	71bb      	strb	r3, [r7, #6]
	ledNetworkBlink.times = numBlink;
 80070a2:	4a12      	ldr	r2, [pc, #72]	@ (80070ec <led_network_blink+0x5c>)
 80070a4:	79fb      	ldrb	r3, [r7, #7]
 80070a6:	7093      	strb	r3, [r2, #2]
	ledNetworkBlink.interval = interval;
 80070a8:	4a10      	ldr	r2, [pc, #64]	@ (80070ec <led_network_blink+0x5c>)
 80070aa:	88bb      	ldrh	r3, [r7, #4]
 80070ac:	8093      	strh	r3, [r2, #4]
	ledNetworkBlink.laststate = (uint8_t)lastState;
 80070ae:	4a0f      	ldr	r2, [pc, #60]	@ (80070ec <led_network_blink+0x5c>)
 80070b0:	79bb      	ldrb	r3, [r7, #6]
 80070b2:	7193      	strb	r3, [r2, #6]

	// Start timer blink
	if (ledNetworkBlinkTimerEvt) {
 80070b4:	4b0e      	ldr	r3, [pc, #56]	@ (80070f0 <led_network_blink+0x60>)
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d007      	beq.n	80070cc <led_network_blink+0x3c>
		TimerStop(ledNetworkBlinkTimerEvt);
 80070bc:	4b0c      	ldr	r3, [pc, #48]	@ (80070f0 <led_network_blink+0x60>)
 80070be:	781b      	ldrb	r3, [r3, #0]
 80070c0:	4618      	mov	r0, r3
 80070c2:	f000 fdb1 	bl	8007c28 <TimerStop>
		ledNetworkBlinkTimerEvt = NO_TIMER;
 80070c6:	4b0a      	ldr	r3, [pc, #40]	@ (80070f0 <led_network_blink+0x60>)
 80070c8:	22ff      	movs	r2, #255	@ 0xff
 80070ca:	701a      	strb	r2, [r3, #0]
	}
	ledNetworkBlinkTimerEvt = TimerStart("ledNetworkBlinkTimerCb", \
 80070cc:	2300      	movs	r3, #0
 80070ce:	9300      	str	r3, [sp, #0]
 80070d0:	4b08      	ldr	r3, [pc, #32]	@ (80070f4 <led_network_blink+0x64>)
 80070d2:	22ff      	movs	r2, #255	@ 0xff
 80070d4:	2101      	movs	r1, #1
 80070d6:	4808      	ldr	r0, [pc, #32]	@ (80070f8 <led_network_blink+0x68>)
 80070d8:	f000 fd28 	bl	8007b2c <TimerStart>
 80070dc:	4603      	mov	r3, r0
 80070de:	461a      	mov	r2, r3
 80070e0:	4b03      	ldr	r3, [pc, #12]	@ (80070f0 <led_network_blink+0x60>)
 80070e2:	701a      	strb	r2, [r3, #0]
			                             TIME_DELAY_EVENT_LED_BLINKS, \
									     TIMER_REPEAT_FOREVER, \
										 ledNetworkBlinkTimerCb, \
									     NULL);
}
 80070e4:	bf00      	nop
 80070e6:	3708      	adds	r7, #8
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}
 80070ec:	20000724 	.word	0x20000724
 80070f0:	2000005e 	.word	0x2000005e
 80070f4:	08007025 	.word	0x08007025
 80070f8:	0800ca48 	.word	0x0800ca48

080070fc <led_event_show>:
 * @param  led_event_t ev
 * @retval None
 */
void led_event_show(
	led_event_t ev
) {
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b084      	sub	sp, #16
 8007100:	af02      	add	r7, sp, #8
 8007102:	4603      	mov	r3, r0
 8007104:	71fb      	strb	r3, [r7, #7]
    switch (ev) {
 8007106:	79fb      	ldrb	r3, [r7, #7]
 8007108:	3b01      	subs	r3, #1
 800710a:	2b0d      	cmp	r3, #13
 800710c:	d854      	bhi.n	80071b8 <led_event_show+0xbc>
 800710e:	a201      	add	r2, pc, #4	@ (adr r2, 8007114 <led_event_show+0x18>)
 8007110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007114:	080071b9 	.word	0x080071b9
 8007118:	08007173 	.word	0x08007173
 800711c:	080071b9 	.word	0x080071b9
 8007120:	080071b9 	.word	0x080071b9
 8007124:	080071b9 	.word	0x080071b9
 8007128:	080071b9 	.word	0x080071b9
 800712c:	080071b9 	.word	0x080071b9
 8007130:	080071b9 	.word	0x080071b9
 8007134:	0800714d 	.word	0x0800714d
 8007138:	08007157 	.word	0x08007157
 800713c:	08007165 	.word	0x08007165
 8007140:	08007189 	.word	0x08007189
 8007144:	080071a1 	.word	0x080071a1
 8007148:	080071b9 	.word	0x080071b9
		case LEDEV_POWERUP:
			break;

		case LEDEV_NETWORK_NONE:
			led_set_color(LED_ID_NETWORK, CLED_OFF);
 800714c:	2100      	movs	r1, #0
 800714e:	2000      	movs	r0, #0
 8007150:	f7ff feb4 	bl	8006ebc <led_set_color>
			break;
 8007154:	e031      	b.n	80071ba <led_event_show+0xbe>

		case LEDEV_NETWORK_JOINED:
			led_network_blink(6, 300, CLED_BLUE);
 8007156:	2201      	movs	r2, #1
 8007158:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800715c:	2006      	movs	r0, #6
 800715e:	f7ff ff97 	bl	8007090 <led_network_blink>
			break;
 8007162:	e02a      	b.n	80071ba <led_event_show+0xbe>

		case LEDEV_NETWORK_LEAVE:
			led_network_blink(10, 500, CLED_OFF);
 8007164:	2200      	movs	r2, #0
 8007166:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800716a:	200a      	movs	r0, #10
 800716c:	f7ff ff90 	bl	8007090 <led_network_blink>
			break;
 8007170:	e023      	b.n	80071ba <led_event_show+0xbe>

		case LEDEV_BT_PRESS:
			led_user_blink(LED_ID_USER, BLINK_BLUE, 2, 100, CLED_OFF, TIME_DELAY_EVENT_LED_BLINKS);
 8007172:	2301      	movs	r3, #1
 8007174:	9301      	str	r3, [sp, #4]
 8007176:	2300      	movs	r3, #0
 8007178:	9300      	str	r3, [sp, #0]
 800717a:	2364      	movs	r3, #100	@ 0x64
 800717c:	2202      	movs	r2, #2
 800717e:	2100      	movs	r1, #0
 8007180:	2001      	movs	r0, #1
 8007182:	f7ff ff07 	bl	8006f94 <led_user_blink>
			break;
 8007186:	e018      	b.n	80071ba <led_event_show+0xbe>

		case LEDEV_BT_HOLDED_5S:
			break;

		case LEDEV_BTS_CONTROL_SUCCESS:
			led_user_blink(LED_ID_USER, BLINK_BLUE, 2, 300, CLED_OFF, TIME_DELAY_EVENT_LED_BLINKS);
 8007188:	2301      	movs	r3, #1
 800718a:	9301      	str	r3, [sp, #4]
 800718c:	2300      	movs	r3, #0
 800718e:	9300      	str	r3, [sp, #0]
 8007190:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8007194:	2202      	movs	r2, #2
 8007196:	2100      	movs	r1, #0
 8007198:	2001      	movs	r0, #1
 800719a:	f7ff fefb 	bl	8006f94 <led_user_blink>
			break;
 800719e:	e00c      	b.n	80071ba <led_event_show+0xbe>

		case LEDEV_BTS_CONTROL_ID_FAIL:
			led_user_blink(LED_ID_USER, BLINK_BLUE,  4, 300, CLED_OFF, TIME_DELAY_EVENT_LED_BLINKS);
 80071a0:	2301      	movs	r3, #1
 80071a2:	9301      	str	r3, [sp, #4]
 80071a4:	2300      	movs	r3, #0
 80071a6:	9300      	str	r3, [sp, #0]
 80071a8:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80071ac:	2204      	movs	r2, #4
 80071ae:	2100      	movs	r1, #0
 80071b0:	2001      	movs	r0, #1
 80071b2:	f7ff feef 	bl	8006f94 <led_user_blink>
			break;
 80071b6:	e000      	b.n	80071ba <led_event_show+0xbe>

		case LEDEV_OTA_PROCESS:
			break;

		default:
			break;
 80071b8:	bf00      	nop
    }
}
 80071ba:	bf00      	nop
 80071bc:	3708      	adds	r7, #8
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}
 80071c2:	bf00      	nop

080071c4 <LM35_Init>:
/******************************************************************************/
/******************************************************************************/
/*                            EXPORTED FUNCTIONS                              */
/******************************************************************************/

void LM35_Init(adc_get_value_callback callback) {
 80071c4:	b480      	push	{r7}
 80071c6:	b083      	sub	sp, #12
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
	if (callback != NULL) {
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d002      	beq.n	80071d8 <LM35_Init+0x14>
		pLM35GetADCValueCallbacks = callback;
 80071d2:	4a04      	ldr	r2, [pc, #16]	@ (80071e4 <LM35_Init+0x20>)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6013      	str	r3, [r2, #0]
	}
}
 80071d8:	bf00      	nop
 80071da:	370c      	adds	r7, #12
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr
 80071e4:	20000730 	.word	0x20000730

080071e8 <LM35_GetTempCel>:

float LM35_GetTempCel(uint8_t channel)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b084      	sub	sp, #16
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	4603      	mov	r3, r0
 80071f0:	71fb      	strb	r3, [r7, #7]
   float tempC = ((float)pLM35GetADCValueCallbacks(channel) * LM35_VREF * 100.0) / ADC_RESOLUTION;
 80071f2:	4b27      	ldr	r3, [pc, #156]	@ (8007290 <LM35_GetTempCel+0xa8>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	79fa      	ldrb	r2, [r7, #7]
 80071f8:	4610      	mov	r0, r2
 80071fa:	4798      	blx	r3
 80071fc:	4603      	mov	r3, r0
 80071fe:	ee07 3a90 	vmov	s15, r3
 8007202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007206:	ee17 0a90 	vmov	r0, s15
 800720a:	f7f9 f9a5 	bl	8000558 <__aeabi_f2d>
 800720e:	f04f 0200 	mov.w	r2, #0
 8007212:	4b20      	ldr	r3, [pc, #128]	@ (8007294 <LM35_GetTempCel+0xac>)
 8007214:	f7f9 f9f8 	bl	8000608 <__aeabi_dmul>
 8007218:	4602      	mov	r2, r0
 800721a:	460b      	mov	r3, r1
 800721c:	4610      	mov	r0, r2
 800721e:	4619      	mov	r1, r3
 8007220:	f04f 0200 	mov.w	r2, #0
 8007224:	4b1c      	ldr	r3, [pc, #112]	@ (8007298 <LM35_GetTempCel+0xb0>)
 8007226:	f7f9 f9ef 	bl	8000608 <__aeabi_dmul>
 800722a:	4602      	mov	r2, r0
 800722c:	460b      	mov	r3, r1
 800722e:	4610      	mov	r0, r2
 8007230:	4619      	mov	r1, r3
 8007232:	a315      	add	r3, pc, #84	@ (adr r3, 8007288 <LM35_GetTempCel+0xa0>)
 8007234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007238:	f7f9 fb10 	bl	800085c <__aeabi_ddiv>
 800723c:	4602      	mov	r2, r0
 800723e:	460b      	mov	r3, r1
 8007240:	4610      	mov	r0, r2
 8007242:	4619      	mov	r1, r3
 8007244:	f7f9 fcb8 	bl	8000bb8 <__aeabi_d2f>
 8007248:	4603      	mov	r3, r0
 800724a:	60fb      	str	r3, [r7, #12]

   if ((tempC < LM35_TEMP_THRESHOLD_LOW) || (tempC > LM35_TEMP_THRESHOLD_HIGH)) {
 800724c:	edd7 7a03 	vldr	s15, [r7, #12]
 8007250:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8007254:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800725c:	d408      	bmi.n	8007270 <LM35_GetTempCel+0x88>
 800725e:	edd7 7a03 	vldr	s15, [r7, #12]
 8007262:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800729c <LM35_GetTempCel+0xb4>
 8007266:	eef4 7ac7 	vcmpe.f32	s15, s14
 800726a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800726e:	dd01      	ble.n	8007274 <LM35_GetTempCel+0x8c>
	   return -1;
 8007270:	4b0b      	ldr	r3, [pc, #44]	@ (80072a0 <LM35_GetTempCel+0xb8>)
 8007272:	e000      	b.n	8007276 <LM35_GetTempCel+0x8e>
   }

   return tempC;
 8007274:	68fb      	ldr	r3, [r7, #12]
}
 8007276:	ee07 3a90 	vmov	s15, r3
 800727a:	eeb0 0a67 	vmov.f32	s0, s15
 800727e:	3710      	adds	r7, #16
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}
 8007284:	f3af 8000 	nop.w
 8007288:	00000000 	.word	0x00000000
 800728c:	40affe00 	.word	0x40affe00
 8007290:	20000730 	.word	0x20000730
 8007294:	40140000 	.word	0x40140000
 8007298:	40590000 	.word	0x40590000
 800729c:	42c80000 	.word	0x42c80000
 80072a0:	bf800000 	.word	0xbf800000

080072a4 <MQ135_Init>:
float _rload = 76.63; // The load resistance on the board in kOhm
float _rzero = 76.63; // Calibration resistance at atmospheric CO2 level

static adc_get_value_callback pMQ135GetADCValueCallbacks;

void MQ135_Init(adc_get_value_callback callback) {
 80072a4:	b480      	push	{r7}
 80072a6:	b083      	sub	sp, #12
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
	if (callback != NULL) {
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d002      	beq.n	80072b8 <MQ135_Init+0x14>
		pMQ135GetADCValueCallbacks = callback;
 80072b2:	4a04      	ldr	r2, [pc, #16]	@ (80072c4 <MQ135_Init+0x20>)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6013      	str	r3, [r2, #0]
	}
}
 80072b8:	bf00      	nop
 80072ba:	370c      	adds	r7, #12
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr
 80072c4:	20000734 	.word	0x20000734

080072c8 <MQ135_GetResistance>:
		back garbage values!

@return The sensor resistance in kOhm
*/
/**************************************************************************/
float MQ135_GetResistance() {
 80072c8:	b5b0      	push	{r4, r5, r7, lr}
 80072ca:	b082      	sub	sp, #8
 80072cc:	af00      	add	r7, sp, #0
  int val = pMQ135GetADCValueCallbacks(ADC_CHANNEL_MQ135_SENSOR);
 80072ce:	4b20      	ldr	r3, [pc, #128]	@ (8007350 <MQ135_GetResistance+0x88>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	2002      	movs	r0, #2
 80072d4:	4798      	blx	r3
 80072d6:	4603      	mov	r3, r0
 80072d8:	607b      	str	r3, [r7, #4]
  return ((4095./(float)val) - 1.)*_rload;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	ee07 3a90 	vmov	s15, r3
 80072e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80072e4:	ee17 0a90 	vmov	r0, s15
 80072e8:	f7f9 f936 	bl	8000558 <__aeabi_f2d>
 80072ec:	4602      	mov	r2, r0
 80072ee:	460b      	mov	r3, r1
 80072f0:	a115      	add	r1, pc, #84	@ (adr r1, 8007348 <MQ135_GetResistance+0x80>)
 80072f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80072f6:	f7f9 fab1 	bl	800085c <__aeabi_ddiv>
 80072fa:	4602      	mov	r2, r0
 80072fc:	460b      	mov	r3, r1
 80072fe:	4610      	mov	r0, r2
 8007300:	4619      	mov	r1, r3
 8007302:	f04f 0200 	mov.w	r2, #0
 8007306:	4b13      	ldr	r3, [pc, #76]	@ (8007354 <MQ135_GetResistance+0x8c>)
 8007308:	f7f8 ffc6 	bl	8000298 <__aeabi_dsub>
 800730c:	4602      	mov	r2, r0
 800730e:	460b      	mov	r3, r1
 8007310:	4614      	mov	r4, r2
 8007312:	461d      	mov	r5, r3
 8007314:	4b10      	ldr	r3, [pc, #64]	@ (8007358 <MQ135_GetResistance+0x90>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4618      	mov	r0, r3
 800731a:	f7f9 f91d 	bl	8000558 <__aeabi_f2d>
 800731e:	4602      	mov	r2, r0
 8007320:	460b      	mov	r3, r1
 8007322:	4620      	mov	r0, r4
 8007324:	4629      	mov	r1, r5
 8007326:	f7f9 f96f 	bl	8000608 <__aeabi_dmul>
 800732a:	4602      	mov	r2, r0
 800732c:	460b      	mov	r3, r1
 800732e:	4610      	mov	r0, r2
 8007330:	4619      	mov	r1, r3
 8007332:	f7f9 fc41 	bl	8000bb8 <__aeabi_d2f>
 8007336:	4603      	mov	r3, r0
 8007338:	ee07 3a90 	vmov	s15, r3
}
 800733c:	eeb0 0a67 	vmov.f32	s0, s15
 8007340:	3708      	adds	r7, #8
 8007342:	46bd      	mov	sp, r7
 8007344:	bdb0      	pop	{r4, r5, r7, pc}
 8007346:	bf00      	nop
 8007348:	00000000 	.word	0x00000000
 800734c:	40affe00 	.word	0x40affe00
 8007350:	20000734 	.word	0x20000734
 8007354:	3ff00000 	.word	0x3ff00000
 8007358:	20000060 	.word	0x20000060
 800735c:	00000000 	.word	0x00000000

08007360 <MQ135_GetPPM>:
@brief  Get the ppm of CO2 sensed (assuming only CO2 in the air)

@return The ppm of CO2 in the air
*/
/**************************************************************************/
float MQ135_GetPPM(void) {
 8007360:	b580      	push	{r7, lr}
 8007362:	af00      	add	r7, sp, #0
  return PARA * pow((MQ135_GetResistance()/_rzero), -PARB);
 8007364:	f7ff ffb0 	bl	80072c8 <MQ135_GetResistance>
 8007368:	eeb0 7a40 	vmov.f32	s14, s0
 800736c:	4b16      	ldr	r3, [pc, #88]	@ (80073c8 <MQ135_GetPPM+0x68>)
 800736e:	edd3 7a00 	vldr	s15, [r3]
 8007372:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007376:	ee16 0a90 	vmov	r0, s13
 800737a:	f7f9 f8ed 	bl	8000558 <__aeabi_f2d>
 800737e:	4602      	mov	r2, r0
 8007380:	460b      	mov	r3, r1
 8007382:	ed9f 1b0d 	vldr	d1, [pc, #52]	@ 80073b8 <MQ135_GetPPM+0x58>
 8007386:	ec43 2b10 	vmov	d0, r2, r3
 800738a:	f004 fa67 	bl	800b85c <pow>
 800738e:	ec51 0b10 	vmov	r0, r1, d0
 8007392:	a30b      	add	r3, pc, #44	@ (adr r3, 80073c0 <MQ135_GetPPM+0x60>)
 8007394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007398:	f7f9 f936 	bl	8000608 <__aeabi_dmul>
 800739c:	4602      	mov	r2, r0
 800739e:	460b      	mov	r3, r1
 80073a0:	4610      	mov	r0, r2
 80073a2:	4619      	mov	r1, r3
 80073a4:	f7f9 fc08 	bl	8000bb8 <__aeabi_d2f>
 80073a8:	4603      	mov	r3, r0
 80073aa:	ee07 3a90 	vmov	s15, r3
}
 80073ae:	eeb0 0a67 	vmov.f32	s0, s15
 80073b2:	bd80      	pop	{r7, pc}
 80073b4:	f3af 8000 	nop.w
 80073b8:	bf42646d 	.word	0xbf42646d
 80073bc:	c00626fb 	.word	0xc00626fb
 80073c0:	490f3d8b 	.word	0x490f3d8b
 80073c4:	405d2688 	.word	0x405d2688
 80073c8:	20000064 	.word	0x20000064

080073cc <RainWater_Init>:
/******************************************************************************/
/******************************************************************************/
/*                            EXPORTED FUNCTIONS                              */
/******************************************************************************/

void RainWater_Init(adc_get_value_callback callback) {
 80073cc:	b480      	push	{r7}
 80073ce:	b083      	sub	sp, #12
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
	if (callback != NULL) {
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d002      	beq.n	80073e0 <RainWater_Init+0x14>
		pRainWaterGetADCValueCallbacks = callback;
 80073da:	4a04      	ldr	r2, [pc, #16]	@ (80073ec <RainWater_Init+0x20>)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6013      	str	r3, [r2, #0]
	}
}
 80073e0:	bf00      	nop
 80073e2:	370c      	adds	r7, #12
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr
 80073ec:	20000738 	.word	0x20000738

080073f0 <RainWater_GetCounterRaw>:

uint16_t RainWater_GetCounterRaw(void) {
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b082      	sub	sp, #8
 80073f4:	af00      	add	r7, sp, #0
	uint16_t level = 0;
 80073f6:	2300      	movs	r3, #0
 80073f8:	80fb      	strh	r3, [r7, #6]

    for (uint8_t sample = 0; sample < WATER_SAMPLE_COUNTER_MAX; sample++) {
 80073fa:	2300      	movs	r3, #0
 80073fc:	717b      	strb	r3, [r7, #5]
 80073fe:	e00e      	b.n	800741e <RainWater_GetCounterRaw+0x2e>
    	level += pRainWaterGetADCValueCallbacks(ADC_CHANNEL_WATER_SENSOR); // Read the analog value form sensor
 8007400:	4b0e      	ldr	r3, [pc, #56]	@ (800743c <RainWater_GetCounterRaw+0x4c>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	2003      	movs	r0, #3
 8007406:	4798      	blx	r3
 8007408:	4603      	mov	r3, r0
 800740a:	461a      	mov	r2, r3
 800740c:	88fb      	ldrh	r3, [r7, #6]
 800740e:	4413      	add	r3, r2
 8007410:	80fb      	strh	r3, [r7, #6]
    	HAL_Delay(1);
 8007412:	2001      	movs	r0, #1
 8007414:	f7fb f8b4 	bl	8002580 <HAL_Delay>
    for (uint8_t sample = 0; sample < WATER_SAMPLE_COUNTER_MAX; sample++) {
 8007418:	797b      	ldrb	r3, [r7, #5]
 800741a:	3301      	adds	r3, #1
 800741c:	717b      	strb	r3, [r7, #5]
 800741e:	797b      	ldrb	r3, [r7, #5]
 8007420:	2b13      	cmp	r3, #19
 8007422:	d9ed      	bls.n	8007400 <RainWater_GetCounterRaw+0x10>
    }
    level /= WATER_SAMPLE_COUNTER_MAX;
 8007424:	88fb      	ldrh	r3, [r7, #6]
 8007426:	4a06      	ldr	r2, [pc, #24]	@ (8007440 <RainWater_GetCounterRaw+0x50>)
 8007428:	fba2 2303 	umull	r2, r3, r2, r3
 800742c:	091b      	lsrs	r3, r3, #4
 800742e:	80fb      	strh	r3, [r7, #6]

    return level;
 8007430:	88fb      	ldrh	r3, [r7, #6]
}
 8007432:	4618      	mov	r0, r3
 8007434:	3708      	adds	r7, #8
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
 800743a:	bf00      	nop
 800743c:	20000738 	.word	0x20000738
 8007440:	cccccccd 	.word	0xcccccccd

08007444 <RainWater_GetLevelState>:

water_level_state RainWater_GetLevelState(void) {
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
	water_level_state state;
	uint16_t rawCounter = RainWater_GetCounterRaw();
 800744a:	f7ff ffd1 	bl	80073f0 <RainWater_GetCounterRaw>
 800744e:	4603      	mov	r3, r0
 8007450:	80bb      	strh	r3, [r7, #4]

	if (rawCounter <= WATER_LEVEL_LOWER_THRESHOLD) {
 8007452:	88bb      	ldrh	r3, [r7, #4]
 8007454:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 8007458:	d802      	bhi.n	8007460 <RainWater_GetLevelState+0x1c>
		state = WATER_LEVEL_LOW;
 800745a:	2300      	movs	r3, #0
 800745c:	71fb      	strb	r3, [r7, #7]
 800745e:	e012      	b.n	8007486 <RainWater_GetLevelState+0x42>
//		printf("Water Level: Low\n");

	}
	else if ((rawCounter > WATER_LEVEL_LOWER_THRESHOLD) && \
 8007460:	88bb      	ldrh	r3, [r7, #4]
 8007462:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 8007466:	d907      	bls.n	8007478 <RainWater_GetLevelState+0x34>
 8007468:	88bb      	ldrh	r3, [r7, #4]
 800746a:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 800746e:	4293      	cmp	r3, r2
 8007470:	d802      	bhi.n	8007478 <RainWater_GetLevelState+0x34>
		(rawCounter <= WATER_LEVEL_UPPER_THRESHOLD))
	{
		state = WATER_LEVEL_MEDIUM;
 8007472:	2301      	movs	r3, #1
 8007474:	71fb      	strb	r3, [r7, #7]
 8007476:	e006      	b.n	8007486 <RainWater_GetLevelState+0x42>
//		printf("Water Level: Medium\n");
	}
	else if (rawCounter > WATER_LEVEL_UPPER_THRESHOLD) {
 8007478:	88bb      	ldrh	r3, [r7, #4]
 800747a:	f240 62a4 	movw	r2, #1700	@ 0x6a4
 800747e:	4293      	cmp	r3, r2
 8007480:	d901      	bls.n	8007486 <RainWater_GetLevelState+0x42>
		state = WATER_LEVEL_HIGH;
 8007482:	2302      	movs	r3, #2
 8007484:	71fb      	strb	r3, [r7, #7]
//		printf("Water Level: High\n");

	}

	return state;
 8007486:	79fb      	ldrb	r3, [r7, #7]
}
 8007488:	4618      	mov	r0, r3
 800748a:	3708      	adds	r7, #8
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}

08007490 <RS232_Init>:
 * @func   RS232_Init
 * @brief  Initialize UART and receive buffer register
 * @param  None
 * @retval None
 */
void RS232_Init(rs232_receiver_handle_event pReceiverCallback) {
 8007490:	b580      	push	{r7, lr}
 8007492:	b082      	sub	sp, #8
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
	// Initialize callback handler data receive UART3
	if (pReceiverCallback != NULL) {
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d002      	beq.n	80074a4 <RS232_Init+0x14>
		pRS232ReceiverEventCallback = pReceiverCallback;
 800749e:	4a0d      	ldr	r2, [pc, #52]	@ (80074d4 <RS232_Init+0x44>)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6013      	str	r3, [r2, #0]
	}

    /* Initializes receive register buffer  */
    bufInit(pBuffDataRx, &serialQueueRx, sizeof(pBuffDataRx[0]), SIZE_BUFF_DATA_RX);
 80074a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80074a8:	2201      	movs	r2, #1
 80074aa:	490b      	ldr	r1, [pc, #44]	@ (80074d8 <RS232_Init+0x48>)
 80074ac:	480b      	ldr	r0, [pc, #44]	@ (80074dc <RS232_Init+0x4c>)
 80074ae:	f000 fd09 	bl	8007ec4 <bufInit>
	UART_RegBufferRx(USART3_IDX, &serialQueueRx);
 80074b2:	4909      	ldr	r1, [pc, #36]	@ (80074d8 <RS232_Init+0x48>)
 80074b4:	2000      	movs	r0, #0
 80074b6:	f000 f8d5 	bl	8007664 <UART_RegBufferRx>

    /* Initializes UART6 */
	byRxBufState = (uint8_t)RS232_RX_STATE_START_BYTE;
 80074ba:	4b09      	ldr	r3, [pc, #36]	@ (80074e0 <RS232_Init+0x50>)
 80074bc:	2200      	movs	r2, #0
 80074be:	701a      	strb	r2, [r3, #0]

	HAL_UART_Receive_IT(&huart6, &rxData, 1);
 80074c0:	2201      	movs	r2, #1
 80074c2:	4908      	ldr	r1, [pc, #32]	@ (80074e4 <RS232_Init+0x54>)
 80074c4:	4808      	ldr	r0, [pc, #32]	@ (80074e8 <RS232_Init+0x58>)
 80074c6:	f7fd ffc3 	bl	8005450 <HAL_UART_Receive_IT>
}
 80074ca:	bf00      	nop
 80074cc:	3708      	adds	r7, #8
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
 80074d2:	bf00      	nop
 80074d4:	200008d8 	.word	0x200008d8
 80074d8:	200007c4 	.word	0x200007c4
 80074dc:	200007d4 	.word	0x200007d4
 80074e0:	2000073d 	.word	0x2000073d
 80074e4:	2000073c 	.word	0x2000073c
 80074e8:	200003dc 	.word	0x200003dc

080074ec <RS232_PollRxBuffer>:
 * @func   RS232_PollRxBuffer
 * @brief  Process received data
 * @param  None
 * @retval byUartState: uart state received
 */
uint8_t RS232_PollRxBuffer(void) {
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b082      	sub	sp, #8
 80074f0:	af00      	add	r7, sp, #0
    uint8_t byRxData;
    uint8_t byUartState = (uint8_t)RS232_UART_STATE_IDLE;
 80074f2:	2300      	movs	r3, #0
 80074f4:	71fb      	strb	r3, [r7, #7]
    
    while ((bufNumItems(&serialQueueRx) != 0) && (byUartState == RS232_UART_STATE_IDLE))
 80074f6:	e061      	b.n	80075bc <RS232_PollRxBuffer+0xd0>
    {
        bufDeDat(&serialQueueRx, &byRxData);
 80074f8:	1dbb      	adds	r3, r7, #6
 80074fa:	4619      	mov	r1, r3
 80074fc:	483e      	ldr	r0, [pc, #248]	@ (80075f8 <RS232_PollRxBuffer+0x10c>)
 80074fe:	f000 fd96 	bl	800802e <bufDeDat>

//        printf("deq: %x(%d)\n", byRxData, byRxBufState);

        switch (byRxBufState) {
 8007502:	4b3e      	ldr	r3, [pc, #248]	@ (80075fc <RS232_PollRxBuffer+0x110>)
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	2b02      	cmp	r3, #2
 8007508:	d04a      	beq.n	80075a0 <RS232_PollRxBuffer+0xb4>
 800750a:	2b02      	cmp	r3, #2
 800750c:	dc52      	bgt.n	80075b4 <RS232_PollRxBuffer+0xc8>
 800750e:	2b00      	cmp	r3, #0
 8007510:	d002      	beq.n	8007518 <RS232_PollRxBuffer+0x2c>
 8007512:	2b01      	cmp	r3, #1
 8007514:	d015      	beq.n	8007542 <RS232_PollRxBuffer+0x56>
 8007516:	e04d      	b.n	80075b4 <RS232_PollRxBuffer+0xc8>
            case RS232_RX_STATE_START_BYTE:
                if (byRxData == RS232_FRAME_SOF) {
 8007518:	79bb      	ldrb	r3, [r7, #6]
 800751a:	2b55      	cmp	r3, #85	@ 0x55
 800751c:	d10e      	bne.n	800753c <RS232_PollRxBuffer+0x50>
                	byIndexRxBuffer = 0;
 800751e:	4b38      	ldr	r3, [pc, #224]	@ (8007600 <RS232_PollRxBuffer+0x114>)
 8007520:	2200      	movs	r2, #0
 8007522:	701a      	strb	r2, [r3, #0]
                	byCheckXorRxBuf = RS232_FRAME_SOF;
 8007524:	4b37      	ldr	r3, [pc, #220]	@ (8007604 <RS232_PollRxBuffer+0x118>)
 8007526:	2255      	movs	r2, #85	@ 0x55
 8007528:	701a      	strb	r2, [r3, #0]
                    byRxBufState = RS232_RX_STATE_DATA_BYTES;
 800752a:	4b34      	ldr	r3, [pc, #208]	@ (80075fc <RS232_PollRxBuffer+0x110>)
 800752c:	2201      	movs	r2, #1
 800752e:	701a      	strb	r2, [r3, #0]
                    dwRxTimeStamp = GetMilSecTick();
 8007530:	f000 fbca 	bl	8007cc8 <GetMilSecTick>
 8007534:	4603      	mov	r3, r0
 8007536:	4a34      	ldr	r2, [pc, #208]	@ (8007608 <RS232_PollRxBuffer+0x11c>)
 8007538:	6013      	str	r3, [r2, #0]
                } else {
                    byUartState = RS232_UART_STATE_FRAME_ERROR;
                }
                break;
 800753a:	e03f      	b.n	80075bc <RS232_PollRxBuffer+0xd0>
                    byUartState = RS232_UART_STATE_FRAME_ERROR;
 800753c:	2302      	movs	r3, #2
 800753e:	71fb      	strb	r3, [r7, #7]
                break;
 8007540:	e03c      	b.n	80075bc <RS232_PollRxBuffer+0xd0>
            
            case RS232_RX_STATE_DATA_BYTES:
            	if (byIndexRxBuffer < RS232_RX_BUFFER_SIZE) {
 8007542:	4b2f      	ldr	r3, [pc, #188]	@ (8007600 <RS232_PollRxBuffer+0x114>)
 8007544:	781b      	ldrb	r3, [r3, #0]
 8007546:	b25b      	sxtb	r3, r3
 8007548:	2b00      	cmp	r3, #0
 800754a:	db23      	blt.n	8007594 <RS232_PollRxBuffer+0xa8>
					byRxBuffer[byIndexRxBuffer] = byRxData;
 800754c:	4b2c      	ldr	r3, [pc, #176]	@ (8007600 <RS232_PollRxBuffer+0x114>)
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	461a      	mov	r2, r3
 8007552:	79b9      	ldrb	r1, [r7, #6]
 8007554:	4b2d      	ldr	r3, [pc, #180]	@ (800760c <RS232_PollRxBuffer+0x120>)
 8007556:	5499      	strb	r1, [r3, r2]
					if (byIndexRxBuffer >= 0) {
						/* Calculate check XOR */
						byCheckXorRxBuf ^= byRxData;
 8007558:	4b2a      	ldr	r3, [pc, #168]	@ (8007604 <RS232_PollRxBuffer+0x118>)
 800755a:	781a      	ldrb	r2, [r3, #0]
 800755c:	79bb      	ldrb	r3, [r7, #6]
 800755e:	4053      	eors	r3, r2
 8007560:	b2da      	uxtb	r2, r3
 8007562:	4b28      	ldr	r3, [pc, #160]	@ (8007604 <RS232_PollRxBuffer+0x118>)
 8007564:	701a      	strb	r2, [r3, #0]
					}
					if (++byIndexRxBuffer == (FlenBuf + 1)) {
 8007566:	4b26      	ldr	r3, [pc, #152]	@ (8007600 <RS232_PollRxBuffer+0x114>)
 8007568:	781b      	ldrb	r3, [r3, #0]
 800756a:	3301      	adds	r3, #1
 800756c:	b2da      	uxtb	r2, r3
 800756e:	4b24      	ldr	r3, [pc, #144]	@ (8007600 <RS232_PollRxBuffer+0x114>)
 8007570:	701a      	strb	r2, [r3, #0]
 8007572:	4b23      	ldr	r3, [pc, #140]	@ (8007600 <RS232_PollRxBuffer+0x114>)
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	461a      	mov	r2, r3
 8007578:	4b24      	ldr	r3, [pc, #144]	@ (800760c <RS232_PollRxBuffer+0x120>)
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	3301      	adds	r3, #1
 800757e:	429a      	cmp	r2, r3
 8007580:	d102      	bne.n	8007588 <RS232_PollRxBuffer+0x9c>
						byRxBufState = RS232_RX_STATE_CXOR_BYTE;
 8007582:	4b1e      	ldr	r3, [pc, #120]	@ (80075fc <RS232_PollRxBuffer+0x110>)
 8007584:	2202      	movs	r2, #2
 8007586:	701a      	strb	r2, [r3, #0]
					}
					dwRxTimeStamp = GetMilSecTick();
 8007588:	f000 fb9e 	bl	8007cc8 <GetMilSecTick>
 800758c:	4603      	mov	r3, r0
 800758e:	4a1e      	ldr	r2, [pc, #120]	@ (8007608 <RS232_PollRxBuffer+0x11c>)
 8007590:	6013      	str	r3, [r2, #0]
				}
				else {
					byRxBufState = RS232_RX_STATE_START_BYTE;
					byUartState = RS232_UART_STATE_FRAME_ERROR;
				}
                break;
 8007592:	e013      	b.n	80075bc <RS232_PollRxBuffer+0xd0>
					byRxBufState = RS232_RX_STATE_START_BYTE;
 8007594:	4b19      	ldr	r3, [pc, #100]	@ (80075fc <RS232_PollRxBuffer+0x110>)
 8007596:	2200      	movs	r2, #0
 8007598:	701a      	strb	r2, [r3, #0]
					byUartState = RS232_UART_STATE_FRAME_ERROR;
 800759a:	2302      	movs	r3, #2
 800759c:	71fb      	strb	r3, [r7, #7]
                break;
 800759e:	e00d      	b.n	80075bc <RS232_PollRxBuffer+0xd0>
                
            case RS232_RX_STATE_CXOR_BYTE:
            	if (byRxData == byCheckXorRxBuf) {
 80075a0:	79ba      	ldrb	r2, [r7, #6]
 80075a2:	4b18      	ldr	r3, [pc, #96]	@ (8007604 <RS232_PollRxBuffer+0x118>)
 80075a4:	781b      	ldrb	r3, [r3, #0]
 80075a6:	429a      	cmp	r2, r3
 80075a8:	d102      	bne.n	80075b0 <RS232_PollRxBuffer+0xc4>
					byUartState = RS232_UART_STATE_FRAME_RECEIVED;
 80075aa:	2301      	movs	r3, #1
 80075ac:	71fb      	strb	r3, [r7, #7]
 80075ae:	e001      	b.n	80075b4 <RS232_PollRxBuffer+0xc8>
				}
				else {
					byUartState = RS232_UART_STATE_FRAME_ERROR;
 80075b0:	2302      	movs	r3, #2
 80075b2:	71fb      	strb	r3, [r7, #7]
				}
                
            default:
            	byRxBufState = RS232_RX_STATE_START_BYTE;
 80075b4:	4b11      	ldr	r3, [pc, #68]	@ (80075fc <RS232_PollRxBuffer+0x110>)
 80075b6:	2200      	movs	r2, #0
 80075b8:	701a      	strb	r2, [r3, #0]
                break;
 80075ba:	bf00      	nop
    while ((bufNumItems(&serialQueueRx) != 0) && (byUartState == RS232_UART_STATE_IDLE))
 80075bc:	480e      	ldr	r0, [pc, #56]	@ (80075f8 <RS232_PollRxBuffer+0x10c>)
 80075be:	f000 fc9c 	bl	8007efa <bufNumItems>
 80075c2:	4603      	mov	r3, r0
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d002      	beq.n	80075ce <RS232_PollRxBuffer+0xe2>
 80075c8:	79fb      	ldrb	r3, [r7, #7]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d094      	beq.n	80074f8 <RS232_PollRxBuffer+0xc>
        }
    }
    
    /* Check timeout rx */
	if (byUartState == RS232_UART_STATE_IDLE) {
 80075ce:	79fb      	ldrb	r3, [r7, #7]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d10c      	bne.n	80075ee <RS232_PollRxBuffer+0x102>
		if ((uint32_t)(GetMilSecTick() - dwRxTimeStamp) >= RS232_RX_TIMEOUT) {
 80075d4:	f000 fb78 	bl	8007cc8 <GetMilSecTick>
 80075d8:	4602      	mov	r2, r0
 80075da:	4b0b      	ldr	r3, [pc, #44]	@ (8007608 <RS232_PollRxBuffer+0x11c>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	1ad3      	subs	r3, r2, r3
 80075e0:	2b13      	cmp	r3, #19
 80075e2:	d904      	bls.n	80075ee <RS232_PollRxBuffer+0x102>
			byRxBufState = RS232_RX_STATE_START_BYTE;
 80075e4:	4b05      	ldr	r3, [pc, #20]	@ (80075fc <RS232_PollRxBuffer+0x110>)
 80075e6:	2200      	movs	r2, #0
 80075e8:	701a      	strb	r2, [r3, #0]
			byUartState  = RS232_UART_STATE_RX_TIMEOUT;
 80075ea:	2303      	movs	r3, #3
 80075ec:	71fb      	strb	r3, [r7, #7]
		}
	}

    return byUartState;
 80075ee:	79fb      	ldrb	r3, [r7, #7]
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3708      	adds	r7, #8
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}
 80075f8:	200007c4 	.word	0x200007c4
 80075fc:	2000073d 	.word	0x2000073d
 8007600:	2000073e 	.word	0x2000073e
 8007604:	2000073f 	.word	0x2000073f
 8007608:	20000740 	.word	0x20000740
 800760c:	20000744 	.word	0x20000744

08007610 <RS232_ReceiverProcedure>:
 * @brief  Process data received from uart
 * @param  None
 * @retval None
 */
void
RS232_ReceiverProcedure(void) {
 8007610:	b580      	push	{r7, lr}
 8007612:	b082      	sub	sp, #8
 8007614:	af00      	add	r7, sp, #0
    uint8_t stateRx = RS232_PollRxBuffer();
 8007616:	f7ff ff69 	bl	80074ec <RS232_PollRxBuffer>
 800761a:	4603      	mov	r3, r0
 800761c:	71fb      	strb	r3, [r7, #7]

	switch (stateRx) {
 800761e:	79fb      	ldrb	r3, [r7, #7]
 8007620:	2b01      	cmp	r3, #1
 8007622:	d005      	beq.n	8007630 <RS232_ReceiverProcedure+0x20>
 8007624:	2b00      	cmp	r3, #0
 8007626:	dd0f      	ble.n	8007648 <RS232_ReceiverProcedure+0x38>
 8007628:	3b02      	subs	r3, #2
 800762a:	2b01      	cmp	r3, #1
 800762c:	d80c      	bhi.n	8007648 <RS232_ReceiverProcedure+0x38>
			}
			break;

		case RS232_UART_STATE_FRAME_ERROR:
		case RS232_UART_STATE_RX_TIMEOUT:
			break;
 800762e:	e00e      	b.n	800764e <RS232_ReceiverProcedure+0x3e>
			if (pRS232ReceiverEventCallback != NULL) {
 8007630:	4b09      	ldr	r3, [pc, #36]	@ (8007658 <RS232_ReceiverProcedure+0x48>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d009      	beq.n	800764c <RS232_ReceiverProcedure+0x3c>
				pRS232ReceiverEventCallback(byRxBuffer[0], &byRxBuffer[1]);
 8007638:	4b07      	ldr	r3, [pc, #28]	@ (8007658 <RS232_ReceiverProcedure+0x48>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a07      	ldr	r2, [pc, #28]	@ (800765c <RS232_ReceiverProcedure+0x4c>)
 800763e:	7812      	ldrb	r2, [r2, #0]
 8007640:	4907      	ldr	r1, [pc, #28]	@ (8007660 <RS232_ReceiverProcedure+0x50>)
 8007642:	4610      	mov	r0, r2
 8007644:	4798      	blx	r3
			break;
 8007646:	e001      	b.n	800764c <RS232_ReceiverProcedure+0x3c>

		default:
			break;
 8007648:	bf00      	nop
 800764a:	e000      	b.n	800764e <RS232_ReceiverProcedure+0x3e>
			break;
 800764c:	bf00      	nop
	}
}
 800764e:	bf00      	nop
 8007650:	3708      	adds	r7, #8
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
 8007656:	bf00      	nop
 8007658:	200008d8 	.word	0x200008d8
 800765c:	20000744 	.word	0x20000744
 8007660:	20000745 	.word	0x20000745

08007664 <UART_RegBufferRx>:
 */
void
UART_RegBufferRx(
    uint8_t byUartNumber,
    buffqueue_p pQueueRx
) {
 8007664:	b480      	push	{r7}
 8007666:	b083      	sub	sp, #12
 8007668:	af00      	add	r7, sp, #0
 800766a:	4603      	mov	r3, r0
 800766c:	6039      	str	r1, [r7, #0]
 800766e:	71fb      	strb	r3, [r7, #7]
    g_pUartQueueRx[byUartNumber] = pQueueRx;
 8007670:	79fb      	ldrb	r3, [r7, #7]
 8007672:	4905      	ldr	r1, [pc, #20]	@ (8007688 <UART_RegBufferRx+0x24>)
 8007674:	683a      	ldr	r2, [r7, #0]
 8007676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800767a:	bf00      	nop
 800767c:	370c      	adds	r7, #12
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr
 8007686:	bf00      	nop
 8007688:	200008d4 	.word	0x200008d4

0800768c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800768c:	b580      	push	{r7, lr}
 800768e:	b084      	sub	sp, #16
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART6) {
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a09      	ldr	r2, [pc, #36]	@ (80076c0 <HAL_UART_RxCpltCallback+0x34>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d10b      	bne.n	80076b6 <HAL_UART_RxCpltCallback+0x2a>
		buffqueue_p pUartBuffQueueRx = (buffqueue_p) g_pUartQueueRx[0];
 800769e:	4b09      	ldr	r3, [pc, #36]	@ (80076c4 <HAL_UART_RxCpltCallback+0x38>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	60fb      	str	r3, [r7, #12]
		if (bufEnDat(pUartBuffQueueRx, &rxData) == ERR_BUF_FULL) {}
 80076a4:	4908      	ldr	r1, [pc, #32]	@ (80076c8 <HAL_UART_RxCpltCallback+0x3c>)
 80076a6:	68f8      	ldr	r0, [r7, #12]
 80076a8:	f000 fc72 	bl	8007f90 <bufEnDat>
		HAL_UART_Receive_IT(&huart6, &rxData, 1);
 80076ac:	2201      	movs	r2, #1
 80076ae:	4906      	ldr	r1, [pc, #24]	@ (80076c8 <HAL_UART_RxCpltCallback+0x3c>)
 80076b0:	4806      	ldr	r0, [pc, #24]	@ (80076cc <HAL_UART_RxCpltCallback+0x40>)
 80076b2:	f7fd fecd 	bl	8005450 <HAL_UART_Receive_IT>
	}
}
 80076b6:	bf00      	nop
 80076b8:	3710      	adds	r7, #16
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
 80076be:	bf00      	nop
 80076c0:	40011400 	.word	0x40011400
 80076c4:	200008d4 	.word	0x200008d4
 80076c8:	2000073c 	.word	0x2000073c
 80076cc:	200003dc 	.word	0x200003dc

080076d0 <SIMCOM_TransmitAndReceive>:
static subscriber_handler_callback pSubscriberCb;
/******************************************************************************/
/*                            EXPORTED FUNCTIONS                              */
/******************************************************************************/
static void SIMCOM_TransmitAndReceive(char *cmd)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b082      	sub	sp, #8
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  memset(buffer, 0, sizeof(buffer));
 80076d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80076dc:	2100      	movs	r1, #0
 80076de:	4811      	ldr	r0, [pc, #68]	@ (8007724 <SIMCOM_TransmitAndReceive+0x54>)
 80076e0:	f001 fc62 	bl	8008fa8 <memset>

  HAL_UART_Transmit(&huart1, (uint8_t *)cmd, strlen(cmd), 1000);
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f7f8 fdcb 	bl	8000280 <strlen>
 80076ea:	4603      	mov	r3, r0
 80076ec:	b29a      	uxth	r2, r3
 80076ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80076f2:	6879      	ldr	r1, [r7, #4]
 80076f4:	480c      	ldr	r0, [pc, #48]	@ (8007728 <SIMCOM_TransmitAndReceive+0x58>)
 80076f6:	f7fd fd89 	bl	800520c <HAL_UART_Transmit>
  printf("%s", (char *)cmd);
 80076fa:	6879      	ldr	r1, [r7, #4]
 80076fc:	480b      	ldr	r0, [pc, #44]	@ (800772c <SIMCOM_TransmitAndReceive+0x5c>)
 80076fe:	f001 fa8b 	bl	8008c18 <iprintf>

  HAL_UART_Receive(&huart1, buffer, sizeof(buffer), 1000);
 8007702:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007706:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800770a:	4906      	ldr	r1, [pc, #24]	@ (8007724 <SIMCOM_TransmitAndReceive+0x54>)
 800770c:	4806      	ldr	r0, [pc, #24]	@ (8007728 <SIMCOM_TransmitAndReceive+0x58>)
 800770e:	f7fd fe08 	bl	8005322 <HAL_UART_Receive>
  printf("%s", (char *)buffer);
 8007712:	4904      	ldr	r1, [pc, #16]	@ (8007724 <SIMCOM_TransmitAndReceive+0x54>)
 8007714:	4805      	ldr	r0, [pc, #20]	@ (800772c <SIMCOM_TransmitAndReceive+0x5c>)
 8007716:	f001 fa7f 	bl	8008c18 <iprintf>
}
 800771a:	bf00      	nop
 800771c:	3708      	adds	r7, #8
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
 8007722:	bf00      	nop
 8007724:	2000092c 	.word	0x2000092c
 8007728:	2000034c 	.word	0x2000034c
 800772c:	0800ca60 	.word	0x0800ca60

08007730 <SIMCOM_Init>:

void SIMCOM_Init(subscriber_handler_callback cb) {
 8007730:	b590      	push	{r4, r7, lr}
 8007732:	b083      	sub	sp, #12
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
	ATisOK = 0;
 8007738:	4b61      	ldr	r3, [pc, #388]	@ (80078c0 <SIMCOM_Init+0x190>)
 800773a:	2200      	movs	r2, #0
 800773c:	701a      	strb	r2, [r3, #0]
	CGREGisOK = 0;
 800773e:	4b61      	ldr	r3, [pc, #388]	@ (80078c4 <SIMCOM_Init+0x194>)
 8007740:	2200      	movs	r2, #0
 8007742:	701a      	strb	r2, [r3, #0]
	NETOPENisOK = 0;
 8007744:	4b60      	ldr	r3, [pc, #384]	@ (80078c8 <SIMCOM_Init+0x198>)
 8007746:	2200      	movs	r2, #0
 8007748:	701a      	strb	r2, [r3, #0]
	CIPOPENisOK = 0;
 800774a:	4b60      	ldr	r3, [pc, #384]	@ (80078cc <SIMCOM_Init+0x19c>)
 800774c:	2200      	movs	r2, #0
 800774e:	701a      	strb	r2, [r3, #0]

	if (cb != NULL) {
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d002      	beq.n	800775c <SIMCOM_Init+0x2c>
		pSubscriberCb = cb;
 8007756:	4a5e      	ldr	r2, [pc, #376]	@ (80078d0 <SIMCOM_Init+0x1a0>)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6013      	str	r3, [r2, #0]
	}

//	SIMCOM_TransmitAndReceive("AT+CRESET\r\n");

	// Check for OK response for AT
	previousTick = HAL_GetTick();
 800775c:	f7fa ff04 	bl	8002568 <HAL_GetTick>
 8007760:	4603      	mov	r3, r0
 8007762:	4a5c      	ldr	r2, [pc, #368]	@ (80078d4 <SIMCOM_Init+0x1a4>)
 8007764:	6013      	str	r3, [r2, #0]
	while (!ATisOK && previousTick + TIMEOUT_RETRY_TRANSMIT > HAL_GetTick()) {
 8007766:	e00c      	b.n	8007782 <SIMCOM_Init+0x52>
		SIMCOM_TransmitAndReceive("AT\r\n");
 8007768:	485b      	ldr	r0, [pc, #364]	@ (80078d8 <SIMCOM_Init+0x1a8>)
 800776a:	f7ff ffb1 	bl	80076d0 <SIMCOM_TransmitAndReceive>
		if (strstr((char *)buffer, "OK")) {
 800776e:	495b      	ldr	r1, [pc, #364]	@ (80078dc <SIMCOM_Init+0x1ac>)
 8007770:	485b      	ldr	r0, [pc, #364]	@ (80078e0 <SIMCOM_Init+0x1b0>)
 8007772:	f001 fc2e 	bl	8008fd2 <strstr>
 8007776:	4603      	mov	r3, r0
 8007778:	2b00      	cmp	r3, #0
 800777a:	d002      	beq.n	8007782 <SIMCOM_Init+0x52>
		    ATisOK = 1;
 800777c:	4b50      	ldr	r3, [pc, #320]	@ (80078c0 <SIMCOM_Init+0x190>)
 800777e:	2201      	movs	r2, #1
 8007780:	701a      	strb	r2, [r3, #0]
	while (!ATisOK && previousTick + TIMEOUT_RETRY_TRANSMIT > HAL_GetTick()) {
 8007782:	4b4f      	ldr	r3, [pc, #316]	@ (80078c0 <SIMCOM_Init+0x190>)
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d109      	bne.n	800779e <SIMCOM_Init+0x6e>
 800778a:	4b52      	ldr	r3, [pc, #328]	@ (80078d4 <SIMCOM_Init+0x1a4>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f503 449c 	add.w	r4, r3, #19968	@ 0x4e00
 8007792:	3420      	adds	r4, #32
 8007794:	f7fa fee8 	bl	8002568 <HAL_GetTick>
 8007798:	4603      	mov	r3, r0
 800779a:	429c      	cmp	r4, r3
 800779c:	d8e4      	bhi.n	8007768 <SIMCOM_Init+0x38>
		}
	}

	// Check for network registration.
	if (ATisOK) {
 800779e:	4b48      	ldr	r3, [pc, #288]	@ (80078c0 <SIMCOM_Init+0x190>)
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d020      	beq.n	80077e8 <SIMCOM_Init+0xb8>
		previousTick = HAL_GetTick();
 80077a6:	f7fa fedf 	bl	8002568 <HAL_GetTick>
 80077aa:	4603      	mov	r3, r0
 80077ac:	4a49      	ldr	r2, [pc, #292]	@ (80078d4 <SIMCOM_Init+0x1a4>)
 80077ae:	6013      	str	r3, [r2, #0]
		while (!CGREGisOK  && previousTick + TIMEOUT_RETRY_TRANSMIT > HAL_GetTick()) {
 80077b0:	e00c      	b.n	80077cc <SIMCOM_Init+0x9c>
			SIMCOM_TransmitAndReceive("AT+CGREG?\r\n");
 80077b2:	484c      	ldr	r0, [pc, #304]	@ (80078e4 <SIMCOM_Init+0x1b4>)
 80077b4:	f7ff ff8c 	bl	80076d0 <SIMCOM_TransmitAndReceive>
			if (strstr((char *)buffer, "+CGREG: 0,1")) {
 80077b8:	494b      	ldr	r1, [pc, #300]	@ (80078e8 <SIMCOM_Init+0x1b8>)
 80077ba:	4849      	ldr	r0, [pc, #292]	@ (80078e0 <SIMCOM_Init+0x1b0>)
 80077bc:	f001 fc09 	bl	8008fd2 <strstr>
 80077c0:	4603      	mov	r3, r0
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d002      	beq.n	80077cc <SIMCOM_Init+0x9c>
				CGREGisOK = 1;
 80077c6:	4b3f      	ldr	r3, [pc, #252]	@ (80078c4 <SIMCOM_Init+0x194>)
 80077c8:	2201      	movs	r2, #1
 80077ca:	701a      	strb	r2, [r3, #0]
		while (!CGREGisOK  && previousTick + TIMEOUT_RETRY_TRANSMIT > HAL_GetTick()) {
 80077cc:	4b3d      	ldr	r3, [pc, #244]	@ (80078c4 <SIMCOM_Init+0x194>)
 80077ce:	781b      	ldrb	r3, [r3, #0]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d109      	bne.n	80077e8 <SIMCOM_Init+0xb8>
 80077d4:	4b3f      	ldr	r3, [pc, #252]	@ (80078d4 <SIMCOM_Init+0x1a4>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f503 449c 	add.w	r4, r3, #19968	@ 0x4e00
 80077dc:	3420      	adds	r4, #32
 80077de:	f7fa fec3 	bl	8002568 <HAL_GetTick>
 80077e2:	4603      	mov	r3, r0
 80077e4:	429c      	cmp	r4, r3
 80077e6:	d8e4      	bhi.n	80077b2 <SIMCOM_Init+0x82>
			}
		}
	}

    // Check for Internet IP Connection
	if (CGREGisOK) {
 80077e8:	4b36      	ldr	r3, [pc, #216]	@ (80078c4 <SIMCOM_Init+0x194>)
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d062      	beq.n	80078b6 <SIMCOM_Init+0x186>
		previousTick =  HAL_GetTick();
 80077f0:	f7fa feba 	bl	8002568 <HAL_GetTick>
 80077f4:	4603      	mov	r3, r0
 80077f6:	4a37      	ldr	r2, [pc, #220]	@ (80078d4 <SIMCOM_Init+0x1a4>)
 80077f8:	6013      	str	r3, [r2, #0]
		while(!NETOPENisOK  && previousTick  + TIMEOUT_RETRY_TRANSMIT >  HAL_GetTick()) {
 80077fa:	e04e      	b.n	800789a <SIMCOM_Init+0x16a>
			SIMCOM_TransmitAndReceive("AT+NETCLOSE\r\n");
 80077fc:	483b      	ldr	r0, [pc, #236]	@ (80078ec <SIMCOM_Init+0x1bc>)
 80077fe:	f7ff ff67 	bl	80076d0 <SIMCOM_TransmitAndReceive>
			if(strstr((char *)buffer,"+NETCLOSE: 0") || strstr((char *)buffer,"+NETCLOSE: 2")) {
 8007802:	493b      	ldr	r1, [pc, #236]	@ (80078f0 <SIMCOM_Init+0x1c0>)
 8007804:	4836      	ldr	r0, [pc, #216]	@ (80078e0 <SIMCOM_Init+0x1b0>)
 8007806:	f001 fbe4 	bl	8008fd2 <strstr>
 800780a:	4603      	mov	r3, r0
 800780c:	2b00      	cmp	r3, #0
 800780e:	d106      	bne.n	800781e <SIMCOM_Init+0xee>
 8007810:	4938      	ldr	r1, [pc, #224]	@ (80078f4 <SIMCOM_Init+0x1c4>)
 8007812:	4833      	ldr	r0, [pc, #204]	@ (80078e0 <SIMCOM_Init+0x1b0>)
 8007814:	f001 fbdd 	bl	8008fd2 <strstr>
 8007818:	4603      	mov	r3, r0
 800781a:	2b00      	cmp	r3, #0
 800781c:	d03d      	beq.n	800789a <SIMCOM_Init+0x16a>
				sprintf(ATcommand,"AT+CGDCONT=1,\"IP\",\"%s\",\"0.0.0.0\",0,0\r\n",apn);
 800781e:	4a36      	ldr	r2, [pc, #216]	@ (80078f8 <SIMCOM_Init+0x1c8>)
 8007820:	4936      	ldr	r1, [pc, #216]	@ (80078fc <SIMCOM_Init+0x1cc>)
 8007822:	4837      	ldr	r0, [pc, #220]	@ (8007900 <SIMCOM_Init+0x1d0>)
 8007824:	f001 fa9c 	bl	8008d60 <siprintf>
				SIMCOM_TransmitAndReceive(ATcommand);
 8007828:	4835      	ldr	r0, [pc, #212]	@ (8007900 <SIMCOM_Init+0x1d0>)
 800782a:	f7ff ff51 	bl	80076d0 <SIMCOM_TransmitAndReceive>
				SIMCOM_TransmitAndReceive("AT+CIPRXGET=0\r\n");
 800782e:	4835      	ldr	r0, [pc, #212]	@ (8007904 <SIMCOM_Init+0x1d4>)
 8007830:	f7ff ff4e 	bl	80076d0 <SIMCOM_TransmitAndReceive>
				SIMCOM_TransmitAndReceive("AT+CIPMODE=0\r\n");
 8007834:	4834      	ldr	r0, [pc, #208]	@ (8007908 <SIMCOM_Init+0x1d8>)
 8007836:	f7ff ff4b 	bl	80076d0 <SIMCOM_TransmitAndReceive>
				SIMCOM_TransmitAndReceive("AT+CIPSENDMODE=0\r\n");
 800783a:	4834      	ldr	r0, [pc, #208]	@ (800790c <SIMCOM_Init+0x1dc>)
 800783c:	f7ff ff48 	bl	80076d0 <SIMCOM_TransmitAndReceive>
				SIMCOM_TransmitAndReceive("AT+CIPCCFG=10,0,0,0,0,0,120000\r\n");
 8007840:	4833      	ldr	r0, [pc, #204]	@ (8007910 <SIMCOM_Init+0x1e0>)
 8007842:	f7ff ff45 	bl	80076d0 <SIMCOM_TransmitAndReceive>
				SIMCOM_TransmitAndReceive("AT+CIPTIMEOUT=120000,120000,120000\r\n");
 8007846:	4833      	ldr	r0, [pc, #204]	@ (8007914 <SIMCOM_Init+0x1e4>)
 8007848:	f7ff ff42 	bl	80076d0 <SIMCOM_TransmitAndReceive>

				SIMCOM_TransmitAndReceive("AT+NETOPEN\r\n");
 800784c:	4832      	ldr	r0, [pc, #200]	@ (8007918 <SIMCOM_Init+0x1e8>)
 800784e:	f7ff ff3f 	bl	80076d0 <SIMCOM_TransmitAndReceive>
				previousTick =  HAL_GetTick();
 8007852:	f7fa fe89 	bl	8002568 <HAL_GetTick>
 8007856:	4603      	mov	r3, r0
 8007858:	4a1e      	ldr	r2, [pc, #120]	@ (80078d4 <SIMCOM_Init+0x1a4>)
 800785a:	6013      	str	r3, [r2, #0]
				while (!NETOPENisOK  && previousTick  + TIMEOUT_RETRY_TRANSMIT >  HAL_GetTick()) {
 800785c:	e00f      	b.n	800787e <SIMCOM_Init+0x14e>
					SIMCOM_TransmitAndReceive("AT+NETOPEN?\r\n");
 800785e:	482f      	ldr	r0, [pc, #188]	@ (800791c <SIMCOM_Init+0x1ec>)
 8007860:	f7ff ff36 	bl	80076d0 <SIMCOM_TransmitAndReceive>
					if(strstr((char *)buffer,"+NETOPEN: 1")) {
 8007864:	492e      	ldr	r1, [pc, #184]	@ (8007920 <SIMCOM_Init+0x1f0>)
 8007866:	481e      	ldr	r0, [pc, #120]	@ (80078e0 <SIMCOM_Init+0x1b0>)
 8007868:	f001 fbb3 	bl	8008fd2 <strstr>
 800786c:	4603      	mov	r3, r0
 800786e:	2b00      	cmp	r3, #0
 8007870:	d005      	beq.n	800787e <SIMCOM_Init+0x14e>
						NETOPENisOK = 1;
 8007872:	4b15      	ldr	r3, [pc, #84]	@ (80078c8 <SIMCOM_Init+0x198>)
 8007874:	2201      	movs	r2, #1
 8007876:	701a      	strb	r2, [r3, #0]
						led_event_show(LEDEV_NETWORK_JOINED);
 8007878:	200a      	movs	r0, #10
 800787a:	f7ff fc3f 	bl	80070fc <led_event_show>
				while (!NETOPENisOK  && previousTick  + TIMEOUT_RETRY_TRANSMIT >  HAL_GetTick()) {
 800787e:	4b12      	ldr	r3, [pc, #72]	@ (80078c8 <SIMCOM_Init+0x198>)
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d109      	bne.n	800789a <SIMCOM_Init+0x16a>
 8007886:	4b13      	ldr	r3, [pc, #76]	@ (80078d4 <SIMCOM_Init+0x1a4>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f503 449c 	add.w	r4, r3, #19968	@ 0x4e00
 800788e:	3420      	adds	r4, #32
 8007890:	f7fa fe6a 	bl	8002568 <HAL_GetTick>
 8007894:	4603      	mov	r3, r0
 8007896:	429c      	cmp	r4, r3
 8007898:	d8e1      	bhi.n	800785e <SIMCOM_Init+0x12e>
		while(!NETOPENisOK  && previousTick  + TIMEOUT_RETRY_TRANSMIT >  HAL_GetTick()) {
 800789a:	4b0b      	ldr	r3, [pc, #44]	@ (80078c8 <SIMCOM_Init+0x198>)
 800789c:	781b      	ldrb	r3, [r3, #0]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d109      	bne.n	80078b6 <SIMCOM_Init+0x186>
 80078a2:	4b0c      	ldr	r3, [pc, #48]	@ (80078d4 <SIMCOM_Init+0x1a4>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f503 449c 	add.w	r4, r3, #19968	@ 0x4e00
 80078aa:	3420      	adds	r4, #32
 80078ac:	f7fa fe5c 	bl	8002568 <HAL_GetTick>
 80078b0:	4603      	mov	r3, r0
 80078b2:	429c      	cmp	r4, r3
 80078b4:	d8a2      	bhi.n	80077fc <SIMCOM_Init+0xcc>
				}
			}

		}
	}
}
 80078b6:	bf00      	nop
 80078b8:	370c      	adds	r7, #12
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd90      	pop	{r4, r7, pc}
 80078be:	bf00      	nop
 80078c0:	20000b2c 	.word	0x20000b2c
 80078c4:	20000b2d 	.word	0x20000b2d
 80078c8:	20000b2f 	.word	0x20000b2f
 80078cc:	20000b2e 	.word	0x20000b2e
 80078d0:	20000b34 	.word	0x20000b34
 80078d4:	20000b30 	.word	0x20000b30
 80078d8:	0800ca64 	.word	0x0800ca64
 80078dc:	0800ca6c 	.word	0x0800ca6c
 80078e0:	2000092c 	.word	0x2000092c
 80078e4:	0800ca70 	.word	0x0800ca70
 80078e8:	0800ca7c 	.word	0x0800ca7c
 80078ec:	0800ca88 	.word	0x0800ca88
 80078f0:	0800ca98 	.word	0x0800ca98
 80078f4:	0800caa8 	.word	0x0800caa8
 80078f8:	0800ccec 	.word	0x0800ccec
 80078fc:	0800cab8 	.word	0x0800cab8
 8007900:	200008dc 	.word	0x200008dc
 8007904:	0800cae0 	.word	0x0800cae0
 8007908:	0800caf0 	.word	0x0800caf0
 800790c:	0800cb00 	.word	0x0800cb00
 8007910:	0800cb14 	.word	0x0800cb14
 8007914:	0800cb38 	.word	0x0800cb38
 8007918:	0800cb60 	.word	0x0800cb60
 800791c:	0800cb70 	.word	0x0800cb70
 8007920:	0800cb80 	.word	0x0800cb80

08007924 <SIMCOM_httpPost>:
		// Close connections
		SIMCOM_TransmitAndReceive("AT+CIPCLOSE=0\r\n");
	}
}

void SIMCOM_httpPost(char *data) {
 8007924:	b590      	push	{r4, r7, lr}
 8007926:	b087      	sub	sp, #28
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
	// If all Connection success (Wiring, Registration and TCP/IP)
	if (CGREGisOK && NETOPENisOK && !CIPOPENisOK) {
 800792c:	4b6a      	ldr	r3, [pc, #424]	@ (8007ad8 <SIMCOM_httpPost+0x1b4>)
 800792e:	781b      	ldrb	r3, [r3, #0]
 8007930:	2b00      	cmp	r3, #0
 8007932:	f000 80cc 	beq.w	8007ace <SIMCOM_httpPost+0x1aa>
 8007936:	4b69      	ldr	r3, [pc, #420]	@ (8007adc <SIMCOM_httpPost+0x1b8>)
 8007938:	781b      	ldrb	r3, [r3, #0]
 800793a:	2b00      	cmp	r3, #0
 800793c:	f000 80c7 	beq.w	8007ace <SIMCOM_httpPost+0x1aa>
 8007940:	4b67      	ldr	r3, [pc, #412]	@ (8007ae0 <SIMCOM_httpPost+0x1bc>)
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	2b00      	cmp	r3, #0
 8007946:	f040 80c2 	bne.w	8007ace <SIMCOM_httpPost+0x1aa>
		// Perform http POST request
		sprintf(ATcommand,"AT+CIPOPEN=0,\"TCP\",\"%s\",%d\r\n",server,port);
 800794a:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800794e:	4a65      	ldr	r2, [pc, #404]	@ (8007ae4 <SIMCOM_httpPost+0x1c0>)
 8007950:	4965      	ldr	r1, [pc, #404]	@ (8007ae8 <SIMCOM_httpPost+0x1c4>)
 8007952:	4866      	ldr	r0, [pc, #408]	@ (8007aec <SIMCOM_httpPost+0x1c8>)
 8007954:	f001 fa04 	bl	8008d60 <siprintf>
		previousTick =  HAL_GetTick();
 8007958:	f7fa fe06 	bl	8002568 <HAL_GetTick>
 800795c:	4603      	mov	r3, r0
 800795e:	4a64      	ldr	r2, [pc, #400]	@ (8007af0 <SIMCOM_httpPost+0x1cc>)
 8007960:	6013      	str	r3, [r2, #0]
		while(previousTick  + TIMEOUT_RETRY_TRANSMIT >  HAL_GetTick()) {
 8007962:	e009      	b.n	8007978 <SIMCOM_httpPost+0x54>
			SIMCOM_TransmitAndReceive(ATcommand);
 8007964:	4861      	ldr	r0, [pc, #388]	@ (8007aec <SIMCOM_httpPost+0x1c8>)
 8007966:	f7ff feb3 	bl	80076d0 <SIMCOM_TransmitAndReceive>
			if(strstr((char *)buffer,"+CIPOPEN: 0,0")) {
 800796a:	4962      	ldr	r1, [pc, #392]	@ (8007af4 <SIMCOM_httpPost+0x1d0>)
 800796c:	4862      	ldr	r0, [pc, #392]	@ (8007af8 <SIMCOM_httpPost+0x1d4>)
 800796e:	f001 fb30 	bl	8008fd2 <strstr>
 8007972:	4603      	mov	r3, r0
 8007974:	2b00      	cmp	r3, #0
 8007976:	d10a      	bne.n	800798e <SIMCOM_httpPost+0x6a>
		while(previousTick  + TIMEOUT_RETRY_TRANSMIT >  HAL_GetTick()) {
 8007978:	4b5d      	ldr	r3, [pc, #372]	@ (8007af0 <SIMCOM_httpPost+0x1cc>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f503 449c 	add.w	r4, r3, #19968	@ 0x4e00
 8007980:	3420      	adds	r4, #32
 8007982:	f7fa fdf1 	bl	8002568 <HAL_GetTick>
 8007986:	4603      	mov	r3, r0
 8007988:	429c      	cmp	r4, r3
 800798a:	d8eb      	bhi.n	8007964 <SIMCOM_httpPost+0x40>
 800798c:	e000      	b.n	8007990 <SIMCOM_httpPost+0x6c>
				break;
 800798e:	bf00      	nop
			}
		}

		sprintf(ATcommand,"AT+CIPSEND=0,%d\r\n", strlen(publisher_resource)+16);
 8007990:	2218      	movs	r2, #24
 8007992:	495a      	ldr	r1, [pc, #360]	@ (8007afc <SIMCOM_httpPost+0x1d8>)
 8007994:	4855      	ldr	r0, [pc, #340]	@ (8007aec <SIMCOM_httpPost+0x1c8>)
 8007996:	f001 f9e3 	bl	8008d60 <siprintf>
		SIMCOM_TransmitAndReceive(ATcommand);
 800799a:	4854      	ldr	r0, [pc, #336]	@ (8007aec <SIMCOM_httpPost+0x1c8>)
 800799c:	f7ff fe98 	bl	80076d0 <SIMCOM_TransmitAndReceive>
		if(strstr((char *)buffer,">")) {
 80079a0:	213e      	movs	r1, #62	@ 0x3e
 80079a2:	4855      	ldr	r0, [pc, #340]	@ (8007af8 <SIMCOM_httpPost+0x1d4>)
 80079a4:	f001 fb08 	bl	8008fb8 <strchr>
 80079a8:	4603      	mov	r3, r0
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d007      	beq.n	80079be <SIMCOM_httpPost+0x9a>
			sprintf(ATcommand,"POST %s HTTP/1.1\r\n", publisher_resource);
 80079ae:	4a54      	ldr	r2, [pc, #336]	@ (8007b00 <SIMCOM_httpPost+0x1dc>)
 80079b0:	4954      	ldr	r1, [pc, #336]	@ (8007b04 <SIMCOM_httpPost+0x1e0>)
 80079b2:	484e      	ldr	r0, [pc, #312]	@ (8007aec <SIMCOM_httpPost+0x1c8>)
 80079b4:	f001 f9d4 	bl	8008d60 <siprintf>
			SIMCOM_TransmitAndReceive(ATcommand);
 80079b8:	484c      	ldr	r0, [pc, #304]	@ (8007aec <SIMCOM_httpPost+0x1c8>)
 80079ba:	f7ff fe89 	bl	80076d0 <SIMCOM_TransmitAndReceive>
		}

		sprintf(ATcommand,"AT+CIPSEND=0,%d\r\n",strlen(server)+8);
 80079be:	2215      	movs	r2, #21
 80079c0:	494e      	ldr	r1, [pc, #312]	@ (8007afc <SIMCOM_httpPost+0x1d8>)
 80079c2:	484a      	ldr	r0, [pc, #296]	@ (8007aec <SIMCOM_httpPost+0x1c8>)
 80079c4:	f001 f9cc 	bl	8008d60 <siprintf>
		SIMCOM_TransmitAndReceive(ATcommand);
 80079c8:	4848      	ldr	r0, [pc, #288]	@ (8007aec <SIMCOM_httpPost+0x1c8>)
 80079ca:	f7ff fe81 	bl	80076d0 <SIMCOM_TransmitAndReceive>
		if(strstr((char *)buffer,">")) {
 80079ce:	213e      	movs	r1, #62	@ 0x3e
 80079d0:	4849      	ldr	r0, [pc, #292]	@ (8007af8 <SIMCOM_httpPost+0x1d4>)
 80079d2:	f001 faf1 	bl	8008fb8 <strchr>
 80079d6:	4603      	mov	r3, r0
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d007      	beq.n	80079ec <SIMCOM_httpPost+0xc8>
			sprintf(ATcommand,"Host: %s\r\n",server);
 80079dc:	4a41      	ldr	r2, [pc, #260]	@ (8007ae4 <SIMCOM_httpPost+0x1c0>)
 80079de:	494a      	ldr	r1, [pc, #296]	@ (8007b08 <SIMCOM_httpPost+0x1e4>)
 80079e0:	4842      	ldr	r0, [pc, #264]	@ (8007aec <SIMCOM_httpPost+0x1c8>)
 80079e2:	f001 f9bd 	bl	8008d60 <siprintf>
			SIMCOM_TransmitAndReceive(ATcommand);
 80079e6:	4841      	ldr	r0, [pc, #260]	@ (8007aec <SIMCOM_httpPost+0x1c8>)
 80079e8:	f7ff fe72 	bl	80076d0 <SIMCOM_TransmitAndReceive>
//		SIMCOM_TransmitAndReceive("AT+CIPSEND=0,19\r\n");
//		if(strstr((char *)buffer,">")) {
//			SIMCOM_TransmitAndReceive("Connection: close\r\n");
//		}

		SIMCOM_TransmitAndReceive("AT+CIPSEND=0,49\r\n");
 80079ec:	4847      	ldr	r0, [pc, #284]	@ (8007b0c <SIMCOM_httpPost+0x1e8>)
 80079ee:	f7ff fe6f 	bl	80076d0 <SIMCOM_TransmitAndReceive>
		if(strstr((char *)buffer,">")) {
 80079f2:	213e      	movs	r1, #62	@ 0x3e
 80079f4:	4840      	ldr	r0, [pc, #256]	@ (8007af8 <SIMCOM_httpPost+0x1d4>)
 80079f6:	f001 fadf 	bl	8008fb8 <strchr>
 80079fa:	4603      	mov	r3, r0
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d002      	beq.n	8007a06 <SIMCOM_httpPost+0xe2>
			SIMCOM_TransmitAndReceive("Content-Type: application/x-www-form-urlencoded\r\n");
 8007a00:	4843      	ldr	r0, [pc, #268]	@ (8007b10 <SIMCOM_httpPost+0x1ec>)
 8007a02:	f7ff fe65 	bl	80076d0 <SIMCOM_TransmitAndReceive>
		}

		SIMCOM_TransmitAndReceive("AT+CIPSEND=0,16\r\n");
 8007a06:	4843      	ldr	r0, [pc, #268]	@ (8007b14 <SIMCOM_httpPost+0x1f0>)
 8007a08:	f7ff fe62 	bl	80076d0 <SIMCOM_TransmitAndReceive>
		if(strstr((char *)buffer,">")) {
 8007a0c:	213e      	movs	r1, #62	@ 0x3e
 8007a0e:	483a      	ldr	r0, [pc, #232]	@ (8007af8 <SIMCOM_httpPost+0x1d4>)
 8007a10:	f001 fad2 	bl	8008fb8 <strchr>
 8007a14:	4603      	mov	r3, r0
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d002      	beq.n	8007a20 <SIMCOM_httpPost+0xfc>
			SIMCOM_TransmitAndReceive("Content-Length: ");
 8007a1a:	483f      	ldr	r0, [pc, #252]	@ (8007b18 <SIMCOM_httpPost+0x1f4>)
 8007a1c:	f7ff fe58 	bl	80076d0 <SIMCOM_TransmitAndReceive>
		}

		char sLength[11];
		snprintf(sLength, 11, "%d", strlen(data));
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f7f8 fc2d 	bl	8000280 <strlen>
 8007a26:	4603      	mov	r3, r0
 8007a28:	f107 000c 	add.w	r0, r7, #12
 8007a2c:	4a3b      	ldr	r2, [pc, #236]	@ (8007b1c <SIMCOM_httpPost+0x1f8>)
 8007a2e:	210b      	movs	r1, #11
 8007a30:	f001 f962 	bl	8008cf8 <sniprintf>
		sprintf(ATcommand,"AT+CIPSEND=0,%d\r\n",strlen(sLength));
 8007a34:	f107 030c 	add.w	r3, r7, #12
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f7f8 fc21 	bl	8000280 <strlen>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	461a      	mov	r2, r3
 8007a42:	492e      	ldr	r1, [pc, #184]	@ (8007afc <SIMCOM_httpPost+0x1d8>)
 8007a44:	4829      	ldr	r0, [pc, #164]	@ (8007aec <SIMCOM_httpPost+0x1c8>)
 8007a46:	f001 f98b 	bl	8008d60 <siprintf>
		SIMCOM_TransmitAndReceive(ATcommand);
 8007a4a:	4828      	ldr	r0, [pc, #160]	@ (8007aec <SIMCOM_httpPost+0x1c8>)
 8007a4c:	f7ff fe40 	bl	80076d0 <SIMCOM_TransmitAndReceive>
		if(strstr((char *)buffer,">")) {
 8007a50:	213e      	movs	r1, #62	@ 0x3e
 8007a52:	4829      	ldr	r0, [pc, #164]	@ (8007af8 <SIMCOM_httpPost+0x1d4>)
 8007a54:	f001 fab0 	bl	8008fb8 <strchr>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d004      	beq.n	8007a68 <SIMCOM_httpPost+0x144>
			SIMCOM_TransmitAndReceive(sLength);
 8007a5e:	f107 030c 	add.w	r3, r7, #12
 8007a62:	4618      	mov	r0, r3
 8007a64:	f7ff fe34 	bl	80076d0 <SIMCOM_TransmitAndReceive>
		}

		SIMCOM_TransmitAndReceive("AT+CIPSEND=0,2\r\n");
 8007a68:	482d      	ldr	r0, [pc, #180]	@ (8007b20 <SIMCOM_httpPost+0x1fc>)
 8007a6a:	f7ff fe31 	bl	80076d0 <SIMCOM_TransmitAndReceive>
		if(strstr((char *)buffer,">")) {
 8007a6e:	213e      	movs	r1, #62	@ 0x3e
 8007a70:	4821      	ldr	r0, [pc, #132]	@ (8007af8 <SIMCOM_httpPost+0x1d4>)
 8007a72:	f001 faa1 	bl	8008fb8 <strchr>
 8007a76:	4603      	mov	r3, r0
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d002      	beq.n	8007a82 <SIMCOM_httpPost+0x15e>
			SIMCOM_TransmitAndReceive("\r\n");
 8007a7c:	4829      	ldr	r0, [pc, #164]	@ (8007b24 <SIMCOM_httpPost+0x200>)
 8007a7e:	f7ff fe27 	bl	80076d0 <SIMCOM_TransmitAndReceive>
		}

		SIMCOM_TransmitAndReceive("AT+CIPSEND=0,2\r\n");
 8007a82:	4827      	ldr	r0, [pc, #156]	@ (8007b20 <SIMCOM_httpPost+0x1fc>)
 8007a84:	f7ff fe24 	bl	80076d0 <SIMCOM_TransmitAndReceive>
		if(strstr((char *)buffer,">")) {
 8007a88:	213e      	movs	r1, #62	@ 0x3e
 8007a8a:	481b      	ldr	r0, [pc, #108]	@ (8007af8 <SIMCOM_httpPost+0x1d4>)
 8007a8c:	f001 fa94 	bl	8008fb8 <strchr>
 8007a90:	4603      	mov	r3, r0
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d002      	beq.n	8007a9c <SIMCOM_httpPost+0x178>
			SIMCOM_TransmitAndReceive("\r\n");
 8007a96:	4823      	ldr	r0, [pc, #140]	@ (8007b24 <SIMCOM_httpPost+0x200>)
 8007a98:	f7ff fe1a 	bl	80076d0 <SIMCOM_TransmitAndReceive>
		}

		sprintf(ATcommand,"AT+CIPSEND=0,%d\r\n",strlen(data));
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f7f8 fbef 	bl	8000280 <strlen>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	461a      	mov	r2, r3
 8007aa6:	4915      	ldr	r1, [pc, #84]	@ (8007afc <SIMCOM_httpPost+0x1d8>)
 8007aa8:	4810      	ldr	r0, [pc, #64]	@ (8007aec <SIMCOM_httpPost+0x1c8>)
 8007aaa:	f001 f959 	bl	8008d60 <siprintf>
		SIMCOM_TransmitAndReceive(ATcommand);
 8007aae:	480f      	ldr	r0, [pc, #60]	@ (8007aec <SIMCOM_httpPost+0x1c8>)
 8007ab0:	f7ff fe0e 	bl	80076d0 <SIMCOM_TransmitAndReceive>
		if(strstr((char *)buffer,">")) {
 8007ab4:	213e      	movs	r1, #62	@ 0x3e
 8007ab6:	4810      	ldr	r0, [pc, #64]	@ (8007af8 <SIMCOM_httpPost+0x1d4>)
 8007ab8:	f001 fa7e 	bl	8008fb8 <strchr>
 8007abc:	4603      	mov	r3, r0
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d002      	beq.n	8007ac8 <SIMCOM_httpPost+0x1a4>
			SIMCOM_TransmitAndReceive(data);
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f7ff fe04 	bl	80076d0 <SIMCOM_TransmitAndReceive>
//		if(strstr((char *)buffer,">")) {
//			SIMCOM_TransmitAndReceive("\r\n");
//		}

		// Close connections
		SIMCOM_TransmitAndReceive("AT+CIPCLOSE=0\r\n");
 8007ac8:	4817      	ldr	r0, [pc, #92]	@ (8007b28 <SIMCOM_httpPost+0x204>)
 8007aca:	f7ff fe01 	bl	80076d0 <SIMCOM_TransmitAndReceive>
	}
}
 8007ace:	bf00      	nop
 8007ad0:	371c      	adds	r7, #28
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd90      	pop	{r4, r7, pc}
 8007ad6:	bf00      	nop
 8007ad8:	20000b2d 	.word	0x20000b2d
 8007adc:	20000b2f 	.word	0x20000b2f
 8007ae0:	20000b2e 	.word	0x20000b2e
 8007ae4:	0800ccf8 	.word	0x0800ccf8
 8007ae8:	0800cb8c 	.word	0x0800cb8c
 8007aec:	200008dc 	.word	0x200008dc
 8007af0:	20000b30 	.word	0x20000b30
 8007af4:	0800cbac 	.word	0x0800cbac
 8007af8:	2000092c 	.word	0x2000092c
 8007afc:	0800cbbc 	.word	0x0800cbbc
 8007b00:	0800cd08 	.word	0x0800cd08
 8007b04:	0800cc28 	.word	0x0800cc28
 8007b08:	0800cbe4 	.word	0x0800cbe4
 8007b0c:	0800cc3c 	.word	0x0800cc3c
 8007b10:	0800cc50 	.word	0x0800cc50
 8007b14:	0800cc84 	.word	0x0800cc84
 8007b18:	0800cc98 	.word	0x0800cc98
 8007b1c:	0800ccac 	.word	0x0800ccac
 8007b20:	0800cbf0 	.word	0x0800cbf0
 8007b24:	0800cc04 	.word	0x0800cc04
 8007b28:	0800cc18 	.word	0x0800cc18

08007b2c <TimerStart>:
    char* name,
	uint32_t wMilSecTick,
	uint8_t byRepeats,
	void (*callback)(void *),
    void *pcallbackData
) {   
 8007b2c:	b590      	push	{r4, r7, lr}
 8007b2e:	b087      	sub	sp, #28
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	60f8      	str	r0, [r7, #12]
 8007b34:	60b9      	str	r1, [r7, #8]
 8007b36:	603b      	str	r3, [r7, #0]
 8007b38:	4613      	mov	r3, r2
 8007b3a:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < MAX_TIMER; i++)
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	75fb      	strb	r3, [r7, #23]
 8007b40:	e04c      	b.n	8007bdc <TimerStart+0xb0>
    {
        if (g_pTimerHandle[i].callbackFunc == NULL)
 8007b42:	7dfa      	ldrb	r2, [r7, #23]
 8007b44:	4929      	ldr	r1, [pc, #164]	@ (8007bec <TimerStart+0xc0>)
 8007b46:	4613      	mov	r3, r2
 8007b48:	005b      	lsls	r3, r3, #1
 8007b4a:	4413      	add	r3, r2
 8007b4c:	00db      	lsls	r3, r3, #3
 8007b4e:	440b      	add	r3, r1
 8007b50:	3310      	adds	r3, #16
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d13e      	bne.n	8007bd6 <TimerStart+0xaa>
        {
            g_pTimerHandle[i].name = name;
 8007b58:	7dfa      	ldrb	r2, [r7, #23]
 8007b5a:	4924      	ldr	r1, [pc, #144]	@ (8007bec <TimerStart+0xc0>)
 8007b5c:	4613      	mov	r3, r2
 8007b5e:	005b      	lsls	r3, r3, #1
 8007b60:	4413      	add	r3, r2
 8007b62:	00db      	lsls	r3, r3, #3
 8007b64:	440b      	add	r3, r1
 8007b66:	68fa      	ldr	r2, [r7, #12]
 8007b68:	601a      	str	r2, [r3, #0]
            g_pTimerHandle[i].callbackFunc = callback;
 8007b6a:	7dfa      	ldrb	r2, [r7, #23]
 8007b6c:	491f      	ldr	r1, [pc, #124]	@ (8007bec <TimerStart+0xc0>)
 8007b6e:	4613      	mov	r3, r2
 8007b70:	005b      	lsls	r3, r3, #1
 8007b72:	4413      	add	r3, r2
 8007b74:	00db      	lsls	r3, r3, #3
 8007b76:	440b      	add	r3, r1
 8007b78:	3310      	adds	r3, #16
 8007b7a:	683a      	ldr	r2, [r7, #0]
 8007b7c:	601a      	str	r2, [r3, #0]
            g_pTimerHandle[i].repeats = byRepeats;
 8007b7e:	7dfa      	ldrb	r2, [r7, #23]
 8007b80:	491a      	ldr	r1, [pc, #104]	@ (8007bec <TimerStart+0xc0>)
 8007b82:	4613      	mov	r3, r2
 8007b84:	005b      	lsls	r3, r3, #1
 8007b86:	4413      	add	r3, r2
 8007b88:	00db      	lsls	r3, r3, #3
 8007b8a:	440b      	add	r3, r1
 8007b8c:	330c      	adds	r3, #12
 8007b8e:	79fa      	ldrb	r2, [r7, #7]
 8007b90:	701a      	strb	r2, [r3, #0]
            g_pTimerHandle[i].pCallbackData = pcallbackData;
 8007b92:	7dfa      	ldrb	r2, [r7, #23]
 8007b94:	4915      	ldr	r1, [pc, #84]	@ (8007bec <TimerStart+0xc0>)
 8007b96:	4613      	mov	r3, r2
 8007b98:	005b      	lsls	r3, r3, #1
 8007b9a:	4413      	add	r3, r2
 8007b9c:	00db      	lsls	r3, r3, #3
 8007b9e:	440b      	add	r3, r1
 8007ba0:	3314      	adds	r3, #20
 8007ba2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007ba4:	601a      	str	r2, [r3, #0]
            g_pTimerHandle[i].milSecStart = GetMilSecTick();
 8007ba6:	7dfc      	ldrb	r4, [r7, #23]
 8007ba8:	f000 f88e 	bl	8007cc8 <GetMilSecTick>
 8007bac:	4602      	mov	r2, r0
 8007bae:	490f      	ldr	r1, [pc, #60]	@ (8007bec <TimerStart+0xc0>)
 8007bb0:	4623      	mov	r3, r4
 8007bb2:	005b      	lsls	r3, r3, #1
 8007bb4:	4423      	add	r3, r4
 8007bb6:	00db      	lsls	r3, r3, #3
 8007bb8:	440b      	add	r3, r1
 8007bba:	3304      	adds	r3, #4
 8007bbc:	601a      	str	r2, [r3, #0]
            g_pTimerHandle[i].milSecTimeout = wMilSecTick;
 8007bbe:	7dfa      	ldrb	r2, [r7, #23]
 8007bc0:	490a      	ldr	r1, [pc, #40]	@ (8007bec <TimerStart+0xc0>)
 8007bc2:	4613      	mov	r3, r2
 8007bc4:	005b      	lsls	r3, r3, #1
 8007bc6:	4413      	add	r3, r2
 8007bc8:	00db      	lsls	r3, r3, #3
 8007bca:	440b      	add	r3, r1
 8007bcc:	3308      	adds	r3, #8
 8007bce:	68ba      	ldr	r2, [r7, #8]
 8007bd0:	601a      	str	r2, [r3, #0]
            DBG_TIMER_SEND_NUM(g_pTimerHandle[i].repeats);
            DBG_TIMER_SEND_STR(", timeCall = ");
            DBG_TIMER_SEND_NUM(wMilSecTick);
            DBG_TIMER_SEND_STR("\n");

            return i;
 8007bd2:	7dfb      	ldrb	r3, [r7, #23]
 8007bd4:	e006      	b.n	8007be4 <TimerStart+0xb8>
    for (uint8_t i = 0; i < MAX_TIMER; i++)
 8007bd6:	7dfb      	ldrb	r3, [r7, #23]
 8007bd8:	3301      	adds	r3, #1
 8007bda:	75fb      	strb	r3, [r7, #23]
 8007bdc:	7dfb      	ldrb	r3, [r7, #23]
 8007bde:	2b0f      	cmp	r3, #15
 8007be0:	d9af      	bls.n	8007b42 <TimerStart+0x16>
        }
    }
    
    return NO_TIMER;
 8007be2:	23ff      	movs	r3, #255	@ 0xff
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	371c      	adds	r7, #28
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd90      	pop	{r4, r7, pc}
 8007bec:	20000b38 	.word	0x20000b38

08007bf0 <TimerChangePeriod>:
 */
void
TimerChangePeriod(
    uint8_t byTimerId,
    uint32_t dwMilSecTick
) {
 8007bf0:	b480      	push	{r7}
 8007bf2:	b083      	sub	sp, #12
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	6039      	str	r1, [r7, #0]
 8007bfa:	71fb      	strb	r3, [r7, #7]
    if (byTimerId == NO_TIMER) return; 
 8007bfc:	79fb      	ldrb	r3, [r7, #7]
 8007bfe:	2bff      	cmp	r3, #255	@ 0xff
 8007c00:	d00a      	beq.n	8007c18 <TimerChangePeriod+0x28>
    g_pTimerHandle[byTimerId].milSecTimeout = dwMilSecTick;
 8007c02:	79fa      	ldrb	r2, [r7, #7]
 8007c04:	4907      	ldr	r1, [pc, #28]	@ (8007c24 <TimerChangePeriod+0x34>)
 8007c06:	4613      	mov	r3, r2
 8007c08:	005b      	lsls	r3, r3, #1
 8007c0a:	4413      	add	r3, r2
 8007c0c:	00db      	lsls	r3, r3, #3
 8007c0e:	440b      	add	r3, r1
 8007c10:	3308      	adds	r3, #8
 8007c12:	683a      	ldr	r2, [r7, #0]
 8007c14:	601a      	str	r2, [r3, #0]
 8007c16:	e000      	b.n	8007c1a <TimerChangePeriod+0x2a>
    if (byTimerId == NO_TIMER) return; 
 8007c18:	bf00      	nop
}
 8007c1a:	370c      	adds	r7, #12
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c22:	4770      	bx	lr
 8007c24:	20000b38 	.word	0x20000b38

08007c28 <TimerStop>:
 * @retval None
 */
uint8_t
TimerStop(
    uint8_t byTimerId
) {   
 8007c28:	b480      	push	{r7}
 8007c2a:	b083      	sub	sp, #12
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	4603      	mov	r3, r0
 8007c30:	71fb      	strb	r3, [r7, #7]
    if ((byTimerId >= MAX_TIMER) || (g_pTimerHandle[byTimerId].callbackFunc == NULL))
 8007c32:	79fb      	ldrb	r3, [r7, #7]
 8007c34:	2b0f      	cmp	r3, #15
 8007c36:	d80a      	bhi.n	8007c4e <TimerStop+0x26>
 8007c38:	79fa      	ldrb	r2, [r7, #7]
 8007c3a:	4922      	ldr	r1, [pc, #136]	@ (8007cc4 <TimerStop+0x9c>)
 8007c3c:	4613      	mov	r3, r2
 8007c3e:	005b      	lsls	r3, r3, #1
 8007c40:	4413      	add	r3, r2
 8007c42:	00db      	lsls	r3, r3, #3
 8007c44:	440b      	add	r3, r1
 8007c46:	3310      	adds	r3, #16
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d101      	bne.n	8007c52 <TimerStop+0x2a>
        return 0;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	e031      	b.n	8007cb6 <TimerStop+0x8e>
    DBG_TIMER_SEND_STR(g_pTimerHandle[byTimerId].name);
    DBG_TIMER_SEND_STR(" Id = "); 
    DBG_TIMER_SEND_NUM(byTimerId);
    DBG_TIMER_SEND_STR("\n");
    
    g_pTimerHandle[byTimerId].name = NULL;
 8007c52:	79fa      	ldrb	r2, [r7, #7]
 8007c54:	491b      	ldr	r1, [pc, #108]	@ (8007cc4 <TimerStop+0x9c>)
 8007c56:	4613      	mov	r3, r2
 8007c58:	005b      	lsls	r3, r3, #1
 8007c5a:	4413      	add	r3, r2
 8007c5c:	00db      	lsls	r3, r3, #3
 8007c5e:	440b      	add	r3, r1
 8007c60:	2200      	movs	r2, #0
 8007c62:	601a      	str	r2, [r3, #0]
    g_pTimerHandle[byTimerId].callbackFunc = NULL;
 8007c64:	79fa      	ldrb	r2, [r7, #7]
 8007c66:	4917      	ldr	r1, [pc, #92]	@ (8007cc4 <TimerStop+0x9c>)
 8007c68:	4613      	mov	r3, r2
 8007c6a:	005b      	lsls	r3, r3, #1
 8007c6c:	4413      	add	r3, r2
 8007c6e:	00db      	lsls	r3, r3, #3
 8007c70:	440b      	add	r3, r1
 8007c72:	3310      	adds	r3, #16
 8007c74:	2200      	movs	r2, #0
 8007c76:	601a      	str	r2, [r3, #0]
    g_pTimerHandle[byTimerId].repeats = 0;
 8007c78:	79fa      	ldrb	r2, [r7, #7]
 8007c7a:	4912      	ldr	r1, [pc, #72]	@ (8007cc4 <TimerStop+0x9c>)
 8007c7c:	4613      	mov	r3, r2
 8007c7e:	005b      	lsls	r3, r3, #1
 8007c80:	4413      	add	r3, r2
 8007c82:	00db      	lsls	r3, r3, #3
 8007c84:	440b      	add	r3, r1
 8007c86:	330c      	adds	r3, #12
 8007c88:	2200      	movs	r2, #0
 8007c8a:	701a      	strb	r2, [r3, #0]
    g_pTimerHandle[byTimerId].milSecTimeout = 0;
 8007c8c:	79fa      	ldrb	r2, [r7, #7]
 8007c8e:	490d      	ldr	r1, [pc, #52]	@ (8007cc4 <TimerStop+0x9c>)
 8007c90:	4613      	mov	r3, r2
 8007c92:	005b      	lsls	r3, r3, #1
 8007c94:	4413      	add	r3, r2
 8007c96:	00db      	lsls	r3, r3, #3
 8007c98:	440b      	add	r3, r1
 8007c9a:	3308      	adds	r3, #8
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	601a      	str	r2, [r3, #0]
    g_pTimerHandle[byTimerId].milSecStart = 0;
 8007ca0:	79fa      	ldrb	r2, [r7, #7]
 8007ca2:	4908      	ldr	r1, [pc, #32]	@ (8007cc4 <TimerStop+0x9c>)
 8007ca4:	4613      	mov	r3, r2
 8007ca6:	005b      	lsls	r3, r3, #1
 8007ca8:	4413      	add	r3, r2
 8007caa:	00db      	lsls	r3, r3, #3
 8007cac:	440b      	add	r3, r1
 8007cae:	3304      	adds	r3, #4
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	601a      	str	r2, [r3, #0]
    
    return 1;
 8007cb4:	2301      	movs	r3, #1
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	370c      	adds	r7, #12
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc0:	4770      	bx	lr
 8007cc2:	bf00      	nop
 8007cc4:	20000b38 	.word	0x20000b38

08007cc8 <GetMilSecTick>:
 * @brief  None
 * @param  None
 * @retval None
 */
uint32_t
GetMilSecTick(void) {
 8007cc8:	b480      	push	{r7}
 8007cca:	af00      	add	r7, sp, #0
    return g_wMilSecTickTimer;
 8007ccc:	4b03      	ldr	r3, [pc, #12]	@ (8007cdc <GetMilSecTick+0x14>)
 8007cce:	681b      	ldr	r3, [r3, #0]
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd8:	4770      	bx	lr
 8007cda:	bf00      	nop
 8007cdc:	20000cb8 	.word	0x20000cb8

08007ce0 <processTimerScheduler>:
 * @brief  None
 * @param  None
 * @retval None
 */
void
processTimerScheduler(void) {
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b084      	sub	sp, #16
 8007ce4:	af00      	add	r7, sp, #0
    void (*callbackfunc)(void *);
    void *pPrameter;
    
    for (uint8_t i = 0; i < MAX_TIMER; i++)
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	73fb      	strb	r3, [r7, #15]
 8007cea:	e068      	b.n	8007dbe <processTimerScheduler+0xde>
    {
        if ((g_pTimerHandle[i].callbackFunc != NULL) && TimeExpired(i))
 8007cec:	7bfa      	ldrb	r2, [r7, #15]
 8007cee:	4938      	ldr	r1, [pc, #224]	@ (8007dd0 <processTimerScheduler+0xf0>)
 8007cf0:	4613      	mov	r3, r2
 8007cf2:	005b      	lsls	r3, r3, #1
 8007cf4:	4413      	add	r3, r2
 8007cf6:	00db      	lsls	r3, r3, #3
 8007cf8:	440b      	add	r3, r1
 8007cfa:	3310      	adds	r3, #16
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d05a      	beq.n	8007db8 <processTimerScheduler+0xd8>
 8007d02:	7bfb      	ldrb	r3, [r7, #15]
 8007d04:	4618      	mov	r0, r3
 8007d06:	f000 f865 	bl	8007dd4 <TimeExpired>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d053      	beq.n	8007db8 <processTimerScheduler+0xd8>
        {
            callbackfunc = g_pTimerHandle[i].callbackFunc;
 8007d10:	7bfa      	ldrb	r2, [r7, #15]
 8007d12:	492f      	ldr	r1, [pc, #188]	@ (8007dd0 <processTimerScheduler+0xf0>)
 8007d14:	4613      	mov	r3, r2
 8007d16:	005b      	lsls	r3, r3, #1
 8007d18:	4413      	add	r3, r2
 8007d1a:	00db      	lsls	r3, r3, #3
 8007d1c:	440b      	add	r3, r1
 8007d1e:	3310      	adds	r3, #16
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	60bb      	str	r3, [r7, #8]
            pPrameter = g_pTimerHandle[i].pCallbackData;
 8007d24:	7bfa      	ldrb	r2, [r7, #15]
 8007d26:	492a      	ldr	r1, [pc, #168]	@ (8007dd0 <processTimerScheduler+0xf0>)
 8007d28:	4613      	mov	r3, r2
 8007d2a:	005b      	lsls	r3, r3, #1
 8007d2c:	4413      	add	r3, r2
 8007d2e:	00db      	lsls	r3, r3, #3
 8007d30:	440b      	add	r3, r1
 8007d32:	3314      	adds	r3, #20
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	607b      	str	r3, [r7, #4]
            DBG_TIMER_SEND_NUM(g_pTimerHandle[i].repeats);
            DBG_TIMER_SEND_STR(", CB = ");
            DBG_TIMER_SEND_NUM((uint32_t)callbackfunc);
            DBG_TIMER_SEND_STR("\n");
            
            if ((g_pTimerHandle[i].repeats != TIMER_REPEAT_FOREVER) && \
 8007d38:	7bfa      	ldrb	r2, [r7, #15]
 8007d3a:	4925      	ldr	r1, [pc, #148]	@ (8007dd0 <processTimerScheduler+0xf0>)
 8007d3c:	4613      	mov	r3, r2
 8007d3e:	005b      	lsls	r3, r3, #1
 8007d40:	4413      	add	r3, r2
 8007d42:	00db      	lsls	r3, r3, #3
 8007d44:	440b      	add	r3, r1
 8007d46:	330c      	adds	r3, #12
 8007d48:	781b      	ldrb	r3, [r3, #0]
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	2bff      	cmp	r3, #255	@ 0xff
 8007d4e:	d020      	beq.n	8007d92 <processTimerScheduler+0xb2>
                (g_pTimerHandle[i].repeats != TIMER_REPEAT_ONE_TIME))
 8007d50:	7bfa      	ldrb	r2, [r7, #15]
 8007d52:	491f      	ldr	r1, [pc, #124]	@ (8007dd0 <processTimerScheduler+0xf0>)
 8007d54:	4613      	mov	r3, r2
 8007d56:	005b      	lsls	r3, r3, #1
 8007d58:	4413      	add	r3, r2
 8007d5a:	00db      	lsls	r3, r3, #3
 8007d5c:	440b      	add	r3, r1
 8007d5e:	330c      	adds	r3, #12
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	b2db      	uxtb	r3, r3
            if ((g_pTimerHandle[i].repeats != TIMER_REPEAT_FOREVER) && \
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d014      	beq.n	8007d92 <processTimerScheduler+0xb2>
                 g_pTimerHandle[i].repeats--;
 8007d68:	7bfa      	ldrb	r2, [r7, #15]
 8007d6a:	4919      	ldr	r1, [pc, #100]	@ (8007dd0 <processTimerScheduler+0xf0>)
 8007d6c:	4613      	mov	r3, r2
 8007d6e:	005b      	lsls	r3, r3, #1
 8007d70:	4413      	add	r3, r2
 8007d72:	00db      	lsls	r3, r3, #3
 8007d74:	440b      	add	r3, r1
 8007d76:	330c      	adds	r3, #12
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	b2db      	uxtb	r3, r3
 8007d7c:	3b01      	subs	r3, #1
 8007d7e:	b2d8      	uxtb	r0, r3
 8007d80:	4913      	ldr	r1, [pc, #76]	@ (8007dd0 <processTimerScheduler+0xf0>)
 8007d82:	4613      	mov	r3, r2
 8007d84:	005b      	lsls	r3, r3, #1
 8007d86:	4413      	add	r3, r2
 8007d88:	00db      	lsls	r3, r3, #3
 8007d8a:	440b      	add	r3, r1
 8007d8c:	330c      	adds	r3, #12
 8007d8e:	4602      	mov	r2, r0
 8007d90:	701a      	strb	r2, [r3, #0]
            
            if (g_pTimerHandle[i].repeats == TIMER_REPEAT_ONE_TIME) {
 8007d92:	7bfa      	ldrb	r2, [r7, #15]
 8007d94:	490e      	ldr	r1, [pc, #56]	@ (8007dd0 <processTimerScheduler+0xf0>)
 8007d96:	4613      	mov	r3, r2
 8007d98:	005b      	lsls	r3, r3, #1
 8007d9a:	4413      	add	r3, r2
 8007d9c:	00db      	lsls	r3, r3, #3
 8007d9e:	440b      	add	r3, r1
 8007da0:	330c      	adds	r3, #12
 8007da2:	781b      	ldrb	r3, [r3, #0]
 8007da4:	b2db      	uxtb	r3, r3
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d103      	bne.n	8007db2 <processTimerScheduler+0xd2>
                 DBG_TIMER_SEND_STR("$ CANCEL \n");
                 TimerStop(i);
 8007daa:	7bfb      	ldrb	r3, [r7, #15]
 8007dac:	4618      	mov	r0, r3
 8007dae:	f7ff ff3b 	bl	8007c28 <TimerStop>
            }
            
            callbackfunc(pPrameter);
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	4798      	blx	r3
    for (uint8_t i = 0; i < MAX_TIMER; i++)
 8007db8:	7bfb      	ldrb	r3, [r7, #15]
 8007dba:	3301      	adds	r3, #1
 8007dbc:	73fb      	strb	r3, [r7, #15]
 8007dbe:	7bfb      	ldrb	r3, [r7, #15]
 8007dc0:	2b0f      	cmp	r3, #15
 8007dc2:	d993      	bls.n	8007cec <processTimerScheduler+0xc>
        }
    }
}
 8007dc4:	bf00      	nop
 8007dc6:	bf00      	nop
 8007dc8:	3710      	adds	r7, #16
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
 8007dce:	bf00      	nop
 8007dd0:	20000b38 	.word	0x20000b38

08007dd4 <TimeExpired>:
 * @retval TRUE or FALSE
 */
uint8_t
TimeExpired(
    uint8_t byTimerId
) {
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b084      	sub	sp, #16
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	4603      	mov	r3, r0
 8007ddc:	71fb      	strb	r3, [r7, #7]
    uint32_t wMilSecTick;
    uint32_t wDeltaMilSec = 0;
 8007dde:	2300      	movs	r3, #0
 8007de0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8007de2:	b672      	cpsid	i
}
 8007de4:	bf00      	nop
    
    __disable_irq();
    wMilSecTick = GetMilSecTick();
 8007de6:	f7ff ff6f 	bl	8007cc8 <GetMilSecTick>
 8007dea:	60b8      	str	r0, [r7, #8]
    if ((byTimerId >= MAX_TIMER) || (g_pTimerHandle[byTimerId].callbackFunc == NULL))
 8007dec:	79fb      	ldrb	r3, [r7, #7]
 8007dee:	2b0f      	cmp	r3, #15
 8007df0:	d80a      	bhi.n	8007e08 <TimeExpired+0x34>
 8007df2:	79fa      	ldrb	r2, [r7, #7]
 8007df4:	492b      	ldr	r1, [pc, #172]	@ (8007ea4 <TimeExpired+0xd0>)
 8007df6:	4613      	mov	r3, r2
 8007df8:	005b      	lsls	r3, r3, #1
 8007dfa:	4413      	add	r3, r2
 8007dfc:	00db      	lsls	r3, r3, #3
 8007dfe:	440b      	add	r3, r1
 8007e00:	3310      	adds	r3, #16
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d103      	bne.n	8007e10 <TimeExpired+0x3c>
  __ASM volatile ("cpsie i" : : : "memory");
 8007e08:	b662      	cpsie	i
}
 8007e0a:	bf00      	nop
    {
    	__enable_irq();
        return 0;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	e044      	b.n	8007e9a <TimeExpired+0xc6>
    }
      
    if (wMilSecTick >= g_pTimerHandle[byTimerId].milSecStart) 
 8007e10:	79fa      	ldrb	r2, [r7, #7]
 8007e12:	4924      	ldr	r1, [pc, #144]	@ (8007ea4 <TimeExpired+0xd0>)
 8007e14:	4613      	mov	r3, r2
 8007e16:	005b      	lsls	r3, r3, #1
 8007e18:	4413      	add	r3, r2
 8007e1a:	00db      	lsls	r3, r3, #3
 8007e1c:	440b      	add	r3, r1
 8007e1e:	3304      	adds	r3, #4
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	68ba      	ldr	r2, [r7, #8]
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d30c      	bcc.n	8007e42 <TimeExpired+0x6e>
    {
        wDeltaMilSec = wMilSecTick - g_pTimerHandle[byTimerId].milSecStart;
 8007e28:	79fa      	ldrb	r2, [r7, #7]
 8007e2a:	491e      	ldr	r1, [pc, #120]	@ (8007ea4 <TimeExpired+0xd0>)
 8007e2c:	4613      	mov	r3, r2
 8007e2e:	005b      	lsls	r3, r3, #1
 8007e30:	4413      	add	r3, r2
 8007e32:	00db      	lsls	r3, r3, #3
 8007e34:	440b      	add	r3, r1
 8007e36:	3304      	adds	r3, #4
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	68ba      	ldr	r2, [r7, #8]
 8007e3c:	1ad3      	subs	r3, r2, r3
 8007e3e:	60fb      	str	r3, [r7, #12]
 8007e40:	e00e      	b.n	8007e60 <TimeExpired+0x8c>
    } 
    else
    {
        wDeltaMilSec = g_pTimerHandle[byTimerId].milSecStart - wMilSecTick;
 8007e42:	79fa      	ldrb	r2, [r7, #7]
 8007e44:	4917      	ldr	r1, [pc, #92]	@ (8007ea4 <TimeExpired+0xd0>)
 8007e46:	4613      	mov	r3, r2
 8007e48:	005b      	lsls	r3, r3, #1
 8007e4a:	4413      	add	r3, r2
 8007e4c:	00db      	lsls	r3, r3, #3
 8007e4e:	440b      	add	r3, r1
 8007e50:	3304      	adds	r3, #4
 8007e52:	681a      	ldr	r2, [r3, #0]
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	1ad3      	subs	r3, r2, r3
 8007e58:	60fb      	str	r3, [r7, #12]
        wDeltaMilSec = 0xFFFFFFFFU - wDeltaMilSec;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	43db      	mvns	r3, r3
 8007e5e:	60fb      	str	r3, [r7, #12]
    }
    
    if (wDeltaMilSec < g_pTimerHandle[byTimerId].milSecTimeout)
 8007e60:	79fa      	ldrb	r2, [r7, #7]
 8007e62:	4910      	ldr	r1, [pc, #64]	@ (8007ea4 <TimeExpired+0xd0>)
 8007e64:	4613      	mov	r3, r2
 8007e66:	005b      	lsls	r3, r3, #1
 8007e68:	4413      	add	r3, r2
 8007e6a:	00db      	lsls	r3, r3, #3
 8007e6c:	440b      	add	r3, r1
 8007e6e:	3308      	adds	r3, #8
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	68fa      	ldr	r2, [r7, #12]
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d203      	bcs.n	8007e80 <TimeExpired+0xac>
  __ASM volatile ("cpsie i" : : : "memory");
 8007e78:	b662      	cpsie	i
}
 8007e7a:	bf00      	nop
    {
    	__enable_irq();
        return 0;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	e00c      	b.n	8007e9a <TimeExpired+0xc6>
    }
    
    g_pTimerHandle[byTimerId].milSecStart = wMilSecTick;
 8007e80:	79fa      	ldrb	r2, [r7, #7]
 8007e82:	4908      	ldr	r1, [pc, #32]	@ (8007ea4 <TimeExpired+0xd0>)
 8007e84:	4613      	mov	r3, r2
 8007e86:	005b      	lsls	r3, r3, #1
 8007e88:	4413      	add	r3, r2
 8007e8a:	00db      	lsls	r3, r3, #3
 8007e8c:	440b      	add	r3, r1
 8007e8e:	3304      	adds	r3, #4
 8007e90:	68ba      	ldr	r2, [r7, #8]
 8007e92:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8007e94:	b662      	cpsie	i
}
 8007e96:	bf00      	nop
    
    __enable_irq();
    
    return 1;
 8007e98:	2301      	movs	r3, #1
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3710      	adds	r7, #16
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}
 8007ea2:	bf00      	nop
 8007ea4:	20000b38 	.word	0x20000b38

08007ea8 <TimeSysTick_EventCallback>:
 * @brief  None
 * @param  None
 * @retval None
 */
void
TimeSysTick_EventCallback(void) {
 8007ea8:	b480      	push	{r7}
 8007eaa:	af00      	add	r7, sp, #0
    g_wMilSecTickTimer++;
 8007eac:	4b04      	ldr	r3, [pc, #16]	@ (8007ec0 <TimeSysTick_EventCallback+0x18>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	3301      	adds	r3, #1
 8007eb2:	4a03      	ldr	r2, [pc, #12]	@ (8007ec0 <TimeSysTick_EventCallback+0x18>)
 8007eb4:	6013      	str	r3, [r2, #0]
}
 8007eb6:	bf00      	nop
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr
 8007ec0:	20000cb8 	.word	0x20000cb8

08007ec4 <bufInit>:
bufInit(
    void *pBuffer,
    buffqueue_p pQueue,
	uint8_t sizeofElement,
	uint16_t numberOfElement
) {
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b084      	sub	sp, #16
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	60b9      	str	r1, [r7, #8]
 8007ece:	4611      	mov	r1, r2
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	460b      	mov	r3, r1
 8007ed4:	71fb      	strb	r3, [r7, #7]
 8007ed6:	4613      	mov	r3, r2
 8007ed8:	80bb      	strh	r3, [r7, #4]
    pQueue->wSize = numberOfElement;
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	88ba      	ldrh	r2, [r7, #4]
 8007ede:	801a      	strh	r2, [r3, #0]
    pQueue->byItemSize = sizeofElement;
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	79fa      	ldrb	r2, [r7, #7]
 8007ee4:	711a      	strb	r2, [r3, #4]
    pQueue->pData = (uint8_t *)pBuffer;
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	68fa      	ldr	r2, [r7, #12]
 8007eea:	60da      	str	r2, [r3, #12]
    bufFlush(pQueue);
 8007eec:	68b8      	ldr	r0, [r7, #8]
 8007eee:	f000 f836 	bl	8007f5e <bufFlush>
}
 8007ef2:	bf00      	nop
 8007ef4:	3710      	adds	r7, #16
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}

08007efa <bufNumItems>:
 * @return The number of items in the ring buffer
 */
uint16_t
bufNumItems(
	buffqueue_p pQueue
) {
 8007efa:	b480      	push	{r7}
 8007efc:	b083      	sub	sp, #12
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	6078      	str	r0, [r7, #4]
    return pQueue->wCountEle;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	885b      	ldrh	r3, [r3, #2]
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	370c      	adds	r7, #12
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f10:	4770      	bx	lr

08007f12 <bufIsFull>:
 * @return 1 if full; 0 otherwise
 */
uint8_t
bufIsFull(
    buffqueue_p pQueue
) {
 8007f12:	b480      	push	{r7}
 8007f14:	b083      	sub	sp, #12
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	6078      	str	r0, [r7, #4]
    return (pQueue->wCountEle >= pQueue->wSize);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	885a      	ldrh	r2, [r3, #2]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	881b      	ldrh	r3, [r3, #0]
 8007f22:	429a      	cmp	r2, r3
 8007f24:	bf2c      	ite	cs
 8007f26:	2301      	movcs	r3, #1
 8007f28:	2300      	movcc	r3, #0
 8007f2a:	b2db      	uxtb	r3, r3
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	370c      	adds	r7, #12
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr

08007f38 <bufIsEmpty>:
 * @return 1 if empty; 0 otherwise
 */
uint8_t
bufIsEmpty(
    buffqueue_p pQueue
) {
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
    return (pQueue->wHeadIndex == pQueue->wTailIndex);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	88da      	ldrh	r2, [r3, #6]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	891b      	ldrh	r3, [r3, #8]
 8007f48:	429a      	cmp	r2, r3
 8007f4a:	bf0c      	ite	eq
 8007f4c:	2301      	moveq	r3, #1
 8007f4e:	2300      	movne	r3, #0
 8007f50:	b2db      	uxtb	r3, r3
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	370c      	adds	r7, #12
 8007f56:	46bd      	mov	sp, r7
 8007f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5c:	4770      	bx	lr

08007f5e <bufFlush>:
 * @retval None
 */
void
bufFlush(
    buffqueue_p pQueue
) {
 8007f5e:	b580      	push	{r7, lr}
 8007f60:	b082      	sub	sp, #8
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	6078      	str	r0, [r7, #4]
    pQueue->wHeadIndex = 0;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	80da      	strh	r2, [r3, #6]
    pQueue->wTailIndex = 0;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	811a      	strh	r2, [r3, #8]
    pQueue->wCountEle = 0;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2200      	movs	r2, #0
 8007f76:	805a      	strh	r2, [r3, #2]
    
    memsetl(pQueue->pData, 0, pQueue->wSize);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	68d8      	ldr	r0, [r3, #12]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	881b      	ldrh	r3, [r3, #0]
 8007f80:	461a      	mov	r2, r3
 8007f82:	2100      	movs	r1, #0
 8007f84:	f000 f898 	bl	80080b8 <memsetl>
}
 8007f88:	bf00      	nop
 8007f8a:	3708      	adds	r7, #8
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <bufEnDat>:
 */
uint8_t
bufEnDat(
    buffqueue_p pQueue,
	uint8_t *pReceiverData
) {
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b084      	sub	sp, #16
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	6039      	str	r1, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007f9a:	b672      	cpsid	i
}
 8007f9c:	bf00      	nop
	__disable_irq();
    
    /* Place data in buffer */
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	73fb      	strb	r3, [r7, #15]
 8007fa2:	e021      	b.n	8007fe8 <bufEnDat+0x58>
        pQueue->pData[pQueue->wHeadIndex] = pReceiverData[i];
 8007fa4:	7bfb      	ldrb	r3, [r7, #15]
 8007fa6:	683a      	ldr	r2, [r7, #0]
 8007fa8:	441a      	add	r2, r3
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	68db      	ldr	r3, [r3, #12]
 8007fae:	6879      	ldr	r1, [r7, #4]
 8007fb0:	88c9      	ldrh	r1, [r1, #6]
 8007fb2:	440b      	add	r3, r1
 8007fb4:	7812      	ldrb	r2, [r2, #0]
 8007fb6:	701a      	strb	r2, [r3, #0]
        pQueue->wHeadIndex = ((pQueue->wHeadIndex + 1)  & (pQueue->wSize - 1));
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	88db      	ldrh	r3, [r3, #6]
 8007fbc:	3301      	adds	r3, #1
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	b21a      	sxth	r2, r3
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	881b      	ldrh	r3, [r3, #0]
 8007fc6:	3b01      	subs	r3, #1
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	b21b      	sxth	r3, r3
 8007fcc:	4013      	ands	r3, r2
 8007fce:	b21b      	sxth	r3, r3
 8007fd0:	b29a      	uxth	r2, r3
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	80da      	strh	r2, [r3, #6]
        pQueue->wCountEle++;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	885b      	ldrh	r3, [r3, #2]
 8007fda:	3301      	adds	r3, #1
 8007fdc:	b29a      	uxth	r2, r3
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	805a      	strh	r2, [r3, #2]
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 8007fe2:	7bfb      	ldrb	r3, [r7, #15]
 8007fe4:	3301      	adds	r3, #1
 8007fe6:	73fb      	strb	r3, [r7, #15]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	791b      	ldrb	r3, [r3, #4]
 8007fec:	7bfa      	ldrb	r2, [r7, #15]
 8007fee:	429a      	cmp	r2, r3
 8007ff0:	d3d8      	bcc.n	8007fa4 <bufEnDat+0x14>
    }
    
    if (bufIsFull(pQueue)) {
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f7ff ff8d 	bl	8007f12 <bufIsFull>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d010      	beq.n	8008020 <bufEnDat+0x90>
        /* Is going to overwrite the oldest byte */
        /* Increase tail index */
        pQueue->wTailIndex = (pQueue->wTailIndex + pQueue->byItemSize) & (pQueue->wSize - 1);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	891b      	ldrh	r3, [r3, #8]
 8008002:	687a      	ldr	r2, [r7, #4]
 8008004:	7912      	ldrb	r2, [r2, #4]
 8008006:	4413      	add	r3, r2
 8008008:	b29b      	uxth	r3, r3
 800800a:	b21a      	sxth	r2, r3
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	881b      	ldrh	r3, [r3, #0]
 8008010:	3b01      	subs	r3, #1
 8008012:	b29b      	uxth	r3, r3
 8008014:	b21b      	sxth	r3, r3
 8008016:	4013      	ands	r3, r2
 8008018:	b21b      	sxth	r3, r3
 800801a:	b29a      	uxth	r2, r3
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	811a      	strh	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8008020:	b662      	cpsie	i
}
 8008022:	bf00      	nop
    }
    
    __enable_irq();
    return ERR_OK;
 8008024:	2300      	movs	r3, #0
}
 8008026:	4618      	mov	r0, r3
 8008028:	3710      	adds	r7, #16
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}

0800802e <bufDeDat>:
 */
uint8_t
bufDeDat(
    buffqueue_p pQueue,
	uint8_t *pBuffer
) {
 800802e:	b580      	push	{r7, lr}
 8008030:	b084      	sub	sp, #16
 8008032:	af00      	add	r7, sp, #0
 8008034:	6078      	str	r0, [r7, #4]
 8008036:	6039      	str	r1, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8008038:	b672      	cpsid	i
}
 800803a:	bf00      	nop
	__disable_irq();
    
    if (bufIsEmpty(pQueue)) {
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f7ff ff7b 	bl	8007f38 <bufIsEmpty>
 8008042:	4603      	mov	r3, r0
 8008044:	2b00      	cmp	r3, #0
 8008046:	d006      	beq.n	8008056 <bufDeDat+0x28>
        /* No items */
        pQueue->wCountEle = 0;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2200      	movs	r2, #0
 800804c:	805a      	strh	r2, [r3, #2]
  __ASM volatile ("cpsie i" : : : "memory");
 800804e:	b662      	cpsie	i
}
 8008050:	bf00      	nop
        __enable_irq();
        return ERR_BUF_EMPTY;
 8008052:	2302      	movs	r3, #2
 8008054:	e02c      	b.n	80080b0 <bufDeDat+0x82>
    }
    
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 8008056:	2300      	movs	r3, #0
 8008058:	73fb      	strb	r3, [r7, #15]
 800805a:	e021      	b.n	80080a0 <bufDeDat+0x72>
        pBuffer[i] = pQueue->pData[pQueue->wTailIndex];
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	68db      	ldr	r3, [r3, #12]
 8008060:	687a      	ldr	r2, [r7, #4]
 8008062:	8912      	ldrh	r2, [r2, #8]
 8008064:	441a      	add	r2, r3
 8008066:	7bfb      	ldrb	r3, [r7, #15]
 8008068:	6839      	ldr	r1, [r7, #0]
 800806a:	440b      	add	r3, r1
 800806c:	7812      	ldrb	r2, [r2, #0]
 800806e:	701a      	strb	r2, [r3, #0]
        pQueue->wTailIndex = ((pQueue->wTailIndex + 1) & (pQueue->wSize - 1));
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	891b      	ldrh	r3, [r3, #8]
 8008074:	3301      	adds	r3, #1
 8008076:	b29b      	uxth	r3, r3
 8008078:	b21a      	sxth	r2, r3
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	881b      	ldrh	r3, [r3, #0]
 800807e:	3b01      	subs	r3, #1
 8008080:	b29b      	uxth	r3, r3
 8008082:	b21b      	sxth	r3, r3
 8008084:	4013      	ands	r3, r2
 8008086:	b21b      	sxth	r3, r3
 8008088:	b29a      	uxth	r2, r3
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	811a      	strh	r2, [r3, #8]
        pQueue->wCountEle--;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	885b      	ldrh	r3, [r3, #2]
 8008092:	3b01      	subs	r3, #1
 8008094:	b29a      	uxth	r2, r3
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	805a      	strh	r2, [r3, #2]
    for (uint8_t i = 0; i < pQueue->byItemSize; i++) {
 800809a:	7bfb      	ldrb	r3, [r7, #15]
 800809c:	3301      	adds	r3, #1
 800809e:	73fb      	strb	r3, [r7, #15]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	791b      	ldrb	r3, [r3, #4]
 80080a4:	7bfa      	ldrb	r2, [r7, #15]
 80080a6:	429a      	cmp	r2, r3
 80080a8:	d3d8      	bcc.n	800805c <bufDeDat+0x2e>
  __ASM volatile ("cpsie i" : : : "memory");
 80080aa:	b662      	cpsie	i
}
 80080ac:	bf00      	nop
    }
    
    __enable_irq();
    return ERR_OK;
 80080ae:	2300      	movs	r3, #0
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3710      	adds	r7, #16
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}

080080b8 <memsetl>:
void
memsetl(
	uint8_t *dst,
	uint8_t value,
	uint16_t size
) {
 80080b8:	b480      	push	{r7}
 80080ba:	b083      	sub	sp, #12
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	460b      	mov	r3, r1
 80080c2:	70fb      	strb	r3, [r7, #3]
 80080c4:	4613      	mov	r3, r2
 80080c6:	803b      	strh	r3, [r7, #0]
    while (size--) {
 80080c8:	e004      	b.n	80080d4 <memsetl+0x1c>
        *dst++ = value;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	1c5a      	adds	r2, r3, #1
 80080ce:	607a      	str	r2, [r7, #4]
 80080d0:	78fa      	ldrb	r2, [r7, #3]
 80080d2:	701a      	strb	r2, [r3, #0]
    while (size--) {
 80080d4:	883b      	ldrh	r3, [r7, #0]
 80080d6:	1e5a      	subs	r2, r3, #1
 80080d8:	803a      	strh	r2, [r7, #0]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d1f5      	bne.n	80080ca <memsetl+0x12>
    }    
}
 80080de:	bf00      	nop
 80080e0:	bf00      	nop
 80080e2:	370c      	adds	r7, #12
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr

080080ec <_strtol_l.constprop.0>:
 80080ec:	2b24      	cmp	r3, #36	@ 0x24
 80080ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080f2:	4686      	mov	lr, r0
 80080f4:	4690      	mov	r8, r2
 80080f6:	d801      	bhi.n	80080fc <_strtol_l.constprop.0+0x10>
 80080f8:	2b01      	cmp	r3, #1
 80080fa:	d106      	bne.n	800810a <_strtol_l.constprop.0+0x1e>
 80080fc:	f000 ffca 	bl	8009094 <__errno>
 8008100:	2316      	movs	r3, #22
 8008102:	6003      	str	r3, [r0, #0]
 8008104:	2000      	movs	r0, #0
 8008106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800810a:	4834      	ldr	r0, [pc, #208]	@ (80081dc <_strtol_l.constprop.0+0xf0>)
 800810c:	460d      	mov	r5, r1
 800810e:	462a      	mov	r2, r5
 8008110:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008114:	5d06      	ldrb	r6, [r0, r4]
 8008116:	f016 0608 	ands.w	r6, r6, #8
 800811a:	d1f8      	bne.n	800810e <_strtol_l.constprop.0+0x22>
 800811c:	2c2d      	cmp	r4, #45	@ 0x2d
 800811e:	d12d      	bne.n	800817c <_strtol_l.constprop.0+0x90>
 8008120:	782c      	ldrb	r4, [r5, #0]
 8008122:	2601      	movs	r6, #1
 8008124:	1c95      	adds	r5, r2, #2
 8008126:	f033 0210 	bics.w	r2, r3, #16
 800812a:	d109      	bne.n	8008140 <_strtol_l.constprop.0+0x54>
 800812c:	2c30      	cmp	r4, #48	@ 0x30
 800812e:	d12a      	bne.n	8008186 <_strtol_l.constprop.0+0x9a>
 8008130:	782a      	ldrb	r2, [r5, #0]
 8008132:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008136:	2a58      	cmp	r2, #88	@ 0x58
 8008138:	d125      	bne.n	8008186 <_strtol_l.constprop.0+0x9a>
 800813a:	786c      	ldrb	r4, [r5, #1]
 800813c:	2310      	movs	r3, #16
 800813e:	3502      	adds	r5, #2
 8008140:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008144:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008148:	2200      	movs	r2, #0
 800814a:	fbbc f9f3 	udiv	r9, ip, r3
 800814e:	4610      	mov	r0, r2
 8008150:	fb03 ca19 	mls	sl, r3, r9, ip
 8008154:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008158:	2f09      	cmp	r7, #9
 800815a:	d81b      	bhi.n	8008194 <_strtol_l.constprop.0+0xa8>
 800815c:	463c      	mov	r4, r7
 800815e:	42a3      	cmp	r3, r4
 8008160:	dd27      	ble.n	80081b2 <_strtol_l.constprop.0+0xc6>
 8008162:	1c57      	adds	r7, r2, #1
 8008164:	d007      	beq.n	8008176 <_strtol_l.constprop.0+0x8a>
 8008166:	4581      	cmp	r9, r0
 8008168:	d320      	bcc.n	80081ac <_strtol_l.constprop.0+0xc0>
 800816a:	d101      	bne.n	8008170 <_strtol_l.constprop.0+0x84>
 800816c:	45a2      	cmp	sl, r4
 800816e:	db1d      	blt.n	80081ac <_strtol_l.constprop.0+0xc0>
 8008170:	fb00 4003 	mla	r0, r0, r3, r4
 8008174:	2201      	movs	r2, #1
 8008176:	f815 4b01 	ldrb.w	r4, [r5], #1
 800817a:	e7eb      	b.n	8008154 <_strtol_l.constprop.0+0x68>
 800817c:	2c2b      	cmp	r4, #43	@ 0x2b
 800817e:	bf04      	itt	eq
 8008180:	782c      	ldrbeq	r4, [r5, #0]
 8008182:	1c95      	addeq	r5, r2, #2
 8008184:	e7cf      	b.n	8008126 <_strtol_l.constprop.0+0x3a>
 8008186:	2b00      	cmp	r3, #0
 8008188:	d1da      	bne.n	8008140 <_strtol_l.constprop.0+0x54>
 800818a:	2c30      	cmp	r4, #48	@ 0x30
 800818c:	bf0c      	ite	eq
 800818e:	2308      	moveq	r3, #8
 8008190:	230a      	movne	r3, #10
 8008192:	e7d5      	b.n	8008140 <_strtol_l.constprop.0+0x54>
 8008194:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008198:	2f19      	cmp	r7, #25
 800819a:	d801      	bhi.n	80081a0 <_strtol_l.constprop.0+0xb4>
 800819c:	3c37      	subs	r4, #55	@ 0x37
 800819e:	e7de      	b.n	800815e <_strtol_l.constprop.0+0x72>
 80081a0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80081a4:	2f19      	cmp	r7, #25
 80081a6:	d804      	bhi.n	80081b2 <_strtol_l.constprop.0+0xc6>
 80081a8:	3c57      	subs	r4, #87	@ 0x57
 80081aa:	e7d8      	b.n	800815e <_strtol_l.constprop.0+0x72>
 80081ac:	f04f 32ff 	mov.w	r2, #4294967295
 80081b0:	e7e1      	b.n	8008176 <_strtol_l.constprop.0+0x8a>
 80081b2:	1c53      	adds	r3, r2, #1
 80081b4:	d108      	bne.n	80081c8 <_strtol_l.constprop.0+0xdc>
 80081b6:	2322      	movs	r3, #34	@ 0x22
 80081b8:	f8ce 3000 	str.w	r3, [lr]
 80081bc:	4660      	mov	r0, ip
 80081be:	f1b8 0f00 	cmp.w	r8, #0
 80081c2:	d0a0      	beq.n	8008106 <_strtol_l.constprop.0+0x1a>
 80081c4:	1e69      	subs	r1, r5, #1
 80081c6:	e006      	b.n	80081d6 <_strtol_l.constprop.0+0xea>
 80081c8:	b106      	cbz	r6, 80081cc <_strtol_l.constprop.0+0xe0>
 80081ca:	4240      	negs	r0, r0
 80081cc:	f1b8 0f00 	cmp.w	r8, #0
 80081d0:	d099      	beq.n	8008106 <_strtol_l.constprop.0+0x1a>
 80081d2:	2a00      	cmp	r2, #0
 80081d4:	d1f6      	bne.n	80081c4 <_strtol_l.constprop.0+0xd8>
 80081d6:	f8c8 1000 	str.w	r1, [r8]
 80081da:	e794      	b.n	8008106 <_strtol_l.constprop.0+0x1a>
 80081dc:	0800cd12 	.word	0x0800cd12

080081e0 <_strtol_r>:
 80081e0:	f7ff bf84 	b.w	80080ec <_strtol_l.constprop.0>

080081e4 <__cvt>:
 80081e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80081e8:	ec57 6b10 	vmov	r6, r7, d0
 80081ec:	2f00      	cmp	r7, #0
 80081ee:	460c      	mov	r4, r1
 80081f0:	4619      	mov	r1, r3
 80081f2:	463b      	mov	r3, r7
 80081f4:	bfbb      	ittet	lt
 80081f6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80081fa:	461f      	movlt	r7, r3
 80081fc:	2300      	movge	r3, #0
 80081fe:	232d      	movlt	r3, #45	@ 0x2d
 8008200:	700b      	strb	r3, [r1, #0]
 8008202:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008204:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008208:	4691      	mov	r9, r2
 800820a:	f023 0820 	bic.w	r8, r3, #32
 800820e:	bfbc      	itt	lt
 8008210:	4632      	movlt	r2, r6
 8008212:	4616      	movlt	r6, r2
 8008214:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008218:	d005      	beq.n	8008226 <__cvt+0x42>
 800821a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800821e:	d100      	bne.n	8008222 <__cvt+0x3e>
 8008220:	3401      	adds	r4, #1
 8008222:	2102      	movs	r1, #2
 8008224:	e000      	b.n	8008228 <__cvt+0x44>
 8008226:	2103      	movs	r1, #3
 8008228:	ab03      	add	r3, sp, #12
 800822a:	9301      	str	r3, [sp, #4]
 800822c:	ab02      	add	r3, sp, #8
 800822e:	9300      	str	r3, [sp, #0]
 8008230:	ec47 6b10 	vmov	d0, r6, r7
 8008234:	4653      	mov	r3, sl
 8008236:	4622      	mov	r2, r4
 8008238:	f000 fff2 	bl	8009220 <_dtoa_r>
 800823c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008240:	4605      	mov	r5, r0
 8008242:	d119      	bne.n	8008278 <__cvt+0x94>
 8008244:	f019 0f01 	tst.w	r9, #1
 8008248:	d00e      	beq.n	8008268 <__cvt+0x84>
 800824a:	eb00 0904 	add.w	r9, r0, r4
 800824e:	2200      	movs	r2, #0
 8008250:	2300      	movs	r3, #0
 8008252:	4630      	mov	r0, r6
 8008254:	4639      	mov	r1, r7
 8008256:	f7f8 fc3f 	bl	8000ad8 <__aeabi_dcmpeq>
 800825a:	b108      	cbz	r0, 8008260 <__cvt+0x7c>
 800825c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008260:	2230      	movs	r2, #48	@ 0x30
 8008262:	9b03      	ldr	r3, [sp, #12]
 8008264:	454b      	cmp	r3, r9
 8008266:	d31e      	bcc.n	80082a6 <__cvt+0xc2>
 8008268:	9b03      	ldr	r3, [sp, #12]
 800826a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800826c:	1b5b      	subs	r3, r3, r5
 800826e:	4628      	mov	r0, r5
 8008270:	6013      	str	r3, [r2, #0]
 8008272:	b004      	add	sp, #16
 8008274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008278:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800827c:	eb00 0904 	add.w	r9, r0, r4
 8008280:	d1e5      	bne.n	800824e <__cvt+0x6a>
 8008282:	7803      	ldrb	r3, [r0, #0]
 8008284:	2b30      	cmp	r3, #48	@ 0x30
 8008286:	d10a      	bne.n	800829e <__cvt+0xba>
 8008288:	2200      	movs	r2, #0
 800828a:	2300      	movs	r3, #0
 800828c:	4630      	mov	r0, r6
 800828e:	4639      	mov	r1, r7
 8008290:	f7f8 fc22 	bl	8000ad8 <__aeabi_dcmpeq>
 8008294:	b918      	cbnz	r0, 800829e <__cvt+0xba>
 8008296:	f1c4 0401 	rsb	r4, r4, #1
 800829a:	f8ca 4000 	str.w	r4, [sl]
 800829e:	f8da 3000 	ldr.w	r3, [sl]
 80082a2:	4499      	add	r9, r3
 80082a4:	e7d3      	b.n	800824e <__cvt+0x6a>
 80082a6:	1c59      	adds	r1, r3, #1
 80082a8:	9103      	str	r1, [sp, #12]
 80082aa:	701a      	strb	r2, [r3, #0]
 80082ac:	e7d9      	b.n	8008262 <__cvt+0x7e>

080082ae <__exponent>:
 80082ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082b0:	2900      	cmp	r1, #0
 80082b2:	bfba      	itte	lt
 80082b4:	4249      	neglt	r1, r1
 80082b6:	232d      	movlt	r3, #45	@ 0x2d
 80082b8:	232b      	movge	r3, #43	@ 0x2b
 80082ba:	2909      	cmp	r1, #9
 80082bc:	7002      	strb	r2, [r0, #0]
 80082be:	7043      	strb	r3, [r0, #1]
 80082c0:	dd29      	ble.n	8008316 <__exponent+0x68>
 80082c2:	f10d 0307 	add.w	r3, sp, #7
 80082c6:	461d      	mov	r5, r3
 80082c8:	270a      	movs	r7, #10
 80082ca:	461a      	mov	r2, r3
 80082cc:	fbb1 f6f7 	udiv	r6, r1, r7
 80082d0:	fb07 1416 	mls	r4, r7, r6, r1
 80082d4:	3430      	adds	r4, #48	@ 0x30
 80082d6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80082da:	460c      	mov	r4, r1
 80082dc:	2c63      	cmp	r4, #99	@ 0x63
 80082de:	f103 33ff 	add.w	r3, r3, #4294967295
 80082e2:	4631      	mov	r1, r6
 80082e4:	dcf1      	bgt.n	80082ca <__exponent+0x1c>
 80082e6:	3130      	adds	r1, #48	@ 0x30
 80082e8:	1e94      	subs	r4, r2, #2
 80082ea:	f803 1c01 	strb.w	r1, [r3, #-1]
 80082ee:	1c41      	adds	r1, r0, #1
 80082f0:	4623      	mov	r3, r4
 80082f2:	42ab      	cmp	r3, r5
 80082f4:	d30a      	bcc.n	800830c <__exponent+0x5e>
 80082f6:	f10d 0309 	add.w	r3, sp, #9
 80082fa:	1a9b      	subs	r3, r3, r2
 80082fc:	42ac      	cmp	r4, r5
 80082fe:	bf88      	it	hi
 8008300:	2300      	movhi	r3, #0
 8008302:	3302      	adds	r3, #2
 8008304:	4403      	add	r3, r0
 8008306:	1a18      	subs	r0, r3, r0
 8008308:	b003      	add	sp, #12
 800830a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800830c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008310:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008314:	e7ed      	b.n	80082f2 <__exponent+0x44>
 8008316:	2330      	movs	r3, #48	@ 0x30
 8008318:	3130      	adds	r1, #48	@ 0x30
 800831a:	7083      	strb	r3, [r0, #2]
 800831c:	70c1      	strb	r1, [r0, #3]
 800831e:	1d03      	adds	r3, r0, #4
 8008320:	e7f1      	b.n	8008306 <__exponent+0x58>
	...

08008324 <_printf_float>:
 8008324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008328:	b08d      	sub	sp, #52	@ 0x34
 800832a:	460c      	mov	r4, r1
 800832c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008330:	4616      	mov	r6, r2
 8008332:	461f      	mov	r7, r3
 8008334:	4605      	mov	r5, r0
 8008336:	f000 fe63 	bl	8009000 <_localeconv_r>
 800833a:	6803      	ldr	r3, [r0, #0]
 800833c:	9304      	str	r3, [sp, #16]
 800833e:	4618      	mov	r0, r3
 8008340:	f7f7 ff9e 	bl	8000280 <strlen>
 8008344:	2300      	movs	r3, #0
 8008346:	930a      	str	r3, [sp, #40]	@ 0x28
 8008348:	f8d8 3000 	ldr.w	r3, [r8]
 800834c:	9005      	str	r0, [sp, #20]
 800834e:	3307      	adds	r3, #7
 8008350:	f023 0307 	bic.w	r3, r3, #7
 8008354:	f103 0208 	add.w	r2, r3, #8
 8008358:	f894 a018 	ldrb.w	sl, [r4, #24]
 800835c:	f8d4 b000 	ldr.w	fp, [r4]
 8008360:	f8c8 2000 	str.w	r2, [r8]
 8008364:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008368:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800836c:	9307      	str	r3, [sp, #28]
 800836e:	f8cd 8018 	str.w	r8, [sp, #24]
 8008372:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008376:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800837a:	4b9c      	ldr	r3, [pc, #624]	@ (80085ec <_printf_float+0x2c8>)
 800837c:	f04f 32ff 	mov.w	r2, #4294967295
 8008380:	f7f8 fbdc 	bl	8000b3c <__aeabi_dcmpun>
 8008384:	bb70      	cbnz	r0, 80083e4 <_printf_float+0xc0>
 8008386:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800838a:	4b98      	ldr	r3, [pc, #608]	@ (80085ec <_printf_float+0x2c8>)
 800838c:	f04f 32ff 	mov.w	r2, #4294967295
 8008390:	f7f8 fbb6 	bl	8000b00 <__aeabi_dcmple>
 8008394:	bb30      	cbnz	r0, 80083e4 <_printf_float+0xc0>
 8008396:	2200      	movs	r2, #0
 8008398:	2300      	movs	r3, #0
 800839a:	4640      	mov	r0, r8
 800839c:	4649      	mov	r1, r9
 800839e:	f7f8 fba5 	bl	8000aec <__aeabi_dcmplt>
 80083a2:	b110      	cbz	r0, 80083aa <_printf_float+0x86>
 80083a4:	232d      	movs	r3, #45	@ 0x2d
 80083a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80083aa:	4a91      	ldr	r2, [pc, #580]	@ (80085f0 <_printf_float+0x2cc>)
 80083ac:	4b91      	ldr	r3, [pc, #580]	@ (80085f4 <_printf_float+0x2d0>)
 80083ae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80083b2:	bf94      	ite	ls
 80083b4:	4690      	movls	r8, r2
 80083b6:	4698      	movhi	r8, r3
 80083b8:	2303      	movs	r3, #3
 80083ba:	6123      	str	r3, [r4, #16]
 80083bc:	f02b 0304 	bic.w	r3, fp, #4
 80083c0:	6023      	str	r3, [r4, #0]
 80083c2:	f04f 0900 	mov.w	r9, #0
 80083c6:	9700      	str	r7, [sp, #0]
 80083c8:	4633      	mov	r3, r6
 80083ca:	aa0b      	add	r2, sp, #44	@ 0x2c
 80083cc:	4621      	mov	r1, r4
 80083ce:	4628      	mov	r0, r5
 80083d0:	f000 f9d2 	bl	8008778 <_printf_common>
 80083d4:	3001      	adds	r0, #1
 80083d6:	f040 808d 	bne.w	80084f4 <_printf_float+0x1d0>
 80083da:	f04f 30ff 	mov.w	r0, #4294967295
 80083de:	b00d      	add	sp, #52	@ 0x34
 80083e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083e4:	4642      	mov	r2, r8
 80083e6:	464b      	mov	r3, r9
 80083e8:	4640      	mov	r0, r8
 80083ea:	4649      	mov	r1, r9
 80083ec:	f7f8 fba6 	bl	8000b3c <__aeabi_dcmpun>
 80083f0:	b140      	cbz	r0, 8008404 <_printf_float+0xe0>
 80083f2:	464b      	mov	r3, r9
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	bfbc      	itt	lt
 80083f8:	232d      	movlt	r3, #45	@ 0x2d
 80083fa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80083fe:	4a7e      	ldr	r2, [pc, #504]	@ (80085f8 <_printf_float+0x2d4>)
 8008400:	4b7e      	ldr	r3, [pc, #504]	@ (80085fc <_printf_float+0x2d8>)
 8008402:	e7d4      	b.n	80083ae <_printf_float+0x8a>
 8008404:	6863      	ldr	r3, [r4, #4]
 8008406:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800840a:	9206      	str	r2, [sp, #24]
 800840c:	1c5a      	adds	r2, r3, #1
 800840e:	d13b      	bne.n	8008488 <_printf_float+0x164>
 8008410:	2306      	movs	r3, #6
 8008412:	6063      	str	r3, [r4, #4]
 8008414:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008418:	2300      	movs	r3, #0
 800841a:	6022      	str	r2, [r4, #0]
 800841c:	9303      	str	r3, [sp, #12]
 800841e:	ab0a      	add	r3, sp, #40	@ 0x28
 8008420:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008424:	ab09      	add	r3, sp, #36	@ 0x24
 8008426:	9300      	str	r3, [sp, #0]
 8008428:	6861      	ldr	r1, [r4, #4]
 800842a:	ec49 8b10 	vmov	d0, r8, r9
 800842e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008432:	4628      	mov	r0, r5
 8008434:	f7ff fed6 	bl	80081e4 <__cvt>
 8008438:	9b06      	ldr	r3, [sp, #24]
 800843a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800843c:	2b47      	cmp	r3, #71	@ 0x47
 800843e:	4680      	mov	r8, r0
 8008440:	d129      	bne.n	8008496 <_printf_float+0x172>
 8008442:	1cc8      	adds	r0, r1, #3
 8008444:	db02      	blt.n	800844c <_printf_float+0x128>
 8008446:	6863      	ldr	r3, [r4, #4]
 8008448:	4299      	cmp	r1, r3
 800844a:	dd41      	ble.n	80084d0 <_printf_float+0x1ac>
 800844c:	f1aa 0a02 	sub.w	sl, sl, #2
 8008450:	fa5f fa8a 	uxtb.w	sl, sl
 8008454:	3901      	subs	r1, #1
 8008456:	4652      	mov	r2, sl
 8008458:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800845c:	9109      	str	r1, [sp, #36]	@ 0x24
 800845e:	f7ff ff26 	bl	80082ae <__exponent>
 8008462:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008464:	1813      	adds	r3, r2, r0
 8008466:	2a01      	cmp	r2, #1
 8008468:	4681      	mov	r9, r0
 800846a:	6123      	str	r3, [r4, #16]
 800846c:	dc02      	bgt.n	8008474 <_printf_float+0x150>
 800846e:	6822      	ldr	r2, [r4, #0]
 8008470:	07d2      	lsls	r2, r2, #31
 8008472:	d501      	bpl.n	8008478 <_printf_float+0x154>
 8008474:	3301      	adds	r3, #1
 8008476:	6123      	str	r3, [r4, #16]
 8008478:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800847c:	2b00      	cmp	r3, #0
 800847e:	d0a2      	beq.n	80083c6 <_printf_float+0xa2>
 8008480:	232d      	movs	r3, #45	@ 0x2d
 8008482:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008486:	e79e      	b.n	80083c6 <_printf_float+0xa2>
 8008488:	9a06      	ldr	r2, [sp, #24]
 800848a:	2a47      	cmp	r2, #71	@ 0x47
 800848c:	d1c2      	bne.n	8008414 <_printf_float+0xf0>
 800848e:	2b00      	cmp	r3, #0
 8008490:	d1c0      	bne.n	8008414 <_printf_float+0xf0>
 8008492:	2301      	movs	r3, #1
 8008494:	e7bd      	b.n	8008412 <_printf_float+0xee>
 8008496:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800849a:	d9db      	bls.n	8008454 <_printf_float+0x130>
 800849c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80084a0:	d118      	bne.n	80084d4 <_printf_float+0x1b0>
 80084a2:	2900      	cmp	r1, #0
 80084a4:	6863      	ldr	r3, [r4, #4]
 80084a6:	dd0b      	ble.n	80084c0 <_printf_float+0x19c>
 80084a8:	6121      	str	r1, [r4, #16]
 80084aa:	b913      	cbnz	r3, 80084b2 <_printf_float+0x18e>
 80084ac:	6822      	ldr	r2, [r4, #0]
 80084ae:	07d0      	lsls	r0, r2, #31
 80084b0:	d502      	bpl.n	80084b8 <_printf_float+0x194>
 80084b2:	3301      	adds	r3, #1
 80084b4:	440b      	add	r3, r1
 80084b6:	6123      	str	r3, [r4, #16]
 80084b8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80084ba:	f04f 0900 	mov.w	r9, #0
 80084be:	e7db      	b.n	8008478 <_printf_float+0x154>
 80084c0:	b913      	cbnz	r3, 80084c8 <_printf_float+0x1a4>
 80084c2:	6822      	ldr	r2, [r4, #0]
 80084c4:	07d2      	lsls	r2, r2, #31
 80084c6:	d501      	bpl.n	80084cc <_printf_float+0x1a8>
 80084c8:	3302      	adds	r3, #2
 80084ca:	e7f4      	b.n	80084b6 <_printf_float+0x192>
 80084cc:	2301      	movs	r3, #1
 80084ce:	e7f2      	b.n	80084b6 <_printf_float+0x192>
 80084d0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80084d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80084d6:	4299      	cmp	r1, r3
 80084d8:	db05      	blt.n	80084e6 <_printf_float+0x1c2>
 80084da:	6823      	ldr	r3, [r4, #0]
 80084dc:	6121      	str	r1, [r4, #16]
 80084de:	07d8      	lsls	r0, r3, #31
 80084e0:	d5ea      	bpl.n	80084b8 <_printf_float+0x194>
 80084e2:	1c4b      	adds	r3, r1, #1
 80084e4:	e7e7      	b.n	80084b6 <_printf_float+0x192>
 80084e6:	2900      	cmp	r1, #0
 80084e8:	bfd4      	ite	le
 80084ea:	f1c1 0202 	rsble	r2, r1, #2
 80084ee:	2201      	movgt	r2, #1
 80084f0:	4413      	add	r3, r2
 80084f2:	e7e0      	b.n	80084b6 <_printf_float+0x192>
 80084f4:	6823      	ldr	r3, [r4, #0]
 80084f6:	055a      	lsls	r2, r3, #21
 80084f8:	d407      	bmi.n	800850a <_printf_float+0x1e6>
 80084fa:	6923      	ldr	r3, [r4, #16]
 80084fc:	4642      	mov	r2, r8
 80084fe:	4631      	mov	r1, r6
 8008500:	4628      	mov	r0, r5
 8008502:	47b8      	blx	r7
 8008504:	3001      	adds	r0, #1
 8008506:	d12b      	bne.n	8008560 <_printf_float+0x23c>
 8008508:	e767      	b.n	80083da <_printf_float+0xb6>
 800850a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800850e:	f240 80dd 	bls.w	80086cc <_printf_float+0x3a8>
 8008512:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008516:	2200      	movs	r2, #0
 8008518:	2300      	movs	r3, #0
 800851a:	f7f8 fadd 	bl	8000ad8 <__aeabi_dcmpeq>
 800851e:	2800      	cmp	r0, #0
 8008520:	d033      	beq.n	800858a <_printf_float+0x266>
 8008522:	4a37      	ldr	r2, [pc, #220]	@ (8008600 <_printf_float+0x2dc>)
 8008524:	2301      	movs	r3, #1
 8008526:	4631      	mov	r1, r6
 8008528:	4628      	mov	r0, r5
 800852a:	47b8      	blx	r7
 800852c:	3001      	adds	r0, #1
 800852e:	f43f af54 	beq.w	80083da <_printf_float+0xb6>
 8008532:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008536:	4543      	cmp	r3, r8
 8008538:	db02      	blt.n	8008540 <_printf_float+0x21c>
 800853a:	6823      	ldr	r3, [r4, #0]
 800853c:	07d8      	lsls	r0, r3, #31
 800853e:	d50f      	bpl.n	8008560 <_printf_float+0x23c>
 8008540:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008544:	4631      	mov	r1, r6
 8008546:	4628      	mov	r0, r5
 8008548:	47b8      	blx	r7
 800854a:	3001      	adds	r0, #1
 800854c:	f43f af45 	beq.w	80083da <_printf_float+0xb6>
 8008550:	f04f 0900 	mov.w	r9, #0
 8008554:	f108 38ff 	add.w	r8, r8, #4294967295
 8008558:	f104 0a1a 	add.w	sl, r4, #26
 800855c:	45c8      	cmp	r8, r9
 800855e:	dc09      	bgt.n	8008574 <_printf_float+0x250>
 8008560:	6823      	ldr	r3, [r4, #0]
 8008562:	079b      	lsls	r3, r3, #30
 8008564:	f100 8103 	bmi.w	800876e <_printf_float+0x44a>
 8008568:	68e0      	ldr	r0, [r4, #12]
 800856a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800856c:	4298      	cmp	r0, r3
 800856e:	bfb8      	it	lt
 8008570:	4618      	movlt	r0, r3
 8008572:	e734      	b.n	80083de <_printf_float+0xba>
 8008574:	2301      	movs	r3, #1
 8008576:	4652      	mov	r2, sl
 8008578:	4631      	mov	r1, r6
 800857a:	4628      	mov	r0, r5
 800857c:	47b8      	blx	r7
 800857e:	3001      	adds	r0, #1
 8008580:	f43f af2b 	beq.w	80083da <_printf_float+0xb6>
 8008584:	f109 0901 	add.w	r9, r9, #1
 8008588:	e7e8      	b.n	800855c <_printf_float+0x238>
 800858a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800858c:	2b00      	cmp	r3, #0
 800858e:	dc39      	bgt.n	8008604 <_printf_float+0x2e0>
 8008590:	4a1b      	ldr	r2, [pc, #108]	@ (8008600 <_printf_float+0x2dc>)
 8008592:	2301      	movs	r3, #1
 8008594:	4631      	mov	r1, r6
 8008596:	4628      	mov	r0, r5
 8008598:	47b8      	blx	r7
 800859a:	3001      	adds	r0, #1
 800859c:	f43f af1d 	beq.w	80083da <_printf_float+0xb6>
 80085a0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80085a4:	ea59 0303 	orrs.w	r3, r9, r3
 80085a8:	d102      	bne.n	80085b0 <_printf_float+0x28c>
 80085aa:	6823      	ldr	r3, [r4, #0]
 80085ac:	07d9      	lsls	r1, r3, #31
 80085ae:	d5d7      	bpl.n	8008560 <_printf_float+0x23c>
 80085b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085b4:	4631      	mov	r1, r6
 80085b6:	4628      	mov	r0, r5
 80085b8:	47b8      	blx	r7
 80085ba:	3001      	adds	r0, #1
 80085bc:	f43f af0d 	beq.w	80083da <_printf_float+0xb6>
 80085c0:	f04f 0a00 	mov.w	sl, #0
 80085c4:	f104 0b1a 	add.w	fp, r4, #26
 80085c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085ca:	425b      	negs	r3, r3
 80085cc:	4553      	cmp	r3, sl
 80085ce:	dc01      	bgt.n	80085d4 <_printf_float+0x2b0>
 80085d0:	464b      	mov	r3, r9
 80085d2:	e793      	b.n	80084fc <_printf_float+0x1d8>
 80085d4:	2301      	movs	r3, #1
 80085d6:	465a      	mov	r2, fp
 80085d8:	4631      	mov	r1, r6
 80085da:	4628      	mov	r0, r5
 80085dc:	47b8      	blx	r7
 80085de:	3001      	adds	r0, #1
 80085e0:	f43f aefb 	beq.w	80083da <_printf_float+0xb6>
 80085e4:	f10a 0a01 	add.w	sl, sl, #1
 80085e8:	e7ee      	b.n	80085c8 <_printf_float+0x2a4>
 80085ea:	bf00      	nop
 80085ec:	7fefffff 	.word	0x7fefffff
 80085f0:	0800ce12 	.word	0x0800ce12
 80085f4:	0800ce16 	.word	0x0800ce16
 80085f8:	0800ce1a 	.word	0x0800ce1a
 80085fc:	0800ce1e 	.word	0x0800ce1e
 8008600:	0800d04f 	.word	0x0800d04f
 8008604:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008606:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800860a:	4553      	cmp	r3, sl
 800860c:	bfa8      	it	ge
 800860e:	4653      	movge	r3, sl
 8008610:	2b00      	cmp	r3, #0
 8008612:	4699      	mov	r9, r3
 8008614:	dc36      	bgt.n	8008684 <_printf_float+0x360>
 8008616:	f04f 0b00 	mov.w	fp, #0
 800861a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800861e:	f104 021a 	add.w	r2, r4, #26
 8008622:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008624:	9306      	str	r3, [sp, #24]
 8008626:	eba3 0309 	sub.w	r3, r3, r9
 800862a:	455b      	cmp	r3, fp
 800862c:	dc31      	bgt.n	8008692 <_printf_float+0x36e>
 800862e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008630:	459a      	cmp	sl, r3
 8008632:	dc3a      	bgt.n	80086aa <_printf_float+0x386>
 8008634:	6823      	ldr	r3, [r4, #0]
 8008636:	07da      	lsls	r2, r3, #31
 8008638:	d437      	bmi.n	80086aa <_printf_float+0x386>
 800863a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800863c:	ebaa 0903 	sub.w	r9, sl, r3
 8008640:	9b06      	ldr	r3, [sp, #24]
 8008642:	ebaa 0303 	sub.w	r3, sl, r3
 8008646:	4599      	cmp	r9, r3
 8008648:	bfa8      	it	ge
 800864a:	4699      	movge	r9, r3
 800864c:	f1b9 0f00 	cmp.w	r9, #0
 8008650:	dc33      	bgt.n	80086ba <_printf_float+0x396>
 8008652:	f04f 0800 	mov.w	r8, #0
 8008656:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800865a:	f104 0b1a 	add.w	fp, r4, #26
 800865e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008660:	ebaa 0303 	sub.w	r3, sl, r3
 8008664:	eba3 0309 	sub.w	r3, r3, r9
 8008668:	4543      	cmp	r3, r8
 800866a:	f77f af79 	ble.w	8008560 <_printf_float+0x23c>
 800866e:	2301      	movs	r3, #1
 8008670:	465a      	mov	r2, fp
 8008672:	4631      	mov	r1, r6
 8008674:	4628      	mov	r0, r5
 8008676:	47b8      	blx	r7
 8008678:	3001      	adds	r0, #1
 800867a:	f43f aeae 	beq.w	80083da <_printf_float+0xb6>
 800867e:	f108 0801 	add.w	r8, r8, #1
 8008682:	e7ec      	b.n	800865e <_printf_float+0x33a>
 8008684:	4642      	mov	r2, r8
 8008686:	4631      	mov	r1, r6
 8008688:	4628      	mov	r0, r5
 800868a:	47b8      	blx	r7
 800868c:	3001      	adds	r0, #1
 800868e:	d1c2      	bne.n	8008616 <_printf_float+0x2f2>
 8008690:	e6a3      	b.n	80083da <_printf_float+0xb6>
 8008692:	2301      	movs	r3, #1
 8008694:	4631      	mov	r1, r6
 8008696:	4628      	mov	r0, r5
 8008698:	9206      	str	r2, [sp, #24]
 800869a:	47b8      	blx	r7
 800869c:	3001      	adds	r0, #1
 800869e:	f43f ae9c 	beq.w	80083da <_printf_float+0xb6>
 80086a2:	9a06      	ldr	r2, [sp, #24]
 80086a4:	f10b 0b01 	add.w	fp, fp, #1
 80086a8:	e7bb      	b.n	8008622 <_printf_float+0x2fe>
 80086aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086ae:	4631      	mov	r1, r6
 80086b0:	4628      	mov	r0, r5
 80086b2:	47b8      	blx	r7
 80086b4:	3001      	adds	r0, #1
 80086b6:	d1c0      	bne.n	800863a <_printf_float+0x316>
 80086b8:	e68f      	b.n	80083da <_printf_float+0xb6>
 80086ba:	9a06      	ldr	r2, [sp, #24]
 80086bc:	464b      	mov	r3, r9
 80086be:	4442      	add	r2, r8
 80086c0:	4631      	mov	r1, r6
 80086c2:	4628      	mov	r0, r5
 80086c4:	47b8      	blx	r7
 80086c6:	3001      	adds	r0, #1
 80086c8:	d1c3      	bne.n	8008652 <_printf_float+0x32e>
 80086ca:	e686      	b.n	80083da <_printf_float+0xb6>
 80086cc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80086d0:	f1ba 0f01 	cmp.w	sl, #1
 80086d4:	dc01      	bgt.n	80086da <_printf_float+0x3b6>
 80086d6:	07db      	lsls	r3, r3, #31
 80086d8:	d536      	bpl.n	8008748 <_printf_float+0x424>
 80086da:	2301      	movs	r3, #1
 80086dc:	4642      	mov	r2, r8
 80086de:	4631      	mov	r1, r6
 80086e0:	4628      	mov	r0, r5
 80086e2:	47b8      	blx	r7
 80086e4:	3001      	adds	r0, #1
 80086e6:	f43f ae78 	beq.w	80083da <_printf_float+0xb6>
 80086ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086ee:	4631      	mov	r1, r6
 80086f0:	4628      	mov	r0, r5
 80086f2:	47b8      	blx	r7
 80086f4:	3001      	adds	r0, #1
 80086f6:	f43f ae70 	beq.w	80083da <_printf_float+0xb6>
 80086fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80086fe:	2200      	movs	r2, #0
 8008700:	2300      	movs	r3, #0
 8008702:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008706:	f7f8 f9e7 	bl	8000ad8 <__aeabi_dcmpeq>
 800870a:	b9c0      	cbnz	r0, 800873e <_printf_float+0x41a>
 800870c:	4653      	mov	r3, sl
 800870e:	f108 0201 	add.w	r2, r8, #1
 8008712:	4631      	mov	r1, r6
 8008714:	4628      	mov	r0, r5
 8008716:	47b8      	blx	r7
 8008718:	3001      	adds	r0, #1
 800871a:	d10c      	bne.n	8008736 <_printf_float+0x412>
 800871c:	e65d      	b.n	80083da <_printf_float+0xb6>
 800871e:	2301      	movs	r3, #1
 8008720:	465a      	mov	r2, fp
 8008722:	4631      	mov	r1, r6
 8008724:	4628      	mov	r0, r5
 8008726:	47b8      	blx	r7
 8008728:	3001      	adds	r0, #1
 800872a:	f43f ae56 	beq.w	80083da <_printf_float+0xb6>
 800872e:	f108 0801 	add.w	r8, r8, #1
 8008732:	45d0      	cmp	r8, sl
 8008734:	dbf3      	blt.n	800871e <_printf_float+0x3fa>
 8008736:	464b      	mov	r3, r9
 8008738:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800873c:	e6df      	b.n	80084fe <_printf_float+0x1da>
 800873e:	f04f 0800 	mov.w	r8, #0
 8008742:	f104 0b1a 	add.w	fp, r4, #26
 8008746:	e7f4      	b.n	8008732 <_printf_float+0x40e>
 8008748:	2301      	movs	r3, #1
 800874a:	4642      	mov	r2, r8
 800874c:	e7e1      	b.n	8008712 <_printf_float+0x3ee>
 800874e:	2301      	movs	r3, #1
 8008750:	464a      	mov	r2, r9
 8008752:	4631      	mov	r1, r6
 8008754:	4628      	mov	r0, r5
 8008756:	47b8      	blx	r7
 8008758:	3001      	adds	r0, #1
 800875a:	f43f ae3e 	beq.w	80083da <_printf_float+0xb6>
 800875e:	f108 0801 	add.w	r8, r8, #1
 8008762:	68e3      	ldr	r3, [r4, #12]
 8008764:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008766:	1a5b      	subs	r3, r3, r1
 8008768:	4543      	cmp	r3, r8
 800876a:	dcf0      	bgt.n	800874e <_printf_float+0x42a>
 800876c:	e6fc      	b.n	8008568 <_printf_float+0x244>
 800876e:	f04f 0800 	mov.w	r8, #0
 8008772:	f104 0919 	add.w	r9, r4, #25
 8008776:	e7f4      	b.n	8008762 <_printf_float+0x43e>

08008778 <_printf_common>:
 8008778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800877c:	4616      	mov	r6, r2
 800877e:	4698      	mov	r8, r3
 8008780:	688a      	ldr	r2, [r1, #8]
 8008782:	690b      	ldr	r3, [r1, #16]
 8008784:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008788:	4293      	cmp	r3, r2
 800878a:	bfb8      	it	lt
 800878c:	4613      	movlt	r3, r2
 800878e:	6033      	str	r3, [r6, #0]
 8008790:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008794:	4607      	mov	r7, r0
 8008796:	460c      	mov	r4, r1
 8008798:	b10a      	cbz	r2, 800879e <_printf_common+0x26>
 800879a:	3301      	adds	r3, #1
 800879c:	6033      	str	r3, [r6, #0]
 800879e:	6823      	ldr	r3, [r4, #0]
 80087a0:	0699      	lsls	r1, r3, #26
 80087a2:	bf42      	ittt	mi
 80087a4:	6833      	ldrmi	r3, [r6, #0]
 80087a6:	3302      	addmi	r3, #2
 80087a8:	6033      	strmi	r3, [r6, #0]
 80087aa:	6825      	ldr	r5, [r4, #0]
 80087ac:	f015 0506 	ands.w	r5, r5, #6
 80087b0:	d106      	bne.n	80087c0 <_printf_common+0x48>
 80087b2:	f104 0a19 	add.w	sl, r4, #25
 80087b6:	68e3      	ldr	r3, [r4, #12]
 80087b8:	6832      	ldr	r2, [r6, #0]
 80087ba:	1a9b      	subs	r3, r3, r2
 80087bc:	42ab      	cmp	r3, r5
 80087be:	dc26      	bgt.n	800880e <_printf_common+0x96>
 80087c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80087c4:	6822      	ldr	r2, [r4, #0]
 80087c6:	3b00      	subs	r3, #0
 80087c8:	bf18      	it	ne
 80087ca:	2301      	movne	r3, #1
 80087cc:	0692      	lsls	r2, r2, #26
 80087ce:	d42b      	bmi.n	8008828 <_printf_common+0xb0>
 80087d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80087d4:	4641      	mov	r1, r8
 80087d6:	4638      	mov	r0, r7
 80087d8:	47c8      	blx	r9
 80087da:	3001      	adds	r0, #1
 80087dc:	d01e      	beq.n	800881c <_printf_common+0xa4>
 80087de:	6823      	ldr	r3, [r4, #0]
 80087e0:	6922      	ldr	r2, [r4, #16]
 80087e2:	f003 0306 	and.w	r3, r3, #6
 80087e6:	2b04      	cmp	r3, #4
 80087e8:	bf02      	ittt	eq
 80087ea:	68e5      	ldreq	r5, [r4, #12]
 80087ec:	6833      	ldreq	r3, [r6, #0]
 80087ee:	1aed      	subeq	r5, r5, r3
 80087f0:	68a3      	ldr	r3, [r4, #8]
 80087f2:	bf0c      	ite	eq
 80087f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80087f8:	2500      	movne	r5, #0
 80087fa:	4293      	cmp	r3, r2
 80087fc:	bfc4      	itt	gt
 80087fe:	1a9b      	subgt	r3, r3, r2
 8008800:	18ed      	addgt	r5, r5, r3
 8008802:	2600      	movs	r6, #0
 8008804:	341a      	adds	r4, #26
 8008806:	42b5      	cmp	r5, r6
 8008808:	d11a      	bne.n	8008840 <_printf_common+0xc8>
 800880a:	2000      	movs	r0, #0
 800880c:	e008      	b.n	8008820 <_printf_common+0xa8>
 800880e:	2301      	movs	r3, #1
 8008810:	4652      	mov	r2, sl
 8008812:	4641      	mov	r1, r8
 8008814:	4638      	mov	r0, r7
 8008816:	47c8      	blx	r9
 8008818:	3001      	adds	r0, #1
 800881a:	d103      	bne.n	8008824 <_printf_common+0xac>
 800881c:	f04f 30ff 	mov.w	r0, #4294967295
 8008820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008824:	3501      	adds	r5, #1
 8008826:	e7c6      	b.n	80087b6 <_printf_common+0x3e>
 8008828:	18e1      	adds	r1, r4, r3
 800882a:	1c5a      	adds	r2, r3, #1
 800882c:	2030      	movs	r0, #48	@ 0x30
 800882e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008832:	4422      	add	r2, r4
 8008834:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008838:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800883c:	3302      	adds	r3, #2
 800883e:	e7c7      	b.n	80087d0 <_printf_common+0x58>
 8008840:	2301      	movs	r3, #1
 8008842:	4622      	mov	r2, r4
 8008844:	4641      	mov	r1, r8
 8008846:	4638      	mov	r0, r7
 8008848:	47c8      	blx	r9
 800884a:	3001      	adds	r0, #1
 800884c:	d0e6      	beq.n	800881c <_printf_common+0xa4>
 800884e:	3601      	adds	r6, #1
 8008850:	e7d9      	b.n	8008806 <_printf_common+0x8e>
	...

08008854 <_printf_i>:
 8008854:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008858:	7e0f      	ldrb	r7, [r1, #24]
 800885a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800885c:	2f78      	cmp	r7, #120	@ 0x78
 800885e:	4691      	mov	r9, r2
 8008860:	4680      	mov	r8, r0
 8008862:	460c      	mov	r4, r1
 8008864:	469a      	mov	sl, r3
 8008866:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800886a:	d807      	bhi.n	800887c <_printf_i+0x28>
 800886c:	2f62      	cmp	r7, #98	@ 0x62
 800886e:	d80a      	bhi.n	8008886 <_printf_i+0x32>
 8008870:	2f00      	cmp	r7, #0
 8008872:	f000 80d2 	beq.w	8008a1a <_printf_i+0x1c6>
 8008876:	2f58      	cmp	r7, #88	@ 0x58
 8008878:	f000 80b9 	beq.w	80089ee <_printf_i+0x19a>
 800887c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008880:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008884:	e03a      	b.n	80088fc <_printf_i+0xa8>
 8008886:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800888a:	2b15      	cmp	r3, #21
 800888c:	d8f6      	bhi.n	800887c <_printf_i+0x28>
 800888e:	a101      	add	r1, pc, #4	@ (adr r1, 8008894 <_printf_i+0x40>)
 8008890:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008894:	080088ed 	.word	0x080088ed
 8008898:	08008901 	.word	0x08008901
 800889c:	0800887d 	.word	0x0800887d
 80088a0:	0800887d 	.word	0x0800887d
 80088a4:	0800887d 	.word	0x0800887d
 80088a8:	0800887d 	.word	0x0800887d
 80088ac:	08008901 	.word	0x08008901
 80088b0:	0800887d 	.word	0x0800887d
 80088b4:	0800887d 	.word	0x0800887d
 80088b8:	0800887d 	.word	0x0800887d
 80088bc:	0800887d 	.word	0x0800887d
 80088c0:	08008a01 	.word	0x08008a01
 80088c4:	0800892b 	.word	0x0800892b
 80088c8:	080089bb 	.word	0x080089bb
 80088cc:	0800887d 	.word	0x0800887d
 80088d0:	0800887d 	.word	0x0800887d
 80088d4:	08008a23 	.word	0x08008a23
 80088d8:	0800887d 	.word	0x0800887d
 80088dc:	0800892b 	.word	0x0800892b
 80088e0:	0800887d 	.word	0x0800887d
 80088e4:	0800887d 	.word	0x0800887d
 80088e8:	080089c3 	.word	0x080089c3
 80088ec:	6833      	ldr	r3, [r6, #0]
 80088ee:	1d1a      	adds	r2, r3, #4
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	6032      	str	r2, [r6, #0]
 80088f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80088f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80088fc:	2301      	movs	r3, #1
 80088fe:	e09d      	b.n	8008a3c <_printf_i+0x1e8>
 8008900:	6833      	ldr	r3, [r6, #0]
 8008902:	6820      	ldr	r0, [r4, #0]
 8008904:	1d19      	adds	r1, r3, #4
 8008906:	6031      	str	r1, [r6, #0]
 8008908:	0606      	lsls	r6, r0, #24
 800890a:	d501      	bpl.n	8008910 <_printf_i+0xbc>
 800890c:	681d      	ldr	r5, [r3, #0]
 800890e:	e003      	b.n	8008918 <_printf_i+0xc4>
 8008910:	0645      	lsls	r5, r0, #25
 8008912:	d5fb      	bpl.n	800890c <_printf_i+0xb8>
 8008914:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008918:	2d00      	cmp	r5, #0
 800891a:	da03      	bge.n	8008924 <_printf_i+0xd0>
 800891c:	232d      	movs	r3, #45	@ 0x2d
 800891e:	426d      	negs	r5, r5
 8008920:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008924:	4859      	ldr	r0, [pc, #356]	@ (8008a8c <_printf_i+0x238>)
 8008926:	230a      	movs	r3, #10
 8008928:	e011      	b.n	800894e <_printf_i+0xfa>
 800892a:	6821      	ldr	r1, [r4, #0]
 800892c:	6833      	ldr	r3, [r6, #0]
 800892e:	0608      	lsls	r0, r1, #24
 8008930:	f853 5b04 	ldr.w	r5, [r3], #4
 8008934:	d402      	bmi.n	800893c <_printf_i+0xe8>
 8008936:	0649      	lsls	r1, r1, #25
 8008938:	bf48      	it	mi
 800893a:	b2ad      	uxthmi	r5, r5
 800893c:	2f6f      	cmp	r7, #111	@ 0x6f
 800893e:	4853      	ldr	r0, [pc, #332]	@ (8008a8c <_printf_i+0x238>)
 8008940:	6033      	str	r3, [r6, #0]
 8008942:	bf14      	ite	ne
 8008944:	230a      	movne	r3, #10
 8008946:	2308      	moveq	r3, #8
 8008948:	2100      	movs	r1, #0
 800894a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800894e:	6866      	ldr	r6, [r4, #4]
 8008950:	60a6      	str	r6, [r4, #8]
 8008952:	2e00      	cmp	r6, #0
 8008954:	bfa2      	ittt	ge
 8008956:	6821      	ldrge	r1, [r4, #0]
 8008958:	f021 0104 	bicge.w	r1, r1, #4
 800895c:	6021      	strge	r1, [r4, #0]
 800895e:	b90d      	cbnz	r5, 8008964 <_printf_i+0x110>
 8008960:	2e00      	cmp	r6, #0
 8008962:	d04b      	beq.n	80089fc <_printf_i+0x1a8>
 8008964:	4616      	mov	r6, r2
 8008966:	fbb5 f1f3 	udiv	r1, r5, r3
 800896a:	fb03 5711 	mls	r7, r3, r1, r5
 800896e:	5dc7      	ldrb	r7, [r0, r7]
 8008970:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008974:	462f      	mov	r7, r5
 8008976:	42bb      	cmp	r3, r7
 8008978:	460d      	mov	r5, r1
 800897a:	d9f4      	bls.n	8008966 <_printf_i+0x112>
 800897c:	2b08      	cmp	r3, #8
 800897e:	d10b      	bne.n	8008998 <_printf_i+0x144>
 8008980:	6823      	ldr	r3, [r4, #0]
 8008982:	07df      	lsls	r7, r3, #31
 8008984:	d508      	bpl.n	8008998 <_printf_i+0x144>
 8008986:	6923      	ldr	r3, [r4, #16]
 8008988:	6861      	ldr	r1, [r4, #4]
 800898a:	4299      	cmp	r1, r3
 800898c:	bfde      	ittt	le
 800898e:	2330      	movle	r3, #48	@ 0x30
 8008990:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008994:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008998:	1b92      	subs	r2, r2, r6
 800899a:	6122      	str	r2, [r4, #16]
 800899c:	f8cd a000 	str.w	sl, [sp]
 80089a0:	464b      	mov	r3, r9
 80089a2:	aa03      	add	r2, sp, #12
 80089a4:	4621      	mov	r1, r4
 80089a6:	4640      	mov	r0, r8
 80089a8:	f7ff fee6 	bl	8008778 <_printf_common>
 80089ac:	3001      	adds	r0, #1
 80089ae:	d14a      	bne.n	8008a46 <_printf_i+0x1f2>
 80089b0:	f04f 30ff 	mov.w	r0, #4294967295
 80089b4:	b004      	add	sp, #16
 80089b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089ba:	6823      	ldr	r3, [r4, #0]
 80089bc:	f043 0320 	orr.w	r3, r3, #32
 80089c0:	6023      	str	r3, [r4, #0]
 80089c2:	4833      	ldr	r0, [pc, #204]	@ (8008a90 <_printf_i+0x23c>)
 80089c4:	2778      	movs	r7, #120	@ 0x78
 80089c6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80089ca:	6823      	ldr	r3, [r4, #0]
 80089cc:	6831      	ldr	r1, [r6, #0]
 80089ce:	061f      	lsls	r7, r3, #24
 80089d0:	f851 5b04 	ldr.w	r5, [r1], #4
 80089d4:	d402      	bmi.n	80089dc <_printf_i+0x188>
 80089d6:	065f      	lsls	r7, r3, #25
 80089d8:	bf48      	it	mi
 80089da:	b2ad      	uxthmi	r5, r5
 80089dc:	6031      	str	r1, [r6, #0]
 80089de:	07d9      	lsls	r1, r3, #31
 80089e0:	bf44      	itt	mi
 80089e2:	f043 0320 	orrmi.w	r3, r3, #32
 80089e6:	6023      	strmi	r3, [r4, #0]
 80089e8:	b11d      	cbz	r5, 80089f2 <_printf_i+0x19e>
 80089ea:	2310      	movs	r3, #16
 80089ec:	e7ac      	b.n	8008948 <_printf_i+0xf4>
 80089ee:	4827      	ldr	r0, [pc, #156]	@ (8008a8c <_printf_i+0x238>)
 80089f0:	e7e9      	b.n	80089c6 <_printf_i+0x172>
 80089f2:	6823      	ldr	r3, [r4, #0]
 80089f4:	f023 0320 	bic.w	r3, r3, #32
 80089f8:	6023      	str	r3, [r4, #0]
 80089fa:	e7f6      	b.n	80089ea <_printf_i+0x196>
 80089fc:	4616      	mov	r6, r2
 80089fe:	e7bd      	b.n	800897c <_printf_i+0x128>
 8008a00:	6833      	ldr	r3, [r6, #0]
 8008a02:	6825      	ldr	r5, [r4, #0]
 8008a04:	6961      	ldr	r1, [r4, #20]
 8008a06:	1d18      	adds	r0, r3, #4
 8008a08:	6030      	str	r0, [r6, #0]
 8008a0a:	062e      	lsls	r6, r5, #24
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	d501      	bpl.n	8008a14 <_printf_i+0x1c0>
 8008a10:	6019      	str	r1, [r3, #0]
 8008a12:	e002      	b.n	8008a1a <_printf_i+0x1c6>
 8008a14:	0668      	lsls	r0, r5, #25
 8008a16:	d5fb      	bpl.n	8008a10 <_printf_i+0x1bc>
 8008a18:	8019      	strh	r1, [r3, #0]
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	6123      	str	r3, [r4, #16]
 8008a1e:	4616      	mov	r6, r2
 8008a20:	e7bc      	b.n	800899c <_printf_i+0x148>
 8008a22:	6833      	ldr	r3, [r6, #0]
 8008a24:	1d1a      	adds	r2, r3, #4
 8008a26:	6032      	str	r2, [r6, #0]
 8008a28:	681e      	ldr	r6, [r3, #0]
 8008a2a:	6862      	ldr	r2, [r4, #4]
 8008a2c:	2100      	movs	r1, #0
 8008a2e:	4630      	mov	r0, r6
 8008a30:	f7f7 fbd6 	bl	80001e0 <memchr>
 8008a34:	b108      	cbz	r0, 8008a3a <_printf_i+0x1e6>
 8008a36:	1b80      	subs	r0, r0, r6
 8008a38:	6060      	str	r0, [r4, #4]
 8008a3a:	6863      	ldr	r3, [r4, #4]
 8008a3c:	6123      	str	r3, [r4, #16]
 8008a3e:	2300      	movs	r3, #0
 8008a40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a44:	e7aa      	b.n	800899c <_printf_i+0x148>
 8008a46:	6923      	ldr	r3, [r4, #16]
 8008a48:	4632      	mov	r2, r6
 8008a4a:	4649      	mov	r1, r9
 8008a4c:	4640      	mov	r0, r8
 8008a4e:	47d0      	blx	sl
 8008a50:	3001      	adds	r0, #1
 8008a52:	d0ad      	beq.n	80089b0 <_printf_i+0x15c>
 8008a54:	6823      	ldr	r3, [r4, #0]
 8008a56:	079b      	lsls	r3, r3, #30
 8008a58:	d413      	bmi.n	8008a82 <_printf_i+0x22e>
 8008a5a:	68e0      	ldr	r0, [r4, #12]
 8008a5c:	9b03      	ldr	r3, [sp, #12]
 8008a5e:	4298      	cmp	r0, r3
 8008a60:	bfb8      	it	lt
 8008a62:	4618      	movlt	r0, r3
 8008a64:	e7a6      	b.n	80089b4 <_printf_i+0x160>
 8008a66:	2301      	movs	r3, #1
 8008a68:	4632      	mov	r2, r6
 8008a6a:	4649      	mov	r1, r9
 8008a6c:	4640      	mov	r0, r8
 8008a6e:	47d0      	blx	sl
 8008a70:	3001      	adds	r0, #1
 8008a72:	d09d      	beq.n	80089b0 <_printf_i+0x15c>
 8008a74:	3501      	adds	r5, #1
 8008a76:	68e3      	ldr	r3, [r4, #12]
 8008a78:	9903      	ldr	r1, [sp, #12]
 8008a7a:	1a5b      	subs	r3, r3, r1
 8008a7c:	42ab      	cmp	r3, r5
 8008a7e:	dcf2      	bgt.n	8008a66 <_printf_i+0x212>
 8008a80:	e7eb      	b.n	8008a5a <_printf_i+0x206>
 8008a82:	2500      	movs	r5, #0
 8008a84:	f104 0619 	add.w	r6, r4, #25
 8008a88:	e7f5      	b.n	8008a76 <_printf_i+0x222>
 8008a8a:	bf00      	nop
 8008a8c:	0800ce22 	.word	0x0800ce22
 8008a90:	0800ce33 	.word	0x0800ce33

08008a94 <std>:
 8008a94:	2300      	movs	r3, #0
 8008a96:	b510      	push	{r4, lr}
 8008a98:	4604      	mov	r4, r0
 8008a9a:	e9c0 3300 	strd	r3, r3, [r0]
 8008a9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008aa2:	6083      	str	r3, [r0, #8]
 8008aa4:	8181      	strh	r1, [r0, #12]
 8008aa6:	6643      	str	r3, [r0, #100]	@ 0x64
 8008aa8:	81c2      	strh	r2, [r0, #14]
 8008aaa:	6183      	str	r3, [r0, #24]
 8008aac:	4619      	mov	r1, r3
 8008aae:	2208      	movs	r2, #8
 8008ab0:	305c      	adds	r0, #92	@ 0x5c
 8008ab2:	f000 fa79 	bl	8008fa8 <memset>
 8008ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8008aec <std+0x58>)
 8008ab8:	6263      	str	r3, [r4, #36]	@ 0x24
 8008aba:	4b0d      	ldr	r3, [pc, #52]	@ (8008af0 <std+0x5c>)
 8008abc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008abe:	4b0d      	ldr	r3, [pc, #52]	@ (8008af4 <std+0x60>)
 8008ac0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8008af8 <std+0x64>)
 8008ac4:	6323      	str	r3, [r4, #48]	@ 0x30
 8008ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8008afc <std+0x68>)
 8008ac8:	6224      	str	r4, [r4, #32]
 8008aca:	429c      	cmp	r4, r3
 8008acc:	d006      	beq.n	8008adc <std+0x48>
 8008ace:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008ad2:	4294      	cmp	r4, r2
 8008ad4:	d002      	beq.n	8008adc <std+0x48>
 8008ad6:	33d0      	adds	r3, #208	@ 0xd0
 8008ad8:	429c      	cmp	r4, r3
 8008ada:	d105      	bne.n	8008ae8 <std+0x54>
 8008adc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008ae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ae4:	f000 bb00 	b.w	80090e8 <__retarget_lock_init_recursive>
 8008ae8:	bd10      	pop	{r4, pc}
 8008aea:	bf00      	nop
 8008aec:	08008df5 	.word	0x08008df5
 8008af0:	08008e1b 	.word	0x08008e1b
 8008af4:	08008e53 	.word	0x08008e53
 8008af8:	08008e77 	.word	0x08008e77
 8008afc:	20000cbc 	.word	0x20000cbc

08008b00 <stdio_exit_handler>:
 8008b00:	4a02      	ldr	r2, [pc, #8]	@ (8008b0c <stdio_exit_handler+0xc>)
 8008b02:	4903      	ldr	r1, [pc, #12]	@ (8008b10 <stdio_exit_handler+0x10>)
 8008b04:	4803      	ldr	r0, [pc, #12]	@ (8008b14 <stdio_exit_handler+0x14>)
 8008b06:	f000 b869 	b.w	8008bdc <_fwalk_sglue>
 8008b0a:	bf00      	nop
 8008b0c:	20000068 	.word	0x20000068
 8008b10:	0800b31d 	.word	0x0800b31d
 8008b14:	20000078 	.word	0x20000078

08008b18 <cleanup_stdio>:
 8008b18:	6841      	ldr	r1, [r0, #4]
 8008b1a:	4b0c      	ldr	r3, [pc, #48]	@ (8008b4c <cleanup_stdio+0x34>)
 8008b1c:	4299      	cmp	r1, r3
 8008b1e:	b510      	push	{r4, lr}
 8008b20:	4604      	mov	r4, r0
 8008b22:	d001      	beq.n	8008b28 <cleanup_stdio+0x10>
 8008b24:	f002 fbfa 	bl	800b31c <_fflush_r>
 8008b28:	68a1      	ldr	r1, [r4, #8]
 8008b2a:	4b09      	ldr	r3, [pc, #36]	@ (8008b50 <cleanup_stdio+0x38>)
 8008b2c:	4299      	cmp	r1, r3
 8008b2e:	d002      	beq.n	8008b36 <cleanup_stdio+0x1e>
 8008b30:	4620      	mov	r0, r4
 8008b32:	f002 fbf3 	bl	800b31c <_fflush_r>
 8008b36:	68e1      	ldr	r1, [r4, #12]
 8008b38:	4b06      	ldr	r3, [pc, #24]	@ (8008b54 <cleanup_stdio+0x3c>)
 8008b3a:	4299      	cmp	r1, r3
 8008b3c:	d004      	beq.n	8008b48 <cleanup_stdio+0x30>
 8008b3e:	4620      	mov	r0, r4
 8008b40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b44:	f002 bbea 	b.w	800b31c <_fflush_r>
 8008b48:	bd10      	pop	{r4, pc}
 8008b4a:	bf00      	nop
 8008b4c:	20000cbc 	.word	0x20000cbc
 8008b50:	20000d24 	.word	0x20000d24
 8008b54:	20000d8c 	.word	0x20000d8c

08008b58 <global_stdio_init.part.0>:
 8008b58:	b510      	push	{r4, lr}
 8008b5a:	4b0b      	ldr	r3, [pc, #44]	@ (8008b88 <global_stdio_init.part.0+0x30>)
 8008b5c:	4c0b      	ldr	r4, [pc, #44]	@ (8008b8c <global_stdio_init.part.0+0x34>)
 8008b5e:	4a0c      	ldr	r2, [pc, #48]	@ (8008b90 <global_stdio_init.part.0+0x38>)
 8008b60:	601a      	str	r2, [r3, #0]
 8008b62:	4620      	mov	r0, r4
 8008b64:	2200      	movs	r2, #0
 8008b66:	2104      	movs	r1, #4
 8008b68:	f7ff ff94 	bl	8008a94 <std>
 8008b6c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008b70:	2201      	movs	r2, #1
 8008b72:	2109      	movs	r1, #9
 8008b74:	f7ff ff8e 	bl	8008a94 <std>
 8008b78:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008b7c:	2202      	movs	r2, #2
 8008b7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b82:	2112      	movs	r1, #18
 8008b84:	f7ff bf86 	b.w	8008a94 <std>
 8008b88:	20000df4 	.word	0x20000df4
 8008b8c:	20000cbc 	.word	0x20000cbc
 8008b90:	08008b01 	.word	0x08008b01

08008b94 <__sfp_lock_acquire>:
 8008b94:	4801      	ldr	r0, [pc, #4]	@ (8008b9c <__sfp_lock_acquire+0x8>)
 8008b96:	f000 baa8 	b.w	80090ea <__retarget_lock_acquire_recursive>
 8008b9a:	bf00      	nop
 8008b9c:	20000dfd 	.word	0x20000dfd

08008ba0 <__sfp_lock_release>:
 8008ba0:	4801      	ldr	r0, [pc, #4]	@ (8008ba8 <__sfp_lock_release+0x8>)
 8008ba2:	f000 baa3 	b.w	80090ec <__retarget_lock_release_recursive>
 8008ba6:	bf00      	nop
 8008ba8:	20000dfd 	.word	0x20000dfd

08008bac <__sinit>:
 8008bac:	b510      	push	{r4, lr}
 8008bae:	4604      	mov	r4, r0
 8008bb0:	f7ff fff0 	bl	8008b94 <__sfp_lock_acquire>
 8008bb4:	6a23      	ldr	r3, [r4, #32]
 8008bb6:	b11b      	cbz	r3, 8008bc0 <__sinit+0x14>
 8008bb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bbc:	f7ff bff0 	b.w	8008ba0 <__sfp_lock_release>
 8008bc0:	4b04      	ldr	r3, [pc, #16]	@ (8008bd4 <__sinit+0x28>)
 8008bc2:	6223      	str	r3, [r4, #32]
 8008bc4:	4b04      	ldr	r3, [pc, #16]	@ (8008bd8 <__sinit+0x2c>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d1f5      	bne.n	8008bb8 <__sinit+0xc>
 8008bcc:	f7ff ffc4 	bl	8008b58 <global_stdio_init.part.0>
 8008bd0:	e7f2      	b.n	8008bb8 <__sinit+0xc>
 8008bd2:	bf00      	nop
 8008bd4:	08008b19 	.word	0x08008b19
 8008bd8:	20000df4 	.word	0x20000df4

08008bdc <_fwalk_sglue>:
 8008bdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008be0:	4607      	mov	r7, r0
 8008be2:	4688      	mov	r8, r1
 8008be4:	4614      	mov	r4, r2
 8008be6:	2600      	movs	r6, #0
 8008be8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008bec:	f1b9 0901 	subs.w	r9, r9, #1
 8008bf0:	d505      	bpl.n	8008bfe <_fwalk_sglue+0x22>
 8008bf2:	6824      	ldr	r4, [r4, #0]
 8008bf4:	2c00      	cmp	r4, #0
 8008bf6:	d1f7      	bne.n	8008be8 <_fwalk_sglue+0xc>
 8008bf8:	4630      	mov	r0, r6
 8008bfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bfe:	89ab      	ldrh	r3, [r5, #12]
 8008c00:	2b01      	cmp	r3, #1
 8008c02:	d907      	bls.n	8008c14 <_fwalk_sglue+0x38>
 8008c04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c08:	3301      	adds	r3, #1
 8008c0a:	d003      	beq.n	8008c14 <_fwalk_sglue+0x38>
 8008c0c:	4629      	mov	r1, r5
 8008c0e:	4638      	mov	r0, r7
 8008c10:	47c0      	blx	r8
 8008c12:	4306      	orrs	r6, r0
 8008c14:	3568      	adds	r5, #104	@ 0x68
 8008c16:	e7e9      	b.n	8008bec <_fwalk_sglue+0x10>

08008c18 <iprintf>:
 8008c18:	b40f      	push	{r0, r1, r2, r3}
 8008c1a:	b507      	push	{r0, r1, r2, lr}
 8008c1c:	4906      	ldr	r1, [pc, #24]	@ (8008c38 <iprintf+0x20>)
 8008c1e:	ab04      	add	r3, sp, #16
 8008c20:	6808      	ldr	r0, [r1, #0]
 8008c22:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c26:	6881      	ldr	r1, [r0, #8]
 8008c28:	9301      	str	r3, [sp, #4]
 8008c2a:	f002 f88d 	bl	800ad48 <_vfiprintf_r>
 8008c2e:	b003      	add	sp, #12
 8008c30:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c34:	b004      	add	sp, #16
 8008c36:	4770      	bx	lr
 8008c38:	20000074 	.word	0x20000074

08008c3c <_puts_r>:
 8008c3c:	6a03      	ldr	r3, [r0, #32]
 8008c3e:	b570      	push	{r4, r5, r6, lr}
 8008c40:	6884      	ldr	r4, [r0, #8]
 8008c42:	4605      	mov	r5, r0
 8008c44:	460e      	mov	r6, r1
 8008c46:	b90b      	cbnz	r3, 8008c4c <_puts_r+0x10>
 8008c48:	f7ff ffb0 	bl	8008bac <__sinit>
 8008c4c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008c4e:	07db      	lsls	r3, r3, #31
 8008c50:	d405      	bmi.n	8008c5e <_puts_r+0x22>
 8008c52:	89a3      	ldrh	r3, [r4, #12]
 8008c54:	0598      	lsls	r0, r3, #22
 8008c56:	d402      	bmi.n	8008c5e <_puts_r+0x22>
 8008c58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008c5a:	f000 fa46 	bl	80090ea <__retarget_lock_acquire_recursive>
 8008c5e:	89a3      	ldrh	r3, [r4, #12]
 8008c60:	0719      	lsls	r1, r3, #28
 8008c62:	d502      	bpl.n	8008c6a <_puts_r+0x2e>
 8008c64:	6923      	ldr	r3, [r4, #16]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d135      	bne.n	8008cd6 <_puts_r+0x9a>
 8008c6a:	4621      	mov	r1, r4
 8008c6c:	4628      	mov	r0, r5
 8008c6e:	f000 f945 	bl	8008efc <__swsetup_r>
 8008c72:	b380      	cbz	r0, 8008cd6 <_puts_r+0x9a>
 8008c74:	f04f 35ff 	mov.w	r5, #4294967295
 8008c78:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008c7a:	07da      	lsls	r2, r3, #31
 8008c7c:	d405      	bmi.n	8008c8a <_puts_r+0x4e>
 8008c7e:	89a3      	ldrh	r3, [r4, #12]
 8008c80:	059b      	lsls	r3, r3, #22
 8008c82:	d402      	bmi.n	8008c8a <_puts_r+0x4e>
 8008c84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008c86:	f000 fa31 	bl	80090ec <__retarget_lock_release_recursive>
 8008c8a:	4628      	mov	r0, r5
 8008c8c:	bd70      	pop	{r4, r5, r6, pc}
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	da04      	bge.n	8008c9c <_puts_r+0x60>
 8008c92:	69a2      	ldr	r2, [r4, #24]
 8008c94:	429a      	cmp	r2, r3
 8008c96:	dc17      	bgt.n	8008cc8 <_puts_r+0x8c>
 8008c98:	290a      	cmp	r1, #10
 8008c9a:	d015      	beq.n	8008cc8 <_puts_r+0x8c>
 8008c9c:	6823      	ldr	r3, [r4, #0]
 8008c9e:	1c5a      	adds	r2, r3, #1
 8008ca0:	6022      	str	r2, [r4, #0]
 8008ca2:	7019      	strb	r1, [r3, #0]
 8008ca4:	68a3      	ldr	r3, [r4, #8]
 8008ca6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008caa:	3b01      	subs	r3, #1
 8008cac:	60a3      	str	r3, [r4, #8]
 8008cae:	2900      	cmp	r1, #0
 8008cb0:	d1ed      	bne.n	8008c8e <_puts_r+0x52>
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	da11      	bge.n	8008cda <_puts_r+0x9e>
 8008cb6:	4622      	mov	r2, r4
 8008cb8:	210a      	movs	r1, #10
 8008cba:	4628      	mov	r0, r5
 8008cbc:	f000 f8df 	bl	8008e7e <__swbuf_r>
 8008cc0:	3001      	adds	r0, #1
 8008cc2:	d0d7      	beq.n	8008c74 <_puts_r+0x38>
 8008cc4:	250a      	movs	r5, #10
 8008cc6:	e7d7      	b.n	8008c78 <_puts_r+0x3c>
 8008cc8:	4622      	mov	r2, r4
 8008cca:	4628      	mov	r0, r5
 8008ccc:	f000 f8d7 	bl	8008e7e <__swbuf_r>
 8008cd0:	3001      	adds	r0, #1
 8008cd2:	d1e7      	bne.n	8008ca4 <_puts_r+0x68>
 8008cd4:	e7ce      	b.n	8008c74 <_puts_r+0x38>
 8008cd6:	3e01      	subs	r6, #1
 8008cd8:	e7e4      	b.n	8008ca4 <_puts_r+0x68>
 8008cda:	6823      	ldr	r3, [r4, #0]
 8008cdc:	1c5a      	adds	r2, r3, #1
 8008cde:	6022      	str	r2, [r4, #0]
 8008ce0:	220a      	movs	r2, #10
 8008ce2:	701a      	strb	r2, [r3, #0]
 8008ce4:	e7ee      	b.n	8008cc4 <_puts_r+0x88>
	...

08008ce8 <puts>:
 8008ce8:	4b02      	ldr	r3, [pc, #8]	@ (8008cf4 <puts+0xc>)
 8008cea:	4601      	mov	r1, r0
 8008cec:	6818      	ldr	r0, [r3, #0]
 8008cee:	f7ff bfa5 	b.w	8008c3c <_puts_r>
 8008cf2:	bf00      	nop
 8008cf4:	20000074 	.word	0x20000074

08008cf8 <sniprintf>:
 8008cf8:	b40c      	push	{r2, r3}
 8008cfa:	b530      	push	{r4, r5, lr}
 8008cfc:	4b17      	ldr	r3, [pc, #92]	@ (8008d5c <sniprintf+0x64>)
 8008cfe:	1e0c      	subs	r4, r1, #0
 8008d00:	681d      	ldr	r5, [r3, #0]
 8008d02:	b09d      	sub	sp, #116	@ 0x74
 8008d04:	da08      	bge.n	8008d18 <sniprintf+0x20>
 8008d06:	238b      	movs	r3, #139	@ 0x8b
 8008d08:	602b      	str	r3, [r5, #0]
 8008d0a:	f04f 30ff 	mov.w	r0, #4294967295
 8008d0e:	b01d      	add	sp, #116	@ 0x74
 8008d10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008d14:	b002      	add	sp, #8
 8008d16:	4770      	bx	lr
 8008d18:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008d1c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008d20:	bf14      	ite	ne
 8008d22:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008d26:	4623      	moveq	r3, r4
 8008d28:	9304      	str	r3, [sp, #16]
 8008d2a:	9307      	str	r3, [sp, #28]
 8008d2c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008d30:	9002      	str	r0, [sp, #8]
 8008d32:	9006      	str	r0, [sp, #24]
 8008d34:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008d38:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008d3a:	ab21      	add	r3, sp, #132	@ 0x84
 8008d3c:	a902      	add	r1, sp, #8
 8008d3e:	4628      	mov	r0, r5
 8008d40:	9301      	str	r3, [sp, #4]
 8008d42:	f001 fd0f 	bl	800a764 <_svfiprintf_r>
 8008d46:	1c43      	adds	r3, r0, #1
 8008d48:	bfbc      	itt	lt
 8008d4a:	238b      	movlt	r3, #139	@ 0x8b
 8008d4c:	602b      	strlt	r3, [r5, #0]
 8008d4e:	2c00      	cmp	r4, #0
 8008d50:	d0dd      	beq.n	8008d0e <sniprintf+0x16>
 8008d52:	9b02      	ldr	r3, [sp, #8]
 8008d54:	2200      	movs	r2, #0
 8008d56:	701a      	strb	r2, [r3, #0]
 8008d58:	e7d9      	b.n	8008d0e <sniprintf+0x16>
 8008d5a:	bf00      	nop
 8008d5c:	20000074 	.word	0x20000074

08008d60 <siprintf>:
 8008d60:	b40e      	push	{r1, r2, r3}
 8008d62:	b500      	push	{lr}
 8008d64:	b09c      	sub	sp, #112	@ 0x70
 8008d66:	ab1d      	add	r3, sp, #116	@ 0x74
 8008d68:	9002      	str	r0, [sp, #8]
 8008d6a:	9006      	str	r0, [sp, #24]
 8008d6c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008d70:	4809      	ldr	r0, [pc, #36]	@ (8008d98 <siprintf+0x38>)
 8008d72:	9107      	str	r1, [sp, #28]
 8008d74:	9104      	str	r1, [sp, #16]
 8008d76:	4909      	ldr	r1, [pc, #36]	@ (8008d9c <siprintf+0x3c>)
 8008d78:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d7c:	9105      	str	r1, [sp, #20]
 8008d7e:	6800      	ldr	r0, [r0, #0]
 8008d80:	9301      	str	r3, [sp, #4]
 8008d82:	a902      	add	r1, sp, #8
 8008d84:	f001 fcee 	bl	800a764 <_svfiprintf_r>
 8008d88:	9b02      	ldr	r3, [sp, #8]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	701a      	strb	r2, [r3, #0]
 8008d8e:	b01c      	add	sp, #112	@ 0x70
 8008d90:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d94:	b003      	add	sp, #12
 8008d96:	4770      	bx	lr
 8008d98:	20000074 	.word	0x20000074
 8008d9c:	ffff0208 	.word	0xffff0208

08008da0 <siscanf>:
 8008da0:	b40e      	push	{r1, r2, r3}
 8008da2:	b530      	push	{r4, r5, lr}
 8008da4:	b09c      	sub	sp, #112	@ 0x70
 8008da6:	ac1f      	add	r4, sp, #124	@ 0x7c
 8008da8:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8008dac:	f854 5b04 	ldr.w	r5, [r4], #4
 8008db0:	f8ad 2014 	strh.w	r2, [sp, #20]
 8008db4:	9002      	str	r0, [sp, #8]
 8008db6:	9006      	str	r0, [sp, #24]
 8008db8:	f7f7 fa62 	bl	8000280 <strlen>
 8008dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8008dec <siscanf+0x4c>)
 8008dbe:	9003      	str	r0, [sp, #12]
 8008dc0:	9007      	str	r0, [sp, #28]
 8008dc2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008dc4:	480a      	ldr	r0, [pc, #40]	@ (8008df0 <siscanf+0x50>)
 8008dc6:	9401      	str	r4, [sp, #4]
 8008dc8:	2300      	movs	r3, #0
 8008dca:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008dcc:	9314      	str	r3, [sp, #80]	@ 0x50
 8008dce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008dd2:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008dd6:	462a      	mov	r2, r5
 8008dd8:	4623      	mov	r3, r4
 8008dda:	a902      	add	r1, sp, #8
 8008ddc:	6800      	ldr	r0, [r0, #0]
 8008dde:	f001 fe15 	bl	800aa0c <__ssvfiscanf_r>
 8008de2:	b01c      	add	sp, #112	@ 0x70
 8008de4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008de8:	b003      	add	sp, #12
 8008dea:	4770      	bx	lr
 8008dec:	08008e17 	.word	0x08008e17
 8008df0:	20000074 	.word	0x20000074

08008df4 <__sread>:
 8008df4:	b510      	push	{r4, lr}
 8008df6:	460c      	mov	r4, r1
 8008df8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dfc:	f000 f926 	bl	800904c <_read_r>
 8008e00:	2800      	cmp	r0, #0
 8008e02:	bfab      	itete	ge
 8008e04:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008e06:	89a3      	ldrhlt	r3, [r4, #12]
 8008e08:	181b      	addge	r3, r3, r0
 8008e0a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008e0e:	bfac      	ite	ge
 8008e10:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008e12:	81a3      	strhlt	r3, [r4, #12]
 8008e14:	bd10      	pop	{r4, pc}

08008e16 <__seofread>:
 8008e16:	2000      	movs	r0, #0
 8008e18:	4770      	bx	lr

08008e1a <__swrite>:
 8008e1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e1e:	461f      	mov	r7, r3
 8008e20:	898b      	ldrh	r3, [r1, #12]
 8008e22:	05db      	lsls	r3, r3, #23
 8008e24:	4605      	mov	r5, r0
 8008e26:	460c      	mov	r4, r1
 8008e28:	4616      	mov	r6, r2
 8008e2a:	d505      	bpl.n	8008e38 <__swrite+0x1e>
 8008e2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e30:	2302      	movs	r3, #2
 8008e32:	2200      	movs	r2, #0
 8008e34:	f000 f8f8 	bl	8009028 <_lseek_r>
 8008e38:	89a3      	ldrh	r3, [r4, #12]
 8008e3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e3e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008e42:	81a3      	strh	r3, [r4, #12]
 8008e44:	4632      	mov	r2, r6
 8008e46:	463b      	mov	r3, r7
 8008e48:	4628      	mov	r0, r5
 8008e4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e4e:	f000 b90f 	b.w	8009070 <_write_r>

08008e52 <__sseek>:
 8008e52:	b510      	push	{r4, lr}
 8008e54:	460c      	mov	r4, r1
 8008e56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e5a:	f000 f8e5 	bl	8009028 <_lseek_r>
 8008e5e:	1c43      	adds	r3, r0, #1
 8008e60:	89a3      	ldrh	r3, [r4, #12]
 8008e62:	bf15      	itete	ne
 8008e64:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008e66:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008e6a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008e6e:	81a3      	strheq	r3, [r4, #12]
 8008e70:	bf18      	it	ne
 8008e72:	81a3      	strhne	r3, [r4, #12]
 8008e74:	bd10      	pop	{r4, pc}

08008e76 <__sclose>:
 8008e76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e7a:	f000 b8c5 	b.w	8009008 <_close_r>

08008e7e <__swbuf_r>:
 8008e7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e80:	460e      	mov	r6, r1
 8008e82:	4614      	mov	r4, r2
 8008e84:	4605      	mov	r5, r0
 8008e86:	b118      	cbz	r0, 8008e90 <__swbuf_r+0x12>
 8008e88:	6a03      	ldr	r3, [r0, #32]
 8008e8a:	b90b      	cbnz	r3, 8008e90 <__swbuf_r+0x12>
 8008e8c:	f7ff fe8e 	bl	8008bac <__sinit>
 8008e90:	69a3      	ldr	r3, [r4, #24]
 8008e92:	60a3      	str	r3, [r4, #8]
 8008e94:	89a3      	ldrh	r3, [r4, #12]
 8008e96:	071a      	lsls	r2, r3, #28
 8008e98:	d501      	bpl.n	8008e9e <__swbuf_r+0x20>
 8008e9a:	6923      	ldr	r3, [r4, #16]
 8008e9c:	b943      	cbnz	r3, 8008eb0 <__swbuf_r+0x32>
 8008e9e:	4621      	mov	r1, r4
 8008ea0:	4628      	mov	r0, r5
 8008ea2:	f000 f82b 	bl	8008efc <__swsetup_r>
 8008ea6:	b118      	cbz	r0, 8008eb0 <__swbuf_r+0x32>
 8008ea8:	f04f 37ff 	mov.w	r7, #4294967295
 8008eac:	4638      	mov	r0, r7
 8008eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008eb0:	6823      	ldr	r3, [r4, #0]
 8008eb2:	6922      	ldr	r2, [r4, #16]
 8008eb4:	1a98      	subs	r0, r3, r2
 8008eb6:	6963      	ldr	r3, [r4, #20]
 8008eb8:	b2f6      	uxtb	r6, r6
 8008eba:	4283      	cmp	r3, r0
 8008ebc:	4637      	mov	r7, r6
 8008ebe:	dc05      	bgt.n	8008ecc <__swbuf_r+0x4e>
 8008ec0:	4621      	mov	r1, r4
 8008ec2:	4628      	mov	r0, r5
 8008ec4:	f002 fa2a 	bl	800b31c <_fflush_r>
 8008ec8:	2800      	cmp	r0, #0
 8008eca:	d1ed      	bne.n	8008ea8 <__swbuf_r+0x2a>
 8008ecc:	68a3      	ldr	r3, [r4, #8]
 8008ece:	3b01      	subs	r3, #1
 8008ed0:	60a3      	str	r3, [r4, #8]
 8008ed2:	6823      	ldr	r3, [r4, #0]
 8008ed4:	1c5a      	adds	r2, r3, #1
 8008ed6:	6022      	str	r2, [r4, #0]
 8008ed8:	701e      	strb	r6, [r3, #0]
 8008eda:	6962      	ldr	r2, [r4, #20]
 8008edc:	1c43      	adds	r3, r0, #1
 8008ede:	429a      	cmp	r2, r3
 8008ee0:	d004      	beq.n	8008eec <__swbuf_r+0x6e>
 8008ee2:	89a3      	ldrh	r3, [r4, #12]
 8008ee4:	07db      	lsls	r3, r3, #31
 8008ee6:	d5e1      	bpl.n	8008eac <__swbuf_r+0x2e>
 8008ee8:	2e0a      	cmp	r6, #10
 8008eea:	d1df      	bne.n	8008eac <__swbuf_r+0x2e>
 8008eec:	4621      	mov	r1, r4
 8008eee:	4628      	mov	r0, r5
 8008ef0:	f002 fa14 	bl	800b31c <_fflush_r>
 8008ef4:	2800      	cmp	r0, #0
 8008ef6:	d0d9      	beq.n	8008eac <__swbuf_r+0x2e>
 8008ef8:	e7d6      	b.n	8008ea8 <__swbuf_r+0x2a>
	...

08008efc <__swsetup_r>:
 8008efc:	b538      	push	{r3, r4, r5, lr}
 8008efe:	4b29      	ldr	r3, [pc, #164]	@ (8008fa4 <__swsetup_r+0xa8>)
 8008f00:	4605      	mov	r5, r0
 8008f02:	6818      	ldr	r0, [r3, #0]
 8008f04:	460c      	mov	r4, r1
 8008f06:	b118      	cbz	r0, 8008f10 <__swsetup_r+0x14>
 8008f08:	6a03      	ldr	r3, [r0, #32]
 8008f0a:	b90b      	cbnz	r3, 8008f10 <__swsetup_r+0x14>
 8008f0c:	f7ff fe4e 	bl	8008bac <__sinit>
 8008f10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f14:	0719      	lsls	r1, r3, #28
 8008f16:	d422      	bmi.n	8008f5e <__swsetup_r+0x62>
 8008f18:	06da      	lsls	r2, r3, #27
 8008f1a:	d407      	bmi.n	8008f2c <__swsetup_r+0x30>
 8008f1c:	2209      	movs	r2, #9
 8008f1e:	602a      	str	r2, [r5, #0]
 8008f20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f24:	81a3      	strh	r3, [r4, #12]
 8008f26:	f04f 30ff 	mov.w	r0, #4294967295
 8008f2a:	e033      	b.n	8008f94 <__swsetup_r+0x98>
 8008f2c:	0758      	lsls	r0, r3, #29
 8008f2e:	d512      	bpl.n	8008f56 <__swsetup_r+0x5a>
 8008f30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008f32:	b141      	cbz	r1, 8008f46 <__swsetup_r+0x4a>
 8008f34:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008f38:	4299      	cmp	r1, r3
 8008f3a:	d002      	beq.n	8008f42 <__swsetup_r+0x46>
 8008f3c:	4628      	mov	r0, r5
 8008f3e:	f000 ff33 	bl	8009da8 <_free_r>
 8008f42:	2300      	movs	r3, #0
 8008f44:	6363      	str	r3, [r4, #52]	@ 0x34
 8008f46:	89a3      	ldrh	r3, [r4, #12]
 8008f48:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008f4c:	81a3      	strh	r3, [r4, #12]
 8008f4e:	2300      	movs	r3, #0
 8008f50:	6063      	str	r3, [r4, #4]
 8008f52:	6923      	ldr	r3, [r4, #16]
 8008f54:	6023      	str	r3, [r4, #0]
 8008f56:	89a3      	ldrh	r3, [r4, #12]
 8008f58:	f043 0308 	orr.w	r3, r3, #8
 8008f5c:	81a3      	strh	r3, [r4, #12]
 8008f5e:	6923      	ldr	r3, [r4, #16]
 8008f60:	b94b      	cbnz	r3, 8008f76 <__swsetup_r+0x7a>
 8008f62:	89a3      	ldrh	r3, [r4, #12]
 8008f64:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008f68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f6c:	d003      	beq.n	8008f76 <__swsetup_r+0x7a>
 8008f6e:	4621      	mov	r1, r4
 8008f70:	4628      	mov	r0, r5
 8008f72:	f002 fa21 	bl	800b3b8 <__smakebuf_r>
 8008f76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f7a:	f013 0201 	ands.w	r2, r3, #1
 8008f7e:	d00a      	beq.n	8008f96 <__swsetup_r+0x9a>
 8008f80:	2200      	movs	r2, #0
 8008f82:	60a2      	str	r2, [r4, #8]
 8008f84:	6962      	ldr	r2, [r4, #20]
 8008f86:	4252      	negs	r2, r2
 8008f88:	61a2      	str	r2, [r4, #24]
 8008f8a:	6922      	ldr	r2, [r4, #16]
 8008f8c:	b942      	cbnz	r2, 8008fa0 <__swsetup_r+0xa4>
 8008f8e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008f92:	d1c5      	bne.n	8008f20 <__swsetup_r+0x24>
 8008f94:	bd38      	pop	{r3, r4, r5, pc}
 8008f96:	0799      	lsls	r1, r3, #30
 8008f98:	bf58      	it	pl
 8008f9a:	6962      	ldrpl	r2, [r4, #20]
 8008f9c:	60a2      	str	r2, [r4, #8]
 8008f9e:	e7f4      	b.n	8008f8a <__swsetup_r+0x8e>
 8008fa0:	2000      	movs	r0, #0
 8008fa2:	e7f7      	b.n	8008f94 <__swsetup_r+0x98>
 8008fa4:	20000074 	.word	0x20000074

08008fa8 <memset>:
 8008fa8:	4402      	add	r2, r0
 8008faa:	4603      	mov	r3, r0
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d100      	bne.n	8008fb2 <memset+0xa>
 8008fb0:	4770      	bx	lr
 8008fb2:	f803 1b01 	strb.w	r1, [r3], #1
 8008fb6:	e7f9      	b.n	8008fac <memset+0x4>

08008fb8 <strchr>:
 8008fb8:	b2c9      	uxtb	r1, r1
 8008fba:	4603      	mov	r3, r0
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008fc2:	b112      	cbz	r2, 8008fca <strchr+0x12>
 8008fc4:	428a      	cmp	r2, r1
 8008fc6:	d1f9      	bne.n	8008fbc <strchr+0x4>
 8008fc8:	4770      	bx	lr
 8008fca:	2900      	cmp	r1, #0
 8008fcc:	bf18      	it	ne
 8008fce:	2000      	movne	r0, #0
 8008fd0:	4770      	bx	lr

08008fd2 <strstr>:
 8008fd2:	780a      	ldrb	r2, [r1, #0]
 8008fd4:	b570      	push	{r4, r5, r6, lr}
 8008fd6:	b96a      	cbnz	r2, 8008ff4 <strstr+0x22>
 8008fd8:	bd70      	pop	{r4, r5, r6, pc}
 8008fda:	429a      	cmp	r2, r3
 8008fdc:	d109      	bne.n	8008ff2 <strstr+0x20>
 8008fde:	460c      	mov	r4, r1
 8008fe0:	4605      	mov	r5, r0
 8008fe2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d0f6      	beq.n	8008fd8 <strstr+0x6>
 8008fea:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8008fee:	429e      	cmp	r6, r3
 8008ff0:	d0f7      	beq.n	8008fe2 <strstr+0x10>
 8008ff2:	3001      	adds	r0, #1
 8008ff4:	7803      	ldrb	r3, [r0, #0]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d1ef      	bne.n	8008fda <strstr+0x8>
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	e7ec      	b.n	8008fd8 <strstr+0x6>
	...

08009000 <_localeconv_r>:
 8009000:	4800      	ldr	r0, [pc, #0]	@ (8009004 <_localeconv_r+0x4>)
 8009002:	4770      	bx	lr
 8009004:	200001b4 	.word	0x200001b4

08009008 <_close_r>:
 8009008:	b538      	push	{r3, r4, r5, lr}
 800900a:	4d06      	ldr	r5, [pc, #24]	@ (8009024 <_close_r+0x1c>)
 800900c:	2300      	movs	r3, #0
 800900e:	4604      	mov	r4, r0
 8009010:	4608      	mov	r0, r1
 8009012:	602b      	str	r3, [r5, #0]
 8009014:	f7f9 f99c 	bl	8002350 <_close>
 8009018:	1c43      	adds	r3, r0, #1
 800901a:	d102      	bne.n	8009022 <_close_r+0x1a>
 800901c:	682b      	ldr	r3, [r5, #0]
 800901e:	b103      	cbz	r3, 8009022 <_close_r+0x1a>
 8009020:	6023      	str	r3, [r4, #0]
 8009022:	bd38      	pop	{r3, r4, r5, pc}
 8009024:	20000df8 	.word	0x20000df8

08009028 <_lseek_r>:
 8009028:	b538      	push	{r3, r4, r5, lr}
 800902a:	4d07      	ldr	r5, [pc, #28]	@ (8009048 <_lseek_r+0x20>)
 800902c:	4604      	mov	r4, r0
 800902e:	4608      	mov	r0, r1
 8009030:	4611      	mov	r1, r2
 8009032:	2200      	movs	r2, #0
 8009034:	602a      	str	r2, [r5, #0]
 8009036:	461a      	mov	r2, r3
 8009038:	f7f9 f9b1 	bl	800239e <_lseek>
 800903c:	1c43      	adds	r3, r0, #1
 800903e:	d102      	bne.n	8009046 <_lseek_r+0x1e>
 8009040:	682b      	ldr	r3, [r5, #0]
 8009042:	b103      	cbz	r3, 8009046 <_lseek_r+0x1e>
 8009044:	6023      	str	r3, [r4, #0]
 8009046:	bd38      	pop	{r3, r4, r5, pc}
 8009048:	20000df8 	.word	0x20000df8

0800904c <_read_r>:
 800904c:	b538      	push	{r3, r4, r5, lr}
 800904e:	4d07      	ldr	r5, [pc, #28]	@ (800906c <_read_r+0x20>)
 8009050:	4604      	mov	r4, r0
 8009052:	4608      	mov	r0, r1
 8009054:	4611      	mov	r1, r2
 8009056:	2200      	movs	r2, #0
 8009058:	602a      	str	r2, [r5, #0]
 800905a:	461a      	mov	r2, r3
 800905c:	f7f9 f947 	bl	80022ee <_read>
 8009060:	1c43      	adds	r3, r0, #1
 8009062:	d102      	bne.n	800906a <_read_r+0x1e>
 8009064:	682b      	ldr	r3, [r5, #0]
 8009066:	b103      	cbz	r3, 800906a <_read_r+0x1e>
 8009068:	6023      	str	r3, [r4, #0]
 800906a:	bd38      	pop	{r3, r4, r5, pc}
 800906c:	20000df8 	.word	0x20000df8

08009070 <_write_r>:
 8009070:	b538      	push	{r3, r4, r5, lr}
 8009072:	4d07      	ldr	r5, [pc, #28]	@ (8009090 <_write_r+0x20>)
 8009074:	4604      	mov	r4, r0
 8009076:	4608      	mov	r0, r1
 8009078:	4611      	mov	r1, r2
 800907a:	2200      	movs	r2, #0
 800907c:	602a      	str	r2, [r5, #0]
 800907e:	461a      	mov	r2, r3
 8009080:	f7f9 f952 	bl	8002328 <_write>
 8009084:	1c43      	adds	r3, r0, #1
 8009086:	d102      	bne.n	800908e <_write_r+0x1e>
 8009088:	682b      	ldr	r3, [r5, #0]
 800908a:	b103      	cbz	r3, 800908e <_write_r+0x1e>
 800908c:	6023      	str	r3, [r4, #0]
 800908e:	bd38      	pop	{r3, r4, r5, pc}
 8009090:	20000df8 	.word	0x20000df8

08009094 <__errno>:
 8009094:	4b01      	ldr	r3, [pc, #4]	@ (800909c <__errno+0x8>)
 8009096:	6818      	ldr	r0, [r3, #0]
 8009098:	4770      	bx	lr
 800909a:	bf00      	nop
 800909c:	20000074 	.word	0x20000074

080090a0 <__libc_init_array>:
 80090a0:	b570      	push	{r4, r5, r6, lr}
 80090a2:	4d0d      	ldr	r5, [pc, #52]	@ (80090d8 <__libc_init_array+0x38>)
 80090a4:	4c0d      	ldr	r4, [pc, #52]	@ (80090dc <__libc_init_array+0x3c>)
 80090a6:	1b64      	subs	r4, r4, r5
 80090a8:	10a4      	asrs	r4, r4, #2
 80090aa:	2600      	movs	r6, #0
 80090ac:	42a6      	cmp	r6, r4
 80090ae:	d109      	bne.n	80090c4 <__libc_init_array+0x24>
 80090b0:	4d0b      	ldr	r5, [pc, #44]	@ (80090e0 <__libc_init_array+0x40>)
 80090b2:	4c0c      	ldr	r4, [pc, #48]	@ (80090e4 <__libc_init_array+0x44>)
 80090b4:	f003 fb32 	bl	800c71c <_init>
 80090b8:	1b64      	subs	r4, r4, r5
 80090ba:	10a4      	asrs	r4, r4, #2
 80090bc:	2600      	movs	r6, #0
 80090be:	42a6      	cmp	r6, r4
 80090c0:	d105      	bne.n	80090ce <__libc_init_array+0x2e>
 80090c2:	bd70      	pop	{r4, r5, r6, pc}
 80090c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80090c8:	4798      	blx	r3
 80090ca:	3601      	adds	r6, #1
 80090cc:	e7ee      	b.n	80090ac <__libc_init_array+0xc>
 80090ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80090d2:	4798      	blx	r3
 80090d4:	3601      	adds	r6, #1
 80090d6:	e7f2      	b.n	80090be <__libc_init_array+0x1e>
 80090d8:	0800d0d8 	.word	0x0800d0d8
 80090dc:	0800d0d8 	.word	0x0800d0d8
 80090e0:	0800d0d8 	.word	0x0800d0d8
 80090e4:	0800d0dc 	.word	0x0800d0dc

080090e8 <__retarget_lock_init_recursive>:
 80090e8:	4770      	bx	lr

080090ea <__retarget_lock_acquire_recursive>:
 80090ea:	4770      	bx	lr

080090ec <__retarget_lock_release_recursive>:
 80090ec:	4770      	bx	lr

080090ee <memcpy>:
 80090ee:	440a      	add	r2, r1
 80090f0:	4291      	cmp	r1, r2
 80090f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80090f6:	d100      	bne.n	80090fa <memcpy+0xc>
 80090f8:	4770      	bx	lr
 80090fa:	b510      	push	{r4, lr}
 80090fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009100:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009104:	4291      	cmp	r1, r2
 8009106:	d1f9      	bne.n	80090fc <memcpy+0xe>
 8009108:	bd10      	pop	{r4, pc}

0800910a <quorem>:
 800910a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800910e:	6903      	ldr	r3, [r0, #16]
 8009110:	690c      	ldr	r4, [r1, #16]
 8009112:	42a3      	cmp	r3, r4
 8009114:	4607      	mov	r7, r0
 8009116:	db7e      	blt.n	8009216 <quorem+0x10c>
 8009118:	3c01      	subs	r4, #1
 800911a:	f101 0814 	add.w	r8, r1, #20
 800911e:	00a3      	lsls	r3, r4, #2
 8009120:	f100 0514 	add.w	r5, r0, #20
 8009124:	9300      	str	r3, [sp, #0]
 8009126:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800912a:	9301      	str	r3, [sp, #4]
 800912c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009130:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009134:	3301      	adds	r3, #1
 8009136:	429a      	cmp	r2, r3
 8009138:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800913c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009140:	d32e      	bcc.n	80091a0 <quorem+0x96>
 8009142:	f04f 0a00 	mov.w	sl, #0
 8009146:	46c4      	mov	ip, r8
 8009148:	46ae      	mov	lr, r5
 800914a:	46d3      	mov	fp, sl
 800914c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009150:	b298      	uxth	r0, r3
 8009152:	fb06 a000 	mla	r0, r6, r0, sl
 8009156:	0c02      	lsrs	r2, r0, #16
 8009158:	0c1b      	lsrs	r3, r3, #16
 800915a:	fb06 2303 	mla	r3, r6, r3, r2
 800915e:	f8de 2000 	ldr.w	r2, [lr]
 8009162:	b280      	uxth	r0, r0
 8009164:	b292      	uxth	r2, r2
 8009166:	1a12      	subs	r2, r2, r0
 8009168:	445a      	add	r2, fp
 800916a:	f8de 0000 	ldr.w	r0, [lr]
 800916e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009172:	b29b      	uxth	r3, r3
 8009174:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009178:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800917c:	b292      	uxth	r2, r2
 800917e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009182:	45e1      	cmp	r9, ip
 8009184:	f84e 2b04 	str.w	r2, [lr], #4
 8009188:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800918c:	d2de      	bcs.n	800914c <quorem+0x42>
 800918e:	9b00      	ldr	r3, [sp, #0]
 8009190:	58eb      	ldr	r3, [r5, r3]
 8009192:	b92b      	cbnz	r3, 80091a0 <quorem+0x96>
 8009194:	9b01      	ldr	r3, [sp, #4]
 8009196:	3b04      	subs	r3, #4
 8009198:	429d      	cmp	r5, r3
 800919a:	461a      	mov	r2, r3
 800919c:	d32f      	bcc.n	80091fe <quorem+0xf4>
 800919e:	613c      	str	r4, [r7, #16]
 80091a0:	4638      	mov	r0, r7
 80091a2:	f001 f97b 	bl	800a49c <__mcmp>
 80091a6:	2800      	cmp	r0, #0
 80091a8:	db25      	blt.n	80091f6 <quorem+0xec>
 80091aa:	4629      	mov	r1, r5
 80091ac:	2000      	movs	r0, #0
 80091ae:	f858 2b04 	ldr.w	r2, [r8], #4
 80091b2:	f8d1 c000 	ldr.w	ip, [r1]
 80091b6:	fa1f fe82 	uxth.w	lr, r2
 80091ba:	fa1f f38c 	uxth.w	r3, ip
 80091be:	eba3 030e 	sub.w	r3, r3, lr
 80091c2:	4403      	add	r3, r0
 80091c4:	0c12      	lsrs	r2, r2, #16
 80091c6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80091ca:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80091ce:	b29b      	uxth	r3, r3
 80091d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80091d4:	45c1      	cmp	r9, r8
 80091d6:	f841 3b04 	str.w	r3, [r1], #4
 80091da:	ea4f 4022 	mov.w	r0, r2, asr #16
 80091de:	d2e6      	bcs.n	80091ae <quorem+0xa4>
 80091e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80091e4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80091e8:	b922      	cbnz	r2, 80091f4 <quorem+0xea>
 80091ea:	3b04      	subs	r3, #4
 80091ec:	429d      	cmp	r5, r3
 80091ee:	461a      	mov	r2, r3
 80091f0:	d30b      	bcc.n	800920a <quorem+0x100>
 80091f2:	613c      	str	r4, [r7, #16]
 80091f4:	3601      	adds	r6, #1
 80091f6:	4630      	mov	r0, r6
 80091f8:	b003      	add	sp, #12
 80091fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091fe:	6812      	ldr	r2, [r2, #0]
 8009200:	3b04      	subs	r3, #4
 8009202:	2a00      	cmp	r2, #0
 8009204:	d1cb      	bne.n	800919e <quorem+0x94>
 8009206:	3c01      	subs	r4, #1
 8009208:	e7c6      	b.n	8009198 <quorem+0x8e>
 800920a:	6812      	ldr	r2, [r2, #0]
 800920c:	3b04      	subs	r3, #4
 800920e:	2a00      	cmp	r2, #0
 8009210:	d1ef      	bne.n	80091f2 <quorem+0xe8>
 8009212:	3c01      	subs	r4, #1
 8009214:	e7ea      	b.n	80091ec <quorem+0xe2>
 8009216:	2000      	movs	r0, #0
 8009218:	e7ee      	b.n	80091f8 <quorem+0xee>
 800921a:	0000      	movs	r0, r0
 800921c:	0000      	movs	r0, r0
	...

08009220 <_dtoa_r>:
 8009220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009224:	69c7      	ldr	r7, [r0, #28]
 8009226:	b099      	sub	sp, #100	@ 0x64
 8009228:	ed8d 0b02 	vstr	d0, [sp, #8]
 800922c:	ec55 4b10 	vmov	r4, r5, d0
 8009230:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009232:	9109      	str	r1, [sp, #36]	@ 0x24
 8009234:	4683      	mov	fp, r0
 8009236:	920e      	str	r2, [sp, #56]	@ 0x38
 8009238:	9313      	str	r3, [sp, #76]	@ 0x4c
 800923a:	b97f      	cbnz	r7, 800925c <_dtoa_r+0x3c>
 800923c:	2010      	movs	r0, #16
 800923e:	f000 fdfd 	bl	8009e3c <malloc>
 8009242:	4602      	mov	r2, r0
 8009244:	f8cb 001c 	str.w	r0, [fp, #28]
 8009248:	b920      	cbnz	r0, 8009254 <_dtoa_r+0x34>
 800924a:	4ba7      	ldr	r3, [pc, #668]	@ (80094e8 <_dtoa_r+0x2c8>)
 800924c:	21ef      	movs	r1, #239	@ 0xef
 800924e:	48a7      	ldr	r0, [pc, #668]	@ (80094ec <_dtoa_r+0x2cc>)
 8009250:	f002 f9ae 	bl	800b5b0 <__assert_func>
 8009254:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009258:	6007      	str	r7, [r0, #0]
 800925a:	60c7      	str	r7, [r0, #12]
 800925c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009260:	6819      	ldr	r1, [r3, #0]
 8009262:	b159      	cbz	r1, 800927c <_dtoa_r+0x5c>
 8009264:	685a      	ldr	r2, [r3, #4]
 8009266:	604a      	str	r2, [r1, #4]
 8009268:	2301      	movs	r3, #1
 800926a:	4093      	lsls	r3, r2
 800926c:	608b      	str	r3, [r1, #8]
 800926e:	4658      	mov	r0, fp
 8009270:	f000 feda 	bl	800a028 <_Bfree>
 8009274:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009278:	2200      	movs	r2, #0
 800927a:	601a      	str	r2, [r3, #0]
 800927c:	1e2b      	subs	r3, r5, #0
 800927e:	bfb9      	ittee	lt
 8009280:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009284:	9303      	strlt	r3, [sp, #12]
 8009286:	2300      	movge	r3, #0
 8009288:	6033      	strge	r3, [r6, #0]
 800928a:	9f03      	ldr	r7, [sp, #12]
 800928c:	4b98      	ldr	r3, [pc, #608]	@ (80094f0 <_dtoa_r+0x2d0>)
 800928e:	bfbc      	itt	lt
 8009290:	2201      	movlt	r2, #1
 8009292:	6032      	strlt	r2, [r6, #0]
 8009294:	43bb      	bics	r3, r7
 8009296:	d112      	bne.n	80092be <_dtoa_r+0x9e>
 8009298:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800929a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800929e:	6013      	str	r3, [r2, #0]
 80092a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80092a4:	4323      	orrs	r3, r4
 80092a6:	f000 854d 	beq.w	8009d44 <_dtoa_r+0xb24>
 80092aa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80092ac:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009504 <_dtoa_r+0x2e4>
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	f000 854f 	beq.w	8009d54 <_dtoa_r+0xb34>
 80092b6:	f10a 0303 	add.w	r3, sl, #3
 80092ba:	f000 bd49 	b.w	8009d50 <_dtoa_r+0xb30>
 80092be:	ed9d 7b02 	vldr	d7, [sp, #8]
 80092c2:	2200      	movs	r2, #0
 80092c4:	ec51 0b17 	vmov	r0, r1, d7
 80092c8:	2300      	movs	r3, #0
 80092ca:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80092ce:	f7f7 fc03 	bl	8000ad8 <__aeabi_dcmpeq>
 80092d2:	4680      	mov	r8, r0
 80092d4:	b158      	cbz	r0, 80092ee <_dtoa_r+0xce>
 80092d6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80092d8:	2301      	movs	r3, #1
 80092da:	6013      	str	r3, [r2, #0]
 80092dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80092de:	b113      	cbz	r3, 80092e6 <_dtoa_r+0xc6>
 80092e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80092e2:	4b84      	ldr	r3, [pc, #528]	@ (80094f4 <_dtoa_r+0x2d4>)
 80092e4:	6013      	str	r3, [r2, #0]
 80092e6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009508 <_dtoa_r+0x2e8>
 80092ea:	f000 bd33 	b.w	8009d54 <_dtoa_r+0xb34>
 80092ee:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80092f2:	aa16      	add	r2, sp, #88	@ 0x58
 80092f4:	a917      	add	r1, sp, #92	@ 0x5c
 80092f6:	4658      	mov	r0, fp
 80092f8:	f001 f980 	bl	800a5fc <__d2b>
 80092fc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009300:	4681      	mov	r9, r0
 8009302:	2e00      	cmp	r6, #0
 8009304:	d077      	beq.n	80093f6 <_dtoa_r+0x1d6>
 8009306:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009308:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800930c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009310:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009314:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009318:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800931c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009320:	4619      	mov	r1, r3
 8009322:	2200      	movs	r2, #0
 8009324:	4b74      	ldr	r3, [pc, #464]	@ (80094f8 <_dtoa_r+0x2d8>)
 8009326:	f7f6 ffb7 	bl	8000298 <__aeabi_dsub>
 800932a:	a369      	add	r3, pc, #420	@ (adr r3, 80094d0 <_dtoa_r+0x2b0>)
 800932c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009330:	f7f7 f96a 	bl	8000608 <__aeabi_dmul>
 8009334:	a368      	add	r3, pc, #416	@ (adr r3, 80094d8 <_dtoa_r+0x2b8>)
 8009336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800933a:	f7f6 ffaf 	bl	800029c <__adddf3>
 800933e:	4604      	mov	r4, r0
 8009340:	4630      	mov	r0, r6
 8009342:	460d      	mov	r5, r1
 8009344:	f7f7 f8f6 	bl	8000534 <__aeabi_i2d>
 8009348:	a365      	add	r3, pc, #404	@ (adr r3, 80094e0 <_dtoa_r+0x2c0>)
 800934a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800934e:	f7f7 f95b 	bl	8000608 <__aeabi_dmul>
 8009352:	4602      	mov	r2, r0
 8009354:	460b      	mov	r3, r1
 8009356:	4620      	mov	r0, r4
 8009358:	4629      	mov	r1, r5
 800935a:	f7f6 ff9f 	bl	800029c <__adddf3>
 800935e:	4604      	mov	r4, r0
 8009360:	460d      	mov	r5, r1
 8009362:	f7f7 fc01 	bl	8000b68 <__aeabi_d2iz>
 8009366:	2200      	movs	r2, #0
 8009368:	4607      	mov	r7, r0
 800936a:	2300      	movs	r3, #0
 800936c:	4620      	mov	r0, r4
 800936e:	4629      	mov	r1, r5
 8009370:	f7f7 fbbc 	bl	8000aec <__aeabi_dcmplt>
 8009374:	b140      	cbz	r0, 8009388 <_dtoa_r+0x168>
 8009376:	4638      	mov	r0, r7
 8009378:	f7f7 f8dc 	bl	8000534 <__aeabi_i2d>
 800937c:	4622      	mov	r2, r4
 800937e:	462b      	mov	r3, r5
 8009380:	f7f7 fbaa 	bl	8000ad8 <__aeabi_dcmpeq>
 8009384:	b900      	cbnz	r0, 8009388 <_dtoa_r+0x168>
 8009386:	3f01      	subs	r7, #1
 8009388:	2f16      	cmp	r7, #22
 800938a:	d851      	bhi.n	8009430 <_dtoa_r+0x210>
 800938c:	4b5b      	ldr	r3, [pc, #364]	@ (80094fc <_dtoa_r+0x2dc>)
 800938e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009396:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800939a:	f7f7 fba7 	bl	8000aec <__aeabi_dcmplt>
 800939e:	2800      	cmp	r0, #0
 80093a0:	d048      	beq.n	8009434 <_dtoa_r+0x214>
 80093a2:	3f01      	subs	r7, #1
 80093a4:	2300      	movs	r3, #0
 80093a6:	9312      	str	r3, [sp, #72]	@ 0x48
 80093a8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80093aa:	1b9b      	subs	r3, r3, r6
 80093ac:	1e5a      	subs	r2, r3, #1
 80093ae:	bf44      	itt	mi
 80093b0:	f1c3 0801 	rsbmi	r8, r3, #1
 80093b4:	2300      	movmi	r3, #0
 80093b6:	9208      	str	r2, [sp, #32]
 80093b8:	bf54      	ite	pl
 80093ba:	f04f 0800 	movpl.w	r8, #0
 80093be:	9308      	strmi	r3, [sp, #32]
 80093c0:	2f00      	cmp	r7, #0
 80093c2:	db39      	blt.n	8009438 <_dtoa_r+0x218>
 80093c4:	9b08      	ldr	r3, [sp, #32]
 80093c6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80093c8:	443b      	add	r3, r7
 80093ca:	9308      	str	r3, [sp, #32]
 80093cc:	2300      	movs	r3, #0
 80093ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80093d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093d2:	2b09      	cmp	r3, #9
 80093d4:	d864      	bhi.n	80094a0 <_dtoa_r+0x280>
 80093d6:	2b05      	cmp	r3, #5
 80093d8:	bfc4      	itt	gt
 80093da:	3b04      	subgt	r3, #4
 80093dc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80093de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093e0:	f1a3 0302 	sub.w	r3, r3, #2
 80093e4:	bfcc      	ite	gt
 80093e6:	2400      	movgt	r4, #0
 80093e8:	2401      	movle	r4, #1
 80093ea:	2b03      	cmp	r3, #3
 80093ec:	d863      	bhi.n	80094b6 <_dtoa_r+0x296>
 80093ee:	e8df f003 	tbb	[pc, r3]
 80093f2:	372a      	.short	0x372a
 80093f4:	5535      	.short	0x5535
 80093f6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80093fa:	441e      	add	r6, r3
 80093fc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009400:	2b20      	cmp	r3, #32
 8009402:	bfc1      	itttt	gt
 8009404:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009408:	409f      	lslgt	r7, r3
 800940a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800940e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009412:	bfd6      	itet	le
 8009414:	f1c3 0320 	rsble	r3, r3, #32
 8009418:	ea47 0003 	orrgt.w	r0, r7, r3
 800941c:	fa04 f003 	lslle.w	r0, r4, r3
 8009420:	f7f7 f878 	bl	8000514 <__aeabi_ui2d>
 8009424:	2201      	movs	r2, #1
 8009426:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800942a:	3e01      	subs	r6, #1
 800942c:	9214      	str	r2, [sp, #80]	@ 0x50
 800942e:	e777      	b.n	8009320 <_dtoa_r+0x100>
 8009430:	2301      	movs	r3, #1
 8009432:	e7b8      	b.n	80093a6 <_dtoa_r+0x186>
 8009434:	9012      	str	r0, [sp, #72]	@ 0x48
 8009436:	e7b7      	b.n	80093a8 <_dtoa_r+0x188>
 8009438:	427b      	negs	r3, r7
 800943a:	930a      	str	r3, [sp, #40]	@ 0x28
 800943c:	2300      	movs	r3, #0
 800943e:	eba8 0807 	sub.w	r8, r8, r7
 8009442:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009444:	e7c4      	b.n	80093d0 <_dtoa_r+0x1b0>
 8009446:	2300      	movs	r3, #0
 8009448:	930b      	str	r3, [sp, #44]	@ 0x2c
 800944a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800944c:	2b00      	cmp	r3, #0
 800944e:	dc35      	bgt.n	80094bc <_dtoa_r+0x29c>
 8009450:	2301      	movs	r3, #1
 8009452:	9300      	str	r3, [sp, #0]
 8009454:	9307      	str	r3, [sp, #28]
 8009456:	461a      	mov	r2, r3
 8009458:	920e      	str	r2, [sp, #56]	@ 0x38
 800945a:	e00b      	b.n	8009474 <_dtoa_r+0x254>
 800945c:	2301      	movs	r3, #1
 800945e:	e7f3      	b.n	8009448 <_dtoa_r+0x228>
 8009460:	2300      	movs	r3, #0
 8009462:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009464:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009466:	18fb      	adds	r3, r7, r3
 8009468:	9300      	str	r3, [sp, #0]
 800946a:	3301      	adds	r3, #1
 800946c:	2b01      	cmp	r3, #1
 800946e:	9307      	str	r3, [sp, #28]
 8009470:	bfb8      	it	lt
 8009472:	2301      	movlt	r3, #1
 8009474:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009478:	2100      	movs	r1, #0
 800947a:	2204      	movs	r2, #4
 800947c:	f102 0514 	add.w	r5, r2, #20
 8009480:	429d      	cmp	r5, r3
 8009482:	d91f      	bls.n	80094c4 <_dtoa_r+0x2a4>
 8009484:	6041      	str	r1, [r0, #4]
 8009486:	4658      	mov	r0, fp
 8009488:	f000 fd8e 	bl	8009fa8 <_Balloc>
 800948c:	4682      	mov	sl, r0
 800948e:	2800      	cmp	r0, #0
 8009490:	d13c      	bne.n	800950c <_dtoa_r+0x2ec>
 8009492:	4b1b      	ldr	r3, [pc, #108]	@ (8009500 <_dtoa_r+0x2e0>)
 8009494:	4602      	mov	r2, r0
 8009496:	f240 11af 	movw	r1, #431	@ 0x1af
 800949a:	e6d8      	b.n	800924e <_dtoa_r+0x2e>
 800949c:	2301      	movs	r3, #1
 800949e:	e7e0      	b.n	8009462 <_dtoa_r+0x242>
 80094a0:	2401      	movs	r4, #1
 80094a2:	2300      	movs	r3, #0
 80094a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80094a6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80094a8:	f04f 33ff 	mov.w	r3, #4294967295
 80094ac:	9300      	str	r3, [sp, #0]
 80094ae:	9307      	str	r3, [sp, #28]
 80094b0:	2200      	movs	r2, #0
 80094b2:	2312      	movs	r3, #18
 80094b4:	e7d0      	b.n	8009458 <_dtoa_r+0x238>
 80094b6:	2301      	movs	r3, #1
 80094b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80094ba:	e7f5      	b.n	80094a8 <_dtoa_r+0x288>
 80094bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80094be:	9300      	str	r3, [sp, #0]
 80094c0:	9307      	str	r3, [sp, #28]
 80094c2:	e7d7      	b.n	8009474 <_dtoa_r+0x254>
 80094c4:	3101      	adds	r1, #1
 80094c6:	0052      	lsls	r2, r2, #1
 80094c8:	e7d8      	b.n	800947c <_dtoa_r+0x25c>
 80094ca:	bf00      	nop
 80094cc:	f3af 8000 	nop.w
 80094d0:	636f4361 	.word	0x636f4361
 80094d4:	3fd287a7 	.word	0x3fd287a7
 80094d8:	8b60c8b3 	.word	0x8b60c8b3
 80094dc:	3fc68a28 	.word	0x3fc68a28
 80094e0:	509f79fb 	.word	0x509f79fb
 80094e4:	3fd34413 	.word	0x3fd34413
 80094e8:	0800ce51 	.word	0x0800ce51
 80094ec:	0800ce68 	.word	0x0800ce68
 80094f0:	7ff00000 	.word	0x7ff00000
 80094f4:	0800d050 	.word	0x0800d050
 80094f8:	3ff80000 	.word	0x3ff80000
 80094fc:	0800cf60 	.word	0x0800cf60
 8009500:	0800cec0 	.word	0x0800cec0
 8009504:	0800ce4d 	.word	0x0800ce4d
 8009508:	0800d04f 	.word	0x0800d04f
 800950c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009510:	6018      	str	r0, [r3, #0]
 8009512:	9b07      	ldr	r3, [sp, #28]
 8009514:	2b0e      	cmp	r3, #14
 8009516:	f200 80a4 	bhi.w	8009662 <_dtoa_r+0x442>
 800951a:	2c00      	cmp	r4, #0
 800951c:	f000 80a1 	beq.w	8009662 <_dtoa_r+0x442>
 8009520:	2f00      	cmp	r7, #0
 8009522:	dd33      	ble.n	800958c <_dtoa_r+0x36c>
 8009524:	4bad      	ldr	r3, [pc, #692]	@ (80097dc <_dtoa_r+0x5bc>)
 8009526:	f007 020f 	and.w	r2, r7, #15
 800952a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800952e:	ed93 7b00 	vldr	d7, [r3]
 8009532:	05f8      	lsls	r0, r7, #23
 8009534:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009538:	ea4f 1427 	mov.w	r4, r7, asr #4
 800953c:	d516      	bpl.n	800956c <_dtoa_r+0x34c>
 800953e:	4ba8      	ldr	r3, [pc, #672]	@ (80097e0 <_dtoa_r+0x5c0>)
 8009540:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009544:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009548:	f7f7 f988 	bl	800085c <__aeabi_ddiv>
 800954c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009550:	f004 040f 	and.w	r4, r4, #15
 8009554:	2603      	movs	r6, #3
 8009556:	4da2      	ldr	r5, [pc, #648]	@ (80097e0 <_dtoa_r+0x5c0>)
 8009558:	b954      	cbnz	r4, 8009570 <_dtoa_r+0x350>
 800955a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800955e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009562:	f7f7 f97b 	bl	800085c <__aeabi_ddiv>
 8009566:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800956a:	e028      	b.n	80095be <_dtoa_r+0x39e>
 800956c:	2602      	movs	r6, #2
 800956e:	e7f2      	b.n	8009556 <_dtoa_r+0x336>
 8009570:	07e1      	lsls	r1, r4, #31
 8009572:	d508      	bpl.n	8009586 <_dtoa_r+0x366>
 8009574:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009578:	e9d5 2300 	ldrd	r2, r3, [r5]
 800957c:	f7f7 f844 	bl	8000608 <__aeabi_dmul>
 8009580:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009584:	3601      	adds	r6, #1
 8009586:	1064      	asrs	r4, r4, #1
 8009588:	3508      	adds	r5, #8
 800958a:	e7e5      	b.n	8009558 <_dtoa_r+0x338>
 800958c:	f000 80d2 	beq.w	8009734 <_dtoa_r+0x514>
 8009590:	427c      	negs	r4, r7
 8009592:	4b92      	ldr	r3, [pc, #584]	@ (80097dc <_dtoa_r+0x5bc>)
 8009594:	4d92      	ldr	r5, [pc, #584]	@ (80097e0 <_dtoa_r+0x5c0>)
 8009596:	f004 020f 	and.w	r2, r4, #15
 800959a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800959e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80095a6:	f7f7 f82f 	bl	8000608 <__aeabi_dmul>
 80095aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80095ae:	1124      	asrs	r4, r4, #4
 80095b0:	2300      	movs	r3, #0
 80095b2:	2602      	movs	r6, #2
 80095b4:	2c00      	cmp	r4, #0
 80095b6:	f040 80b2 	bne.w	800971e <_dtoa_r+0x4fe>
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d1d3      	bne.n	8009566 <_dtoa_r+0x346>
 80095be:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80095c0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	f000 80b7 	beq.w	8009738 <_dtoa_r+0x518>
 80095ca:	4b86      	ldr	r3, [pc, #536]	@ (80097e4 <_dtoa_r+0x5c4>)
 80095cc:	2200      	movs	r2, #0
 80095ce:	4620      	mov	r0, r4
 80095d0:	4629      	mov	r1, r5
 80095d2:	f7f7 fa8b 	bl	8000aec <__aeabi_dcmplt>
 80095d6:	2800      	cmp	r0, #0
 80095d8:	f000 80ae 	beq.w	8009738 <_dtoa_r+0x518>
 80095dc:	9b07      	ldr	r3, [sp, #28]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	f000 80aa 	beq.w	8009738 <_dtoa_r+0x518>
 80095e4:	9b00      	ldr	r3, [sp, #0]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	dd37      	ble.n	800965a <_dtoa_r+0x43a>
 80095ea:	1e7b      	subs	r3, r7, #1
 80095ec:	9304      	str	r3, [sp, #16]
 80095ee:	4620      	mov	r0, r4
 80095f0:	4b7d      	ldr	r3, [pc, #500]	@ (80097e8 <_dtoa_r+0x5c8>)
 80095f2:	2200      	movs	r2, #0
 80095f4:	4629      	mov	r1, r5
 80095f6:	f7f7 f807 	bl	8000608 <__aeabi_dmul>
 80095fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80095fe:	9c00      	ldr	r4, [sp, #0]
 8009600:	3601      	adds	r6, #1
 8009602:	4630      	mov	r0, r6
 8009604:	f7f6 ff96 	bl	8000534 <__aeabi_i2d>
 8009608:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800960c:	f7f6 fffc 	bl	8000608 <__aeabi_dmul>
 8009610:	4b76      	ldr	r3, [pc, #472]	@ (80097ec <_dtoa_r+0x5cc>)
 8009612:	2200      	movs	r2, #0
 8009614:	f7f6 fe42 	bl	800029c <__adddf3>
 8009618:	4605      	mov	r5, r0
 800961a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800961e:	2c00      	cmp	r4, #0
 8009620:	f040 808d 	bne.w	800973e <_dtoa_r+0x51e>
 8009624:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009628:	4b71      	ldr	r3, [pc, #452]	@ (80097f0 <_dtoa_r+0x5d0>)
 800962a:	2200      	movs	r2, #0
 800962c:	f7f6 fe34 	bl	8000298 <__aeabi_dsub>
 8009630:	4602      	mov	r2, r0
 8009632:	460b      	mov	r3, r1
 8009634:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009638:	462a      	mov	r2, r5
 800963a:	4633      	mov	r3, r6
 800963c:	f7f7 fa74 	bl	8000b28 <__aeabi_dcmpgt>
 8009640:	2800      	cmp	r0, #0
 8009642:	f040 828b 	bne.w	8009b5c <_dtoa_r+0x93c>
 8009646:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800964a:	462a      	mov	r2, r5
 800964c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009650:	f7f7 fa4c 	bl	8000aec <__aeabi_dcmplt>
 8009654:	2800      	cmp	r0, #0
 8009656:	f040 8128 	bne.w	80098aa <_dtoa_r+0x68a>
 800965a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800965e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009662:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009664:	2b00      	cmp	r3, #0
 8009666:	f2c0 815a 	blt.w	800991e <_dtoa_r+0x6fe>
 800966a:	2f0e      	cmp	r7, #14
 800966c:	f300 8157 	bgt.w	800991e <_dtoa_r+0x6fe>
 8009670:	4b5a      	ldr	r3, [pc, #360]	@ (80097dc <_dtoa_r+0x5bc>)
 8009672:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009676:	ed93 7b00 	vldr	d7, [r3]
 800967a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800967c:	2b00      	cmp	r3, #0
 800967e:	ed8d 7b00 	vstr	d7, [sp]
 8009682:	da03      	bge.n	800968c <_dtoa_r+0x46c>
 8009684:	9b07      	ldr	r3, [sp, #28]
 8009686:	2b00      	cmp	r3, #0
 8009688:	f340 8101 	ble.w	800988e <_dtoa_r+0x66e>
 800968c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009690:	4656      	mov	r6, sl
 8009692:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009696:	4620      	mov	r0, r4
 8009698:	4629      	mov	r1, r5
 800969a:	f7f7 f8df 	bl	800085c <__aeabi_ddiv>
 800969e:	f7f7 fa63 	bl	8000b68 <__aeabi_d2iz>
 80096a2:	4680      	mov	r8, r0
 80096a4:	f7f6 ff46 	bl	8000534 <__aeabi_i2d>
 80096a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80096ac:	f7f6 ffac 	bl	8000608 <__aeabi_dmul>
 80096b0:	4602      	mov	r2, r0
 80096b2:	460b      	mov	r3, r1
 80096b4:	4620      	mov	r0, r4
 80096b6:	4629      	mov	r1, r5
 80096b8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80096bc:	f7f6 fdec 	bl	8000298 <__aeabi_dsub>
 80096c0:	f806 4b01 	strb.w	r4, [r6], #1
 80096c4:	9d07      	ldr	r5, [sp, #28]
 80096c6:	eba6 040a 	sub.w	r4, r6, sl
 80096ca:	42a5      	cmp	r5, r4
 80096cc:	4602      	mov	r2, r0
 80096ce:	460b      	mov	r3, r1
 80096d0:	f040 8117 	bne.w	8009902 <_dtoa_r+0x6e2>
 80096d4:	f7f6 fde2 	bl	800029c <__adddf3>
 80096d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80096dc:	4604      	mov	r4, r0
 80096de:	460d      	mov	r5, r1
 80096e0:	f7f7 fa22 	bl	8000b28 <__aeabi_dcmpgt>
 80096e4:	2800      	cmp	r0, #0
 80096e6:	f040 80f9 	bne.w	80098dc <_dtoa_r+0x6bc>
 80096ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80096ee:	4620      	mov	r0, r4
 80096f0:	4629      	mov	r1, r5
 80096f2:	f7f7 f9f1 	bl	8000ad8 <__aeabi_dcmpeq>
 80096f6:	b118      	cbz	r0, 8009700 <_dtoa_r+0x4e0>
 80096f8:	f018 0f01 	tst.w	r8, #1
 80096fc:	f040 80ee 	bne.w	80098dc <_dtoa_r+0x6bc>
 8009700:	4649      	mov	r1, r9
 8009702:	4658      	mov	r0, fp
 8009704:	f000 fc90 	bl	800a028 <_Bfree>
 8009708:	2300      	movs	r3, #0
 800970a:	7033      	strb	r3, [r6, #0]
 800970c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800970e:	3701      	adds	r7, #1
 8009710:	601f      	str	r7, [r3, #0]
 8009712:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009714:	2b00      	cmp	r3, #0
 8009716:	f000 831d 	beq.w	8009d54 <_dtoa_r+0xb34>
 800971a:	601e      	str	r6, [r3, #0]
 800971c:	e31a      	b.n	8009d54 <_dtoa_r+0xb34>
 800971e:	07e2      	lsls	r2, r4, #31
 8009720:	d505      	bpl.n	800972e <_dtoa_r+0x50e>
 8009722:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009726:	f7f6 ff6f 	bl	8000608 <__aeabi_dmul>
 800972a:	3601      	adds	r6, #1
 800972c:	2301      	movs	r3, #1
 800972e:	1064      	asrs	r4, r4, #1
 8009730:	3508      	adds	r5, #8
 8009732:	e73f      	b.n	80095b4 <_dtoa_r+0x394>
 8009734:	2602      	movs	r6, #2
 8009736:	e742      	b.n	80095be <_dtoa_r+0x39e>
 8009738:	9c07      	ldr	r4, [sp, #28]
 800973a:	9704      	str	r7, [sp, #16]
 800973c:	e761      	b.n	8009602 <_dtoa_r+0x3e2>
 800973e:	4b27      	ldr	r3, [pc, #156]	@ (80097dc <_dtoa_r+0x5bc>)
 8009740:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009742:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009746:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800974a:	4454      	add	r4, sl
 800974c:	2900      	cmp	r1, #0
 800974e:	d053      	beq.n	80097f8 <_dtoa_r+0x5d8>
 8009750:	4928      	ldr	r1, [pc, #160]	@ (80097f4 <_dtoa_r+0x5d4>)
 8009752:	2000      	movs	r0, #0
 8009754:	f7f7 f882 	bl	800085c <__aeabi_ddiv>
 8009758:	4633      	mov	r3, r6
 800975a:	462a      	mov	r2, r5
 800975c:	f7f6 fd9c 	bl	8000298 <__aeabi_dsub>
 8009760:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009764:	4656      	mov	r6, sl
 8009766:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800976a:	f7f7 f9fd 	bl	8000b68 <__aeabi_d2iz>
 800976e:	4605      	mov	r5, r0
 8009770:	f7f6 fee0 	bl	8000534 <__aeabi_i2d>
 8009774:	4602      	mov	r2, r0
 8009776:	460b      	mov	r3, r1
 8009778:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800977c:	f7f6 fd8c 	bl	8000298 <__aeabi_dsub>
 8009780:	3530      	adds	r5, #48	@ 0x30
 8009782:	4602      	mov	r2, r0
 8009784:	460b      	mov	r3, r1
 8009786:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800978a:	f806 5b01 	strb.w	r5, [r6], #1
 800978e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009792:	f7f7 f9ab 	bl	8000aec <__aeabi_dcmplt>
 8009796:	2800      	cmp	r0, #0
 8009798:	d171      	bne.n	800987e <_dtoa_r+0x65e>
 800979a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800979e:	4911      	ldr	r1, [pc, #68]	@ (80097e4 <_dtoa_r+0x5c4>)
 80097a0:	2000      	movs	r0, #0
 80097a2:	f7f6 fd79 	bl	8000298 <__aeabi_dsub>
 80097a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80097aa:	f7f7 f99f 	bl	8000aec <__aeabi_dcmplt>
 80097ae:	2800      	cmp	r0, #0
 80097b0:	f040 8095 	bne.w	80098de <_dtoa_r+0x6be>
 80097b4:	42a6      	cmp	r6, r4
 80097b6:	f43f af50 	beq.w	800965a <_dtoa_r+0x43a>
 80097ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80097be:	4b0a      	ldr	r3, [pc, #40]	@ (80097e8 <_dtoa_r+0x5c8>)
 80097c0:	2200      	movs	r2, #0
 80097c2:	f7f6 ff21 	bl	8000608 <__aeabi_dmul>
 80097c6:	4b08      	ldr	r3, [pc, #32]	@ (80097e8 <_dtoa_r+0x5c8>)
 80097c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80097cc:	2200      	movs	r2, #0
 80097ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097d2:	f7f6 ff19 	bl	8000608 <__aeabi_dmul>
 80097d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097da:	e7c4      	b.n	8009766 <_dtoa_r+0x546>
 80097dc:	0800cf60 	.word	0x0800cf60
 80097e0:	0800cf38 	.word	0x0800cf38
 80097e4:	3ff00000 	.word	0x3ff00000
 80097e8:	40240000 	.word	0x40240000
 80097ec:	401c0000 	.word	0x401c0000
 80097f0:	40140000 	.word	0x40140000
 80097f4:	3fe00000 	.word	0x3fe00000
 80097f8:	4631      	mov	r1, r6
 80097fa:	4628      	mov	r0, r5
 80097fc:	f7f6 ff04 	bl	8000608 <__aeabi_dmul>
 8009800:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009804:	9415      	str	r4, [sp, #84]	@ 0x54
 8009806:	4656      	mov	r6, sl
 8009808:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800980c:	f7f7 f9ac 	bl	8000b68 <__aeabi_d2iz>
 8009810:	4605      	mov	r5, r0
 8009812:	f7f6 fe8f 	bl	8000534 <__aeabi_i2d>
 8009816:	4602      	mov	r2, r0
 8009818:	460b      	mov	r3, r1
 800981a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800981e:	f7f6 fd3b 	bl	8000298 <__aeabi_dsub>
 8009822:	3530      	adds	r5, #48	@ 0x30
 8009824:	f806 5b01 	strb.w	r5, [r6], #1
 8009828:	4602      	mov	r2, r0
 800982a:	460b      	mov	r3, r1
 800982c:	42a6      	cmp	r6, r4
 800982e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009832:	f04f 0200 	mov.w	r2, #0
 8009836:	d124      	bne.n	8009882 <_dtoa_r+0x662>
 8009838:	4bac      	ldr	r3, [pc, #688]	@ (8009aec <_dtoa_r+0x8cc>)
 800983a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800983e:	f7f6 fd2d 	bl	800029c <__adddf3>
 8009842:	4602      	mov	r2, r0
 8009844:	460b      	mov	r3, r1
 8009846:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800984a:	f7f7 f96d 	bl	8000b28 <__aeabi_dcmpgt>
 800984e:	2800      	cmp	r0, #0
 8009850:	d145      	bne.n	80098de <_dtoa_r+0x6be>
 8009852:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009856:	49a5      	ldr	r1, [pc, #660]	@ (8009aec <_dtoa_r+0x8cc>)
 8009858:	2000      	movs	r0, #0
 800985a:	f7f6 fd1d 	bl	8000298 <__aeabi_dsub>
 800985e:	4602      	mov	r2, r0
 8009860:	460b      	mov	r3, r1
 8009862:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009866:	f7f7 f941 	bl	8000aec <__aeabi_dcmplt>
 800986a:	2800      	cmp	r0, #0
 800986c:	f43f aef5 	beq.w	800965a <_dtoa_r+0x43a>
 8009870:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009872:	1e73      	subs	r3, r6, #1
 8009874:	9315      	str	r3, [sp, #84]	@ 0x54
 8009876:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800987a:	2b30      	cmp	r3, #48	@ 0x30
 800987c:	d0f8      	beq.n	8009870 <_dtoa_r+0x650>
 800987e:	9f04      	ldr	r7, [sp, #16]
 8009880:	e73e      	b.n	8009700 <_dtoa_r+0x4e0>
 8009882:	4b9b      	ldr	r3, [pc, #620]	@ (8009af0 <_dtoa_r+0x8d0>)
 8009884:	f7f6 fec0 	bl	8000608 <__aeabi_dmul>
 8009888:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800988c:	e7bc      	b.n	8009808 <_dtoa_r+0x5e8>
 800988e:	d10c      	bne.n	80098aa <_dtoa_r+0x68a>
 8009890:	4b98      	ldr	r3, [pc, #608]	@ (8009af4 <_dtoa_r+0x8d4>)
 8009892:	2200      	movs	r2, #0
 8009894:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009898:	f7f6 feb6 	bl	8000608 <__aeabi_dmul>
 800989c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80098a0:	f7f7 f938 	bl	8000b14 <__aeabi_dcmpge>
 80098a4:	2800      	cmp	r0, #0
 80098a6:	f000 8157 	beq.w	8009b58 <_dtoa_r+0x938>
 80098aa:	2400      	movs	r4, #0
 80098ac:	4625      	mov	r5, r4
 80098ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80098b0:	43db      	mvns	r3, r3
 80098b2:	9304      	str	r3, [sp, #16]
 80098b4:	4656      	mov	r6, sl
 80098b6:	2700      	movs	r7, #0
 80098b8:	4621      	mov	r1, r4
 80098ba:	4658      	mov	r0, fp
 80098bc:	f000 fbb4 	bl	800a028 <_Bfree>
 80098c0:	2d00      	cmp	r5, #0
 80098c2:	d0dc      	beq.n	800987e <_dtoa_r+0x65e>
 80098c4:	b12f      	cbz	r7, 80098d2 <_dtoa_r+0x6b2>
 80098c6:	42af      	cmp	r7, r5
 80098c8:	d003      	beq.n	80098d2 <_dtoa_r+0x6b2>
 80098ca:	4639      	mov	r1, r7
 80098cc:	4658      	mov	r0, fp
 80098ce:	f000 fbab 	bl	800a028 <_Bfree>
 80098d2:	4629      	mov	r1, r5
 80098d4:	4658      	mov	r0, fp
 80098d6:	f000 fba7 	bl	800a028 <_Bfree>
 80098da:	e7d0      	b.n	800987e <_dtoa_r+0x65e>
 80098dc:	9704      	str	r7, [sp, #16]
 80098de:	4633      	mov	r3, r6
 80098e0:	461e      	mov	r6, r3
 80098e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80098e6:	2a39      	cmp	r2, #57	@ 0x39
 80098e8:	d107      	bne.n	80098fa <_dtoa_r+0x6da>
 80098ea:	459a      	cmp	sl, r3
 80098ec:	d1f8      	bne.n	80098e0 <_dtoa_r+0x6c0>
 80098ee:	9a04      	ldr	r2, [sp, #16]
 80098f0:	3201      	adds	r2, #1
 80098f2:	9204      	str	r2, [sp, #16]
 80098f4:	2230      	movs	r2, #48	@ 0x30
 80098f6:	f88a 2000 	strb.w	r2, [sl]
 80098fa:	781a      	ldrb	r2, [r3, #0]
 80098fc:	3201      	adds	r2, #1
 80098fe:	701a      	strb	r2, [r3, #0]
 8009900:	e7bd      	b.n	800987e <_dtoa_r+0x65e>
 8009902:	4b7b      	ldr	r3, [pc, #492]	@ (8009af0 <_dtoa_r+0x8d0>)
 8009904:	2200      	movs	r2, #0
 8009906:	f7f6 fe7f 	bl	8000608 <__aeabi_dmul>
 800990a:	2200      	movs	r2, #0
 800990c:	2300      	movs	r3, #0
 800990e:	4604      	mov	r4, r0
 8009910:	460d      	mov	r5, r1
 8009912:	f7f7 f8e1 	bl	8000ad8 <__aeabi_dcmpeq>
 8009916:	2800      	cmp	r0, #0
 8009918:	f43f aebb 	beq.w	8009692 <_dtoa_r+0x472>
 800991c:	e6f0      	b.n	8009700 <_dtoa_r+0x4e0>
 800991e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009920:	2a00      	cmp	r2, #0
 8009922:	f000 80db 	beq.w	8009adc <_dtoa_r+0x8bc>
 8009926:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009928:	2a01      	cmp	r2, #1
 800992a:	f300 80bf 	bgt.w	8009aac <_dtoa_r+0x88c>
 800992e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009930:	2a00      	cmp	r2, #0
 8009932:	f000 80b7 	beq.w	8009aa4 <_dtoa_r+0x884>
 8009936:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800993a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800993c:	4646      	mov	r6, r8
 800993e:	9a08      	ldr	r2, [sp, #32]
 8009940:	2101      	movs	r1, #1
 8009942:	441a      	add	r2, r3
 8009944:	4658      	mov	r0, fp
 8009946:	4498      	add	r8, r3
 8009948:	9208      	str	r2, [sp, #32]
 800994a:	f000 fc21 	bl	800a190 <__i2b>
 800994e:	4605      	mov	r5, r0
 8009950:	b15e      	cbz	r6, 800996a <_dtoa_r+0x74a>
 8009952:	9b08      	ldr	r3, [sp, #32]
 8009954:	2b00      	cmp	r3, #0
 8009956:	dd08      	ble.n	800996a <_dtoa_r+0x74a>
 8009958:	42b3      	cmp	r3, r6
 800995a:	9a08      	ldr	r2, [sp, #32]
 800995c:	bfa8      	it	ge
 800995e:	4633      	movge	r3, r6
 8009960:	eba8 0803 	sub.w	r8, r8, r3
 8009964:	1af6      	subs	r6, r6, r3
 8009966:	1ad3      	subs	r3, r2, r3
 8009968:	9308      	str	r3, [sp, #32]
 800996a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800996c:	b1f3      	cbz	r3, 80099ac <_dtoa_r+0x78c>
 800996e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009970:	2b00      	cmp	r3, #0
 8009972:	f000 80b7 	beq.w	8009ae4 <_dtoa_r+0x8c4>
 8009976:	b18c      	cbz	r4, 800999c <_dtoa_r+0x77c>
 8009978:	4629      	mov	r1, r5
 800997a:	4622      	mov	r2, r4
 800997c:	4658      	mov	r0, fp
 800997e:	f000 fcc7 	bl	800a310 <__pow5mult>
 8009982:	464a      	mov	r2, r9
 8009984:	4601      	mov	r1, r0
 8009986:	4605      	mov	r5, r0
 8009988:	4658      	mov	r0, fp
 800998a:	f000 fc17 	bl	800a1bc <__multiply>
 800998e:	4649      	mov	r1, r9
 8009990:	9004      	str	r0, [sp, #16]
 8009992:	4658      	mov	r0, fp
 8009994:	f000 fb48 	bl	800a028 <_Bfree>
 8009998:	9b04      	ldr	r3, [sp, #16]
 800999a:	4699      	mov	r9, r3
 800999c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800999e:	1b1a      	subs	r2, r3, r4
 80099a0:	d004      	beq.n	80099ac <_dtoa_r+0x78c>
 80099a2:	4649      	mov	r1, r9
 80099a4:	4658      	mov	r0, fp
 80099a6:	f000 fcb3 	bl	800a310 <__pow5mult>
 80099aa:	4681      	mov	r9, r0
 80099ac:	2101      	movs	r1, #1
 80099ae:	4658      	mov	r0, fp
 80099b0:	f000 fbee 	bl	800a190 <__i2b>
 80099b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80099b6:	4604      	mov	r4, r0
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	f000 81cf 	beq.w	8009d5c <_dtoa_r+0xb3c>
 80099be:	461a      	mov	r2, r3
 80099c0:	4601      	mov	r1, r0
 80099c2:	4658      	mov	r0, fp
 80099c4:	f000 fca4 	bl	800a310 <__pow5mult>
 80099c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099ca:	2b01      	cmp	r3, #1
 80099cc:	4604      	mov	r4, r0
 80099ce:	f300 8095 	bgt.w	8009afc <_dtoa_r+0x8dc>
 80099d2:	9b02      	ldr	r3, [sp, #8]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	f040 8087 	bne.w	8009ae8 <_dtoa_r+0x8c8>
 80099da:	9b03      	ldr	r3, [sp, #12]
 80099dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	f040 8089 	bne.w	8009af8 <_dtoa_r+0x8d8>
 80099e6:	9b03      	ldr	r3, [sp, #12]
 80099e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80099ec:	0d1b      	lsrs	r3, r3, #20
 80099ee:	051b      	lsls	r3, r3, #20
 80099f0:	b12b      	cbz	r3, 80099fe <_dtoa_r+0x7de>
 80099f2:	9b08      	ldr	r3, [sp, #32]
 80099f4:	3301      	adds	r3, #1
 80099f6:	9308      	str	r3, [sp, #32]
 80099f8:	f108 0801 	add.w	r8, r8, #1
 80099fc:	2301      	movs	r3, #1
 80099fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	f000 81b0 	beq.w	8009d68 <_dtoa_r+0xb48>
 8009a08:	6923      	ldr	r3, [r4, #16]
 8009a0a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009a0e:	6918      	ldr	r0, [r3, #16]
 8009a10:	f000 fb72 	bl	800a0f8 <__hi0bits>
 8009a14:	f1c0 0020 	rsb	r0, r0, #32
 8009a18:	9b08      	ldr	r3, [sp, #32]
 8009a1a:	4418      	add	r0, r3
 8009a1c:	f010 001f 	ands.w	r0, r0, #31
 8009a20:	d077      	beq.n	8009b12 <_dtoa_r+0x8f2>
 8009a22:	f1c0 0320 	rsb	r3, r0, #32
 8009a26:	2b04      	cmp	r3, #4
 8009a28:	dd6b      	ble.n	8009b02 <_dtoa_r+0x8e2>
 8009a2a:	9b08      	ldr	r3, [sp, #32]
 8009a2c:	f1c0 001c 	rsb	r0, r0, #28
 8009a30:	4403      	add	r3, r0
 8009a32:	4480      	add	r8, r0
 8009a34:	4406      	add	r6, r0
 8009a36:	9308      	str	r3, [sp, #32]
 8009a38:	f1b8 0f00 	cmp.w	r8, #0
 8009a3c:	dd05      	ble.n	8009a4a <_dtoa_r+0x82a>
 8009a3e:	4649      	mov	r1, r9
 8009a40:	4642      	mov	r2, r8
 8009a42:	4658      	mov	r0, fp
 8009a44:	f000 fcbe 	bl	800a3c4 <__lshift>
 8009a48:	4681      	mov	r9, r0
 8009a4a:	9b08      	ldr	r3, [sp, #32]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	dd05      	ble.n	8009a5c <_dtoa_r+0x83c>
 8009a50:	4621      	mov	r1, r4
 8009a52:	461a      	mov	r2, r3
 8009a54:	4658      	mov	r0, fp
 8009a56:	f000 fcb5 	bl	800a3c4 <__lshift>
 8009a5a:	4604      	mov	r4, r0
 8009a5c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d059      	beq.n	8009b16 <_dtoa_r+0x8f6>
 8009a62:	4621      	mov	r1, r4
 8009a64:	4648      	mov	r0, r9
 8009a66:	f000 fd19 	bl	800a49c <__mcmp>
 8009a6a:	2800      	cmp	r0, #0
 8009a6c:	da53      	bge.n	8009b16 <_dtoa_r+0x8f6>
 8009a6e:	1e7b      	subs	r3, r7, #1
 8009a70:	9304      	str	r3, [sp, #16]
 8009a72:	4649      	mov	r1, r9
 8009a74:	2300      	movs	r3, #0
 8009a76:	220a      	movs	r2, #10
 8009a78:	4658      	mov	r0, fp
 8009a7a:	f000 faf7 	bl	800a06c <__multadd>
 8009a7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009a80:	4681      	mov	r9, r0
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	f000 8172 	beq.w	8009d6c <_dtoa_r+0xb4c>
 8009a88:	2300      	movs	r3, #0
 8009a8a:	4629      	mov	r1, r5
 8009a8c:	220a      	movs	r2, #10
 8009a8e:	4658      	mov	r0, fp
 8009a90:	f000 faec 	bl	800a06c <__multadd>
 8009a94:	9b00      	ldr	r3, [sp, #0]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	4605      	mov	r5, r0
 8009a9a:	dc67      	bgt.n	8009b6c <_dtoa_r+0x94c>
 8009a9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a9e:	2b02      	cmp	r3, #2
 8009aa0:	dc41      	bgt.n	8009b26 <_dtoa_r+0x906>
 8009aa2:	e063      	b.n	8009b6c <_dtoa_r+0x94c>
 8009aa4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009aa6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009aaa:	e746      	b.n	800993a <_dtoa_r+0x71a>
 8009aac:	9b07      	ldr	r3, [sp, #28]
 8009aae:	1e5c      	subs	r4, r3, #1
 8009ab0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ab2:	42a3      	cmp	r3, r4
 8009ab4:	bfbf      	itttt	lt
 8009ab6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009ab8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009aba:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009abc:	1ae3      	sublt	r3, r4, r3
 8009abe:	bfb4      	ite	lt
 8009ac0:	18d2      	addlt	r2, r2, r3
 8009ac2:	1b1c      	subge	r4, r3, r4
 8009ac4:	9b07      	ldr	r3, [sp, #28]
 8009ac6:	bfbc      	itt	lt
 8009ac8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009aca:	2400      	movlt	r4, #0
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	bfb5      	itete	lt
 8009ad0:	eba8 0603 	sublt.w	r6, r8, r3
 8009ad4:	9b07      	ldrge	r3, [sp, #28]
 8009ad6:	2300      	movlt	r3, #0
 8009ad8:	4646      	movge	r6, r8
 8009ada:	e730      	b.n	800993e <_dtoa_r+0x71e>
 8009adc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009ade:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009ae0:	4646      	mov	r6, r8
 8009ae2:	e735      	b.n	8009950 <_dtoa_r+0x730>
 8009ae4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009ae6:	e75c      	b.n	80099a2 <_dtoa_r+0x782>
 8009ae8:	2300      	movs	r3, #0
 8009aea:	e788      	b.n	80099fe <_dtoa_r+0x7de>
 8009aec:	3fe00000 	.word	0x3fe00000
 8009af0:	40240000 	.word	0x40240000
 8009af4:	40140000 	.word	0x40140000
 8009af8:	9b02      	ldr	r3, [sp, #8]
 8009afa:	e780      	b.n	80099fe <_dtoa_r+0x7de>
 8009afc:	2300      	movs	r3, #0
 8009afe:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b00:	e782      	b.n	8009a08 <_dtoa_r+0x7e8>
 8009b02:	d099      	beq.n	8009a38 <_dtoa_r+0x818>
 8009b04:	9a08      	ldr	r2, [sp, #32]
 8009b06:	331c      	adds	r3, #28
 8009b08:	441a      	add	r2, r3
 8009b0a:	4498      	add	r8, r3
 8009b0c:	441e      	add	r6, r3
 8009b0e:	9208      	str	r2, [sp, #32]
 8009b10:	e792      	b.n	8009a38 <_dtoa_r+0x818>
 8009b12:	4603      	mov	r3, r0
 8009b14:	e7f6      	b.n	8009b04 <_dtoa_r+0x8e4>
 8009b16:	9b07      	ldr	r3, [sp, #28]
 8009b18:	9704      	str	r7, [sp, #16]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	dc20      	bgt.n	8009b60 <_dtoa_r+0x940>
 8009b1e:	9300      	str	r3, [sp, #0]
 8009b20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b22:	2b02      	cmp	r3, #2
 8009b24:	dd1e      	ble.n	8009b64 <_dtoa_r+0x944>
 8009b26:	9b00      	ldr	r3, [sp, #0]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	f47f aec0 	bne.w	80098ae <_dtoa_r+0x68e>
 8009b2e:	4621      	mov	r1, r4
 8009b30:	2205      	movs	r2, #5
 8009b32:	4658      	mov	r0, fp
 8009b34:	f000 fa9a 	bl	800a06c <__multadd>
 8009b38:	4601      	mov	r1, r0
 8009b3a:	4604      	mov	r4, r0
 8009b3c:	4648      	mov	r0, r9
 8009b3e:	f000 fcad 	bl	800a49c <__mcmp>
 8009b42:	2800      	cmp	r0, #0
 8009b44:	f77f aeb3 	ble.w	80098ae <_dtoa_r+0x68e>
 8009b48:	4656      	mov	r6, sl
 8009b4a:	2331      	movs	r3, #49	@ 0x31
 8009b4c:	f806 3b01 	strb.w	r3, [r6], #1
 8009b50:	9b04      	ldr	r3, [sp, #16]
 8009b52:	3301      	adds	r3, #1
 8009b54:	9304      	str	r3, [sp, #16]
 8009b56:	e6ae      	b.n	80098b6 <_dtoa_r+0x696>
 8009b58:	9c07      	ldr	r4, [sp, #28]
 8009b5a:	9704      	str	r7, [sp, #16]
 8009b5c:	4625      	mov	r5, r4
 8009b5e:	e7f3      	b.n	8009b48 <_dtoa_r+0x928>
 8009b60:	9b07      	ldr	r3, [sp, #28]
 8009b62:	9300      	str	r3, [sp, #0]
 8009b64:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	f000 8104 	beq.w	8009d74 <_dtoa_r+0xb54>
 8009b6c:	2e00      	cmp	r6, #0
 8009b6e:	dd05      	ble.n	8009b7c <_dtoa_r+0x95c>
 8009b70:	4629      	mov	r1, r5
 8009b72:	4632      	mov	r2, r6
 8009b74:	4658      	mov	r0, fp
 8009b76:	f000 fc25 	bl	800a3c4 <__lshift>
 8009b7a:	4605      	mov	r5, r0
 8009b7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d05a      	beq.n	8009c38 <_dtoa_r+0xa18>
 8009b82:	6869      	ldr	r1, [r5, #4]
 8009b84:	4658      	mov	r0, fp
 8009b86:	f000 fa0f 	bl	8009fa8 <_Balloc>
 8009b8a:	4606      	mov	r6, r0
 8009b8c:	b928      	cbnz	r0, 8009b9a <_dtoa_r+0x97a>
 8009b8e:	4b84      	ldr	r3, [pc, #528]	@ (8009da0 <_dtoa_r+0xb80>)
 8009b90:	4602      	mov	r2, r0
 8009b92:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009b96:	f7ff bb5a 	b.w	800924e <_dtoa_r+0x2e>
 8009b9a:	692a      	ldr	r2, [r5, #16]
 8009b9c:	3202      	adds	r2, #2
 8009b9e:	0092      	lsls	r2, r2, #2
 8009ba0:	f105 010c 	add.w	r1, r5, #12
 8009ba4:	300c      	adds	r0, #12
 8009ba6:	f7ff faa2 	bl	80090ee <memcpy>
 8009baa:	2201      	movs	r2, #1
 8009bac:	4631      	mov	r1, r6
 8009bae:	4658      	mov	r0, fp
 8009bb0:	f000 fc08 	bl	800a3c4 <__lshift>
 8009bb4:	f10a 0301 	add.w	r3, sl, #1
 8009bb8:	9307      	str	r3, [sp, #28]
 8009bba:	9b00      	ldr	r3, [sp, #0]
 8009bbc:	4453      	add	r3, sl
 8009bbe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009bc0:	9b02      	ldr	r3, [sp, #8]
 8009bc2:	f003 0301 	and.w	r3, r3, #1
 8009bc6:	462f      	mov	r7, r5
 8009bc8:	930a      	str	r3, [sp, #40]	@ 0x28
 8009bca:	4605      	mov	r5, r0
 8009bcc:	9b07      	ldr	r3, [sp, #28]
 8009bce:	4621      	mov	r1, r4
 8009bd0:	3b01      	subs	r3, #1
 8009bd2:	4648      	mov	r0, r9
 8009bd4:	9300      	str	r3, [sp, #0]
 8009bd6:	f7ff fa98 	bl	800910a <quorem>
 8009bda:	4639      	mov	r1, r7
 8009bdc:	9002      	str	r0, [sp, #8]
 8009bde:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009be2:	4648      	mov	r0, r9
 8009be4:	f000 fc5a 	bl	800a49c <__mcmp>
 8009be8:	462a      	mov	r2, r5
 8009bea:	9008      	str	r0, [sp, #32]
 8009bec:	4621      	mov	r1, r4
 8009bee:	4658      	mov	r0, fp
 8009bf0:	f000 fc70 	bl	800a4d4 <__mdiff>
 8009bf4:	68c2      	ldr	r2, [r0, #12]
 8009bf6:	4606      	mov	r6, r0
 8009bf8:	bb02      	cbnz	r2, 8009c3c <_dtoa_r+0xa1c>
 8009bfa:	4601      	mov	r1, r0
 8009bfc:	4648      	mov	r0, r9
 8009bfe:	f000 fc4d 	bl	800a49c <__mcmp>
 8009c02:	4602      	mov	r2, r0
 8009c04:	4631      	mov	r1, r6
 8009c06:	4658      	mov	r0, fp
 8009c08:	920e      	str	r2, [sp, #56]	@ 0x38
 8009c0a:	f000 fa0d 	bl	800a028 <_Bfree>
 8009c0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c10:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009c12:	9e07      	ldr	r6, [sp, #28]
 8009c14:	ea43 0102 	orr.w	r1, r3, r2
 8009c18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c1a:	4319      	orrs	r1, r3
 8009c1c:	d110      	bne.n	8009c40 <_dtoa_r+0xa20>
 8009c1e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009c22:	d029      	beq.n	8009c78 <_dtoa_r+0xa58>
 8009c24:	9b08      	ldr	r3, [sp, #32]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	dd02      	ble.n	8009c30 <_dtoa_r+0xa10>
 8009c2a:	9b02      	ldr	r3, [sp, #8]
 8009c2c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009c30:	9b00      	ldr	r3, [sp, #0]
 8009c32:	f883 8000 	strb.w	r8, [r3]
 8009c36:	e63f      	b.n	80098b8 <_dtoa_r+0x698>
 8009c38:	4628      	mov	r0, r5
 8009c3a:	e7bb      	b.n	8009bb4 <_dtoa_r+0x994>
 8009c3c:	2201      	movs	r2, #1
 8009c3e:	e7e1      	b.n	8009c04 <_dtoa_r+0x9e4>
 8009c40:	9b08      	ldr	r3, [sp, #32]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	db04      	blt.n	8009c50 <_dtoa_r+0xa30>
 8009c46:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009c48:	430b      	orrs	r3, r1
 8009c4a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009c4c:	430b      	orrs	r3, r1
 8009c4e:	d120      	bne.n	8009c92 <_dtoa_r+0xa72>
 8009c50:	2a00      	cmp	r2, #0
 8009c52:	dded      	ble.n	8009c30 <_dtoa_r+0xa10>
 8009c54:	4649      	mov	r1, r9
 8009c56:	2201      	movs	r2, #1
 8009c58:	4658      	mov	r0, fp
 8009c5a:	f000 fbb3 	bl	800a3c4 <__lshift>
 8009c5e:	4621      	mov	r1, r4
 8009c60:	4681      	mov	r9, r0
 8009c62:	f000 fc1b 	bl	800a49c <__mcmp>
 8009c66:	2800      	cmp	r0, #0
 8009c68:	dc03      	bgt.n	8009c72 <_dtoa_r+0xa52>
 8009c6a:	d1e1      	bne.n	8009c30 <_dtoa_r+0xa10>
 8009c6c:	f018 0f01 	tst.w	r8, #1
 8009c70:	d0de      	beq.n	8009c30 <_dtoa_r+0xa10>
 8009c72:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009c76:	d1d8      	bne.n	8009c2a <_dtoa_r+0xa0a>
 8009c78:	9a00      	ldr	r2, [sp, #0]
 8009c7a:	2339      	movs	r3, #57	@ 0x39
 8009c7c:	7013      	strb	r3, [r2, #0]
 8009c7e:	4633      	mov	r3, r6
 8009c80:	461e      	mov	r6, r3
 8009c82:	3b01      	subs	r3, #1
 8009c84:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009c88:	2a39      	cmp	r2, #57	@ 0x39
 8009c8a:	d052      	beq.n	8009d32 <_dtoa_r+0xb12>
 8009c8c:	3201      	adds	r2, #1
 8009c8e:	701a      	strb	r2, [r3, #0]
 8009c90:	e612      	b.n	80098b8 <_dtoa_r+0x698>
 8009c92:	2a00      	cmp	r2, #0
 8009c94:	dd07      	ble.n	8009ca6 <_dtoa_r+0xa86>
 8009c96:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009c9a:	d0ed      	beq.n	8009c78 <_dtoa_r+0xa58>
 8009c9c:	9a00      	ldr	r2, [sp, #0]
 8009c9e:	f108 0301 	add.w	r3, r8, #1
 8009ca2:	7013      	strb	r3, [r2, #0]
 8009ca4:	e608      	b.n	80098b8 <_dtoa_r+0x698>
 8009ca6:	9b07      	ldr	r3, [sp, #28]
 8009ca8:	9a07      	ldr	r2, [sp, #28]
 8009caa:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009cae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009cb0:	4293      	cmp	r3, r2
 8009cb2:	d028      	beq.n	8009d06 <_dtoa_r+0xae6>
 8009cb4:	4649      	mov	r1, r9
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	220a      	movs	r2, #10
 8009cba:	4658      	mov	r0, fp
 8009cbc:	f000 f9d6 	bl	800a06c <__multadd>
 8009cc0:	42af      	cmp	r7, r5
 8009cc2:	4681      	mov	r9, r0
 8009cc4:	f04f 0300 	mov.w	r3, #0
 8009cc8:	f04f 020a 	mov.w	r2, #10
 8009ccc:	4639      	mov	r1, r7
 8009cce:	4658      	mov	r0, fp
 8009cd0:	d107      	bne.n	8009ce2 <_dtoa_r+0xac2>
 8009cd2:	f000 f9cb 	bl	800a06c <__multadd>
 8009cd6:	4607      	mov	r7, r0
 8009cd8:	4605      	mov	r5, r0
 8009cda:	9b07      	ldr	r3, [sp, #28]
 8009cdc:	3301      	adds	r3, #1
 8009cde:	9307      	str	r3, [sp, #28]
 8009ce0:	e774      	b.n	8009bcc <_dtoa_r+0x9ac>
 8009ce2:	f000 f9c3 	bl	800a06c <__multadd>
 8009ce6:	4629      	mov	r1, r5
 8009ce8:	4607      	mov	r7, r0
 8009cea:	2300      	movs	r3, #0
 8009cec:	220a      	movs	r2, #10
 8009cee:	4658      	mov	r0, fp
 8009cf0:	f000 f9bc 	bl	800a06c <__multadd>
 8009cf4:	4605      	mov	r5, r0
 8009cf6:	e7f0      	b.n	8009cda <_dtoa_r+0xaba>
 8009cf8:	9b00      	ldr	r3, [sp, #0]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	bfcc      	ite	gt
 8009cfe:	461e      	movgt	r6, r3
 8009d00:	2601      	movle	r6, #1
 8009d02:	4456      	add	r6, sl
 8009d04:	2700      	movs	r7, #0
 8009d06:	4649      	mov	r1, r9
 8009d08:	2201      	movs	r2, #1
 8009d0a:	4658      	mov	r0, fp
 8009d0c:	f000 fb5a 	bl	800a3c4 <__lshift>
 8009d10:	4621      	mov	r1, r4
 8009d12:	4681      	mov	r9, r0
 8009d14:	f000 fbc2 	bl	800a49c <__mcmp>
 8009d18:	2800      	cmp	r0, #0
 8009d1a:	dcb0      	bgt.n	8009c7e <_dtoa_r+0xa5e>
 8009d1c:	d102      	bne.n	8009d24 <_dtoa_r+0xb04>
 8009d1e:	f018 0f01 	tst.w	r8, #1
 8009d22:	d1ac      	bne.n	8009c7e <_dtoa_r+0xa5e>
 8009d24:	4633      	mov	r3, r6
 8009d26:	461e      	mov	r6, r3
 8009d28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009d2c:	2a30      	cmp	r2, #48	@ 0x30
 8009d2e:	d0fa      	beq.n	8009d26 <_dtoa_r+0xb06>
 8009d30:	e5c2      	b.n	80098b8 <_dtoa_r+0x698>
 8009d32:	459a      	cmp	sl, r3
 8009d34:	d1a4      	bne.n	8009c80 <_dtoa_r+0xa60>
 8009d36:	9b04      	ldr	r3, [sp, #16]
 8009d38:	3301      	adds	r3, #1
 8009d3a:	9304      	str	r3, [sp, #16]
 8009d3c:	2331      	movs	r3, #49	@ 0x31
 8009d3e:	f88a 3000 	strb.w	r3, [sl]
 8009d42:	e5b9      	b.n	80098b8 <_dtoa_r+0x698>
 8009d44:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009d46:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009da4 <_dtoa_r+0xb84>
 8009d4a:	b11b      	cbz	r3, 8009d54 <_dtoa_r+0xb34>
 8009d4c:	f10a 0308 	add.w	r3, sl, #8
 8009d50:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009d52:	6013      	str	r3, [r2, #0]
 8009d54:	4650      	mov	r0, sl
 8009d56:	b019      	add	sp, #100	@ 0x64
 8009d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d5e:	2b01      	cmp	r3, #1
 8009d60:	f77f ae37 	ble.w	80099d2 <_dtoa_r+0x7b2>
 8009d64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d66:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d68:	2001      	movs	r0, #1
 8009d6a:	e655      	b.n	8009a18 <_dtoa_r+0x7f8>
 8009d6c:	9b00      	ldr	r3, [sp, #0]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	f77f aed6 	ble.w	8009b20 <_dtoa_r+0x900>
 8009d74:	4656      	mov	r6, sl
 8009d76:	4621      	mov	r1, r4
 8009d78:	4648      	mov	r0, r9
 8009d7a:	f7ff f9c6 	bl	800910a <quorem>
 8009d7e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009d82:	f806 8b01 	strb.w	r8, [r6], #1
 8009d86:	9b00      	ldr	r3, [sp, #0]
 8009d88:	eba6 020a 	sub.w	r2, r6, sl
 8009d8c:	4293      	cmp	r3, r2
 8009d8e:	ddb3      	ble.n	8009cf8 <_dtoa_r+0xad8>
 8009d90:	4649      	mov	r1, r9
 8009d92:	2300      	movs	r3, #0
 8009d94:	220a      	movs	r2, #10
 8009d96:	4658      	mov	r0, fp
 8009d98:	f000 f968 	bl	800a06c <__multadd>
 8009d9c:	4681      	mov	r9, r0
 8009d9e:	e7ea      	b.n	8009d76 <_dtoa_r+0xb56>
 8009da0:	0800cec0 	.word	0x0800cec0
 8009da4:	0800ce44 	.word	0x0800ce44

08009da8 <_free_r>:
 8009da8:	b538      	push	{r3, r4, r5, lr}
 8009daa:	4605      	mov	r5, r0
 8009dac:	2900      	cmp	r1, #0
 8009dae:	d041      	beq.n	8009e34 <_free_r+0x8c>
 8009db0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009db4:	1f0c      	subs	r4, r1, #4
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	bfb8      	it	lt
 8009dba:	18e4      	addlt	r4, r4, r3
 8009dbc:	f000 f8e8 	bl	8009f90 <__malloc_lock>
 8009dc0:	4a1d      	ldr	r2, [pc, #116]	@ (8009e38 <_free_r+0x90>)
 8009dc2:	6813      	ldr	r3, [r2, #0]
 8009dc4:	b933      	cbnz	r3, 8009dd4 <_free_r+0x2c>
 8009dc6:	6063      	str	r3, [r4, #4]
 8009dc8:	6014      	str	r4, [r2, #0]
 8009dca:	4628      	mov	r0, r5
 8009dcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009dd0:	f000 b8e4 	b.w	8009f9c <__malloc_unlock>
 8009dd4:	42a3      	cmp	r3, r4
 8009dd6:	d908      	bls.n	8009dea <_free_r+0x42>
 8009dd8:	6820      	ldr	r0, [r4, #0]
 8009dda:	1821      	adds	r1, r4, r0
 8009ddc:	428b      	cmp	r3, r1
 8009dde:	bf01      	itttt	eq
 8009de0:	6819      	ldreq	r1, [r3, #0]
 8009de2:	685b      	ldreq	r3, [r3, #4]
 8009de4:	1809      	addeq	r1, r1, r0
 8009de6:	6021      	streq	r1, [r4, #0]
 8009de8:	e7ed      	b.n	8009dc6 <_free_r+0x1e>
 8009dea:	461a      	mov	r2, r3
 8009dec:	685b      	ldr	r3, [r3, #4]
 8009dee:	b10b      	cbz	r3, 8009df4 <_free_r+0x4c>
 8009df0:	42a3      	cmp	r3, r4
 8009df2:	d9fa      	bls.n	8009dea <_free_r+0x42>
 8009df4:	6811      	ldr	r1, [r2, #0]
 8009df6:	1850      	adds	r0, r2, r1
 8009df8:	42a0      	cmp	r0, r4
 8009dfa:	d10b      	bne.n	8009e14 <_free_r+0x6c>
 8009dfc:	6820      	ldr	r0, [r4, #0]
 8009dfe:	4401      	add	r1, r0
 8009e00:	1850      	adds	r0, r2, r1
 8009e02:	4283      	cmp	r3, r0
 8009e04:	6011      	str	r1, [r2, #0]
 8009e06:	d1e0      	bne.n	8009dca <_free_r+0x22>
 8009e08:	6818      	ldr	r0, [r3, #0]
 8009e0a:	685b      	ldr	r3, [r3, #4]
 8009e0c:	6053      	str	r3, [r2, #4]
 8009e0e:	4408      	add	r0, r1
 8009e10:	6010      	str	r0, [r2, #0]
 8009e12:	e7da      	b.n	8009dca <_free_r+0x22>
 8009e14:	d902      	bls.n	8009e1c <_free_r+0x74>
 8009e16:	230c      	movs	r3, #12
 8009e18:	602b      	str	r3, [r5, #0]
 8009e1a:	e7d6      	b.n	8009dca <_free_r+0x22>
 8009e1c:	6820      	ldr	r0, [r4, #0]
 8009e1e:	1821      	adds	r1, r4, r0
 8009e20:	428b      	cmp	r3, r1
 8009e22:	bf04      	itt	eq
 8009e24:	6819      	ldreq	r1, [r3, #0]
 8009e26:	685b      	ldreq	r3, [r3, #4]
 8009e28:	6063      	str	r3, [r4, #4]
 8009e2a:	bf04      	itt	eq
 8009e2c:	1809      	addeq	r1, r1, r0
 8009e2e:	6021      	streq	r1, [r4, #0]
 8009e30:	6054      	str	r4, [r2, #4]
 8009e32:	e7ca      	b.n	8009dca <_free_r+0x22>
 8009e34:	bd38      	pop	{r3, r4, r5, pc}
 8009e36:	bf00      	nop
 8009e38:	20000e04 	.word	0x20000e04

08009e3c <malloc>:
 8009e3c:	4b02      	ldr	r3, [pc, #8]	@ (8009e48 <malloc+0xc>)
 8009e3e:	4601      	mov	r1, r0
 8009e40:	6818      	ldr	r0, [r3, #0]
 8009e42:	f000 b825 	b.w	8009e90 <_malloc_r>
 8009e46:	bf00      	nop
 8009e48:	20000074 	.word	0x20000074

08009e4c <sbrk_aligned>:
 8009e4c:	b570      	push	{r4, r5, r6, lr}
 8009e4e:	4e0f      	ldr	r6, [pc, #60]	@ (8009e8c <sbrk_aligned+0x40>)
 8009e50:	460c      	mov	r4, r1
 8009e52:	6831      	ldr	r1, [r6, #0]
 8009e54:	4605      	mov	r5, r0
 8009e56:	b911      	cbnz	r1, 8009e5e <sbrk_aligned+0x12>
 8009e58:	f001 fb9a 	bl	800b590 <_sbrk_r>
 8009e5c:	6030      	str	r0, [r6, #0]
 8009e5e:	4621      	mov	r1, r4
 8009e60:	4628      	mov	r0, r5
 8009e62:	f001 fb95 	bl	800b590 <_sbrk_r>
 8009e66:	1c43      	adds	r3, r0, #1
 8009e68:	d103      	bne.n	8009e72 <sbrk_aligned+0x26>
 8009e6a:	f04f 34ff 	mov.w	r4, #4294967295
 8009e6e:	4620      	mov	r0, r4
 8009e70:	bd70      	pop	{r4, r5, r6, pc}
 8009e72:	1cc4      	adds	r4, r0, #3
 8009e74:	f024 0403 	bic.w	r4, r4, #3
 8009e78:	42a0      	cmp	r0, r4
 8009e7a:	d0f8      	beq.n	8009e6e <sbrk_aligned+0x22>
 8009e7c:	1a21      	subs	r1, r4, r0
 8009e7e:	4628      	mov	r0, r5
 8009e80:	f001 fb86 	bl	800b590 <_sbrk_r>
 8009e84:	3001      	adds	r0, #1
 8009e86:	d1f2      	bne.n	8009e6e <sbrk_aligned+0x22>
 8009e88:	e7ef      	b.n	8009e6a <sbrk_aligned+0x1e>
 8009e8a:	bf00      	nop
 8009e8c:	20000e00 	.word	0x20000e00

08009e90 <_malloc_r>:
 8009e90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e94:	1ccd      	adds	r5, r1, #3
 8009e96:	f025 0503 	bic.w	r5, r5, #3
 8009e9a:	3508      	adds	r5, #8
 8009e9c:	2d0c      	cmp	r5, #12
 8009e9e:	bf38      	it	cc
 8009ea0:	250c      	movcc	r5, #12
 8009ea2:	2d00      	cmp	r5, #0
 8009ea4:	4606      	mov	r6, r0
 8009ea6:	db01      	blt.n	8009eac <_malloc_r+0x1c>
 8009ea8:	42a9      	cmp	r1, r5
 8009eaa:	d904      	bls.n	8009eb6 <_malloc_r+0x26>
 8009eac:	230c      	movs	r3, #12
 8009eae:	6033      	str	r3, [r6, #0]
 8009eb0:	2000      	movs	r0, #0
 8009eb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009eb6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009f8c <_malloc_r+0xfc>
 8009eba:	f000 f869 	bl	8009f90 <__malloc_lock>
 8009ebe:	f8d8 3000 	ldr.w	r3, [r8]
 8009ec2:	461c      	mov	r4, r3
 8009ec4:	bb44      	cbnz	r4, 8009f18 <_malloc_r+0x88>
 8009ec6:	4629      	mov	r1, r5
 8009ec8:	4630      	mov	r0, r6
 8009eca:	f7ff ffbf 	bl	8009e4c <sbrk_aligned>
 8009ece:	1c43      	adds	r3, r0, #1
 8009ed0:	4604      	mov	r4, r0
 8009ed2:	d158      	bne.n	8009f86 <_malloc_r+0xf6>
 8009ed4:	f8d8 4000 	ldr.w	r4, [r8]
 8009ed8:	4627      	mov	r7, r4
 8009eda:	2f00      	cmp	r7, #0
 8009edc:	d143      	bne.n	8009f66 <_malloc_r+0xd6>
 8009ede:	2c00      	cmp	r4, #0
 8009ee0:	d04b      	beq.n	8009f7a <_malloc_r+0xea>
 8009ee2:	6823      	ldr	r3, [r4, #0]
 8009ee4:	4639      	mov	r1, r7
 8009ee6:	4630      	mov	r0, r6
 8009ee8:	eb04 0903 	add.w	r9, r4, r3
 8009eec:	f001 fb50 	bl	800b590 <_sbrk_r>
 8009ef0:	4581      	cmp	r9, r0
 8009ef2:	d142      	bne.n	8009f7a <_malloc_r+0xea>
 8009ef4:	6821      	ldr	r1, [r4, #0]
 8009ef6:	1a6d      	subs	r5, r5, r1
 8009ef8:	4629      	mov	r1, r5
 8009efa:	4630      	mov	r0, r6
 8009efc:	f7ff ffa6 	bl	8009e4c <sbrk_aligned>
 8009f00:	3001      	adds	r0, #1
 8009f02:	d03a      	beq.n	8009f7a <_malloc_r+0xea>
 8009f04:	6823      	ldr	r3, [r4, #0]
 8009f06:	442b      	add	r3, r5
 8009f08:	6023      	str	r3, [r4, #0]
 8009f0a:	f8d8 3000 	ldr.w	r3, [r8]
 8009f0e:	685a      	ldr	r2, [r3, #4]
 8009f10:	bb62      	cbnz	r2, 8009f6c <_malloc_r+0xdc>
 8009f12:	f8c8 7000 	str.w	r7, [r8]
 8009f16:	e00f      	b.n	8009f38 <_malloc_r+0xa8>
 8009f18:	6822      	ldr	r2, [r4, #0]
 8009f1a:	1b52      	subs	r2, r2, r5
 8009f1c:	d420      	bmi.n	8009f60 <_malloc_r+0xd0>
 8009f1e:	2a0b      	cmp	r2, #11
 8009f20:	d917      	bls.n	8009f52 <_malloc_r+0xc2>
 8009f22:	1961      	adds	r1, r4, r5
 8009f24:	42a3      	cmp	r3, r4
 8009f26:	6025      	str	r5, [r4, #0]
 8009f28:	bf18      	it	ne
 8009f2a:	6059      	strne	r1, [r3, #4]
 8009f2c:	6863      	ldr	r3, [r4, #4]
 8009f2e:	bf08      	it	eq
 8009f30:	f8c8 1000 	streq.w	r1, [r8]
 8009f34:	5162      	str	r2, [r4, r5]
 8009f36:	604b      	str	r3, [r1, #4]
 8009f38:	4630      	mov	r0, r6
 8009f3a:	f000 f82f 	bl	8009f9c <__malloc_unlock>
 8009f3e:	f104 000b 	add.w	r0, r4, #11
 8009f42:	1d23      	adds	r3, r4, #4
 8009f44:	f020 0007 	bic.w	r0, r0, #7
 8009f48:	1ac2      	subs	r2, r0, r3
 8009f4a:	bf1c      	itt	ne
 8009f4c:	1a1b      	subne	r3, r3, r0
 8009f4e:	50a3      	strne	r3, [r4, r2]
 8009f50:	e7af      	b.n	8009eb2 <_malloc_r+0x22>
 8009f52:	6862      	ldr	r2, [r4, #4]
 8009f54:	42a3      	cmp	r3, r4
 8009f56:	bf0c      	ite	eq
 8009f58:	f8c8 2000 	streq.w	r2, [r8]
 8009f5c:	605a      	strne	r2, [r3, #4]
 8009f5e:	e7eb      	b.n	8009f38 <_malloc_r+0xa8>
 8009f60:	4623      	mov	r3, r4
 8009f62:	6864      	ldr	r4, [r4, #4]
 8009f64:	e7ae      	b.n	8009ec4 <_malloc_r+0x34>
 8009f66:	463c      	mov	r4, r7
 8009f68:	687f      	ldr	r7, [r7, #4]
 8009f6a:	e7b6      	b.n	8009eda <_malloc_r+0x4a>
 8009f6c:	461a      	mov	r2, r3
 8009f6e:	685b      	ldr	r3, [r3, #4]
 8009f70:	42a3      	cmp	r3, r4
 8009f72:	d1fb      	bne.n	8009f6c <_malloc_r+0xdc>
 8009f74:	2300      	movs	r3, #0
 8009f76:	6053      	str	r3, [r2, #4]
 8009f78:	e7de      	b.n	8009f38 <_malloc_r+0xa8>
 8009f7a:	230c      	movs	r3, #12
 8009f7c:	6033      	str	r3, [r6, #0]
 8009f7e:	4630      	mov	r0, r6
 8009f80:	f000 f80c 	bl	8009f9c <__malloc_unlock>
 8009f84:	e794      	b.n	8009eb0 <_malloc_r+0x20>
 8009f86:	6005      	str	r5, [r0, #0]
 8009f88:	e7d6      	b.n	8009f38 <_malloc_r+0xa8>
 8009f8a:	bf00      	nop
 8009f8c:	20000e04 	.word	0x20000e04

08009f90 <__malloc_lock>:
 8009f90:	4801      	ldr	r0, [pc, #4]	@ (8009f98 <__malloc_lock+0x8>)
 8009f92:	f7ff b8aa 	b.w	80090ea <__retarget_lock_acquire_recursive>
 8009f96:	bf00      	nop
 8009f98:	20000dfc 	.word	0x20000dfc

08009f9c <__malloc_unlock>:
 8009f9c:	4801      	ldr	r0, [pc, #4]	@ (8009fa4 <__malloc_unlock+0x8>)
 8009f9e:	f7ff b8a5 	b.w	80090ec <__retarget_lock_release_recursive>
 8009fa2:	bf00      	nop
 8009fa4:	20000dfc 	.word	0x20000dfc

08009fa8 <_Balloc>:
 8009fa8:	b570      	push	{r4, r5, r6, lr}
 8009faa:	69c6      	ldr	r6, [r0, #28]
 8009fac:	4604      	mov	r4, r0
 8009fae:	460d      	mov	r5, r1
 8009fb0:	b976      	cbnz	r6, 8009fd0 <_Balloc+0x28>
 8009fb2:	2010      	movs	r0, #16
 8009fb4:	f7ff ff42 	bl	8009e3c <malloc>
 8009fb8:	4602      	mov	r2, r0
 8009fba:	61e0      	str	r0, [r4, #28]
 8009fbc:	b920      	cbnz	r0, 8009fc8 <_Balloc+0x20>
 8009fbe:	4b18      	ldr	r3, [pc, #96]	@ (800a020 <_Balloc+0x78>)
 8009fc0:	4818      	ldr	r0, [pc, #96]	@ (800a024 <_Balloc+0x7c>)
 8009fc2:	216b      	movs	r1, #107	@ 0x6b
 8009fc4:	f001 faf4 	bl	800b5b0 <__assert_func>
 8009fc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009fcc:	6006      	str	r6, [r0, #0]
 8009fce:	60c6      	str	r6, [r0, #12]
 8009fd0:	69e6      	ldr	r6, [r4, #28]
 8009fd2:	68f3      	ldr	r3, [r6, #12]
 8009fd4:	b183      	cbz	r3, 8009ff8 <_Balloc+0x50>
 8009fd6:	69e3      	ldr	r3, [r4, #28]
 8009fd8:	68db      	ldr	r3, [r3, #12]
 8009fda:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009fde:	b9b8      	cbnz	r0, 800a010 <_Balloc+0x68>
 8009fe0:	2101      	movs	r1, #1
 8009fe2:	fa01 f605 	lsl.w	r6, r1, r5
 8009fe6:	1d72      	adds	r2, r6, #5
 8009fe8:	0092      	lsls	r2, r2, #2
 8009fea:	4620      	mov	r0, r4
 8009fec:	f001 fafe 	bl	800b5ec <_calloc_r>
 8009ff0:	b160      	cbz	r0, 800a00c <_Balloc+0x64>
 8009ff2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009ff6:	e00e      	b.n	800a016 <_Balloc+0x6e>
 8009ff8:	2221      	movs	r2, #33	@ 0x21
 8009ffa:	2104      	movs	r1, #4
 8009ffc:	4620      	mov	r0, r4
 8009ffe:	f001 faf5 	bl	800b5ec <_calloc_r>
 800a002:	69e3      	ldr	r3, [r4, #28]
 800a004:	60f0      	str	r0, [r6, #12]
 800a006:	68db      	ldr	r3, [r3, #12]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d1e4      	bne.n	8009fd6 <_Balloc+0x2e>
 800a00c:	2000      	movs	r0, #0
 800a00e:	bd70      	pop	{r4, r5, r6, pc}
 800a010:	6802      	ldr	r2, [r0, #0]
 800a012:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a016:	2300      	movs	r3, #0
 800a018:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a01c:	e7f7      	b.n	800a00e <_Balloc+0x66>
 800a01e:	bf00      	nop
 800a020:	0800ce51 	.word	0x0800ce51
 800a024:	0800ced1 	.word	0x0800ced1

0800a028 <_Bfree>:
 800a028:	b570      	push	{r4, r5, r6, lr}
 800a02a:	69c6      	ldr	r6, [r0, #28]
 800a02c:	4605      	mov	r5, r0
 800a02e:	460c      	mov	r4, r1
 800a030:	b976      	cbnz	r6, 800a050 <_Bfree+0x28>
 800a032:	2010      	movs	r0, #16
 800a034:	f7ff ff02 	bl	8009e3c <malloc>
 800a038:	4602      	mov	r2, r0
 800a03a:	61e8      	str	r0, [r5, #28]
 800a03c:	b920      	cbnz	r0, 800a048 <_Bfree+0x20>
 800a03e:	4b09      	ldr	r3, [pc, #36]	@ (800a064 <_Bfree+0x3c>)
 800a040:	4809      	ldr	r0, [pc, #36]	@ (800a068 <_Bfree+0x40>)
 800a042:	218f      	movs	r1, #143	@ 0x8f
 800a044:	f001 fab4 	bl	800b5b0 <__assert_func>
 800a048:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a04c:	6006      	str	r6, [r0, #0]
 800a04e:	60c6      	str	r6, [r0, #12]
 800a050:	b13c      	cbz	r4, 800a062 <_Bfree+0x3a>
 800a052:	69eb      	ldr	r3, [r5, #28]
 800a054:	6862      	ldr	r2, [r4, #4]
 800a056:	68db      	ldr	r3, [r3, #12]
 800a058:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a05c:	6021      	str	r1, [r4, #0]
 800a05e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a062:	bd70      	pop	{r4, r5, r6, pc}
 800a064:	0800ce51 	.word	0x0800ce51
 800a068:	0800ced1 	.word	0x0800ced1

0800a06c <__multadd>:
 800a06c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a070:	690d      	ldr	r5, [r1, #16]
 800a072:	4607      	mov	r7, r0
 800a074:	460c      	mov	r4, r1
 800a076:	461e      	mov	r6, r3
 800a078:	f101 0c14 	add.w	ip, r1, #20
 800a07c:	2000      	movs	r0, #0
 800a07e:	f8dc 3000 	ldr.w	r3, [ip]
 800a082:	b299      	uxth	r1, r3
 800a084:	fb02 6101 	mla	r1, r2, r1, r6
 800a088:	0c1e      	lsrs	r6, r3, #16
 800a08a:	0c0b      	lsrs	r3, r1, #16
 800a08c:	fb02 3306 	mla	r3, r2, r6, r3
 800a090:	b289      	uxth	r1, r1
 800a092:	3001      	adds	r0, #1
 800a094:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a098:	4285      	cmp	r5, r0
 800a09a:	f84c 1b04 	str.w	r1, [ip], #4
 800a09e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a0a2:	dcec      	bgt.n	800a07e <__multadd+0x12>
 800a0a4:	b30e      	cbz	r6, 800a0ea <__multadd+0x7e>
 800a0a6:	68a3      	ldr	r3, [r4, #8]
 800a0a8:	42ab      	cmp	r3, r5
 800a0aa:	dc19      	bgt.n	800a0e0 <__multadd+0x74>
 800a0ac:	6861      	ldr	r1, [r4, #4]
 800a0ae:	4638      	mov	r0, r7
 800a0b0:	3101      	adds	r1, #1
 800a0b2:	f7ff ff79 	bl	8009fa8 <_Balloc>
 800a0b6:	4680      	mov	r8, r0
 800a0b8:	b928      	cbnz	r0, 800a0c6 <__multadd+0x5a>
 800a0ba:	4602      	mov	r2, r0
 800a0bc:	4b0c      	ldr	r3, [pc, #48]	@ (800a0f0 <__multadd+0x84>)
 800a0be:	480d      	ldr	r0, [pc, #52]	@ (800a0f4 <__multadd+0x88>)
 800a0c0:	21ba      	movs	r1, #186	@ 0xba
 800a0c2:	f001 fa75 	bl	800b5b0 <__assert_func>
 800a0c6:	6922      	ldr	r2, [r4, #16]
 800a0c8:	3202      	adds	r2, #2
 800a0ca:	f104 010c 	add.w	r1, r4, #12
 800a0ce:	0092      	lsls	r2, r2, #2
 800a0d0:	300c      	adds	r0, #12
 800a0d2:	f7ff f80c 	bl	80090ee <memcpy>
 800a0d6:	4621      	mov	r1, r4
 800a0d8:	4638      	mov	r0, r7
 800a0da:	f7ff ffa5 	bl	800a028 <_Bfree>
 800a0de:	4644      	mov	r4, r8
 800a0e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a0e4:	3501      	adds	r5, #1
 800a0e6:	615e      	str	r6, [r3, #20]
 800a0e8:	6125      	str	r5, [r4, #16]
 800a0ea:	4620      	mov	r0, r4
 800a0ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0f0:	0800cec0 	.word	0x0800cec0
 800a0f4:	0800ced1 	.word	0x0800ced1

0800a0f8 <__hi0bits>:
 800a0f8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	bf36      	itet	cc
 800a100:	0403      	lslcc	r3, r0, #16
 800a102:	2000      	movcs	r0, #0
 800a104:	2010      	movcc	r0, #16
 800a106:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a10a:	bf3c      	itt	cc
 800a10c:	021b      	lslcc	r3, r3, #8
 800a10e:	3008      	addcc	r0, #8
 800a110:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a114:	bf3c      	itt	cc
 800a116:	011b      	lslcc	r3, r3, #4
 800a118:	3004      	addcc	r0, #4
 800a11a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a11e:	bf3c      	itt	cc
 800a120:	009b      	lslcc	r3, r3, #2
 800a122:	3002      	addcc	r0, #2
 800a124:	2b00      	cmp	r3, #0
 800a126:	db05      	blt.n	800a134 <__hi0bits+0x3c>
 800a128:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a12c:	f100 0001 	add.w	r0, r0, #1
 800a130:	bf08      	it	eq
 800a132:	2020      	moveq	r0, #32
 800a134:	4770      	bx	lr

0800a136 <__lo0bits>:
 800a136:	6803      	ldr	r3, [r0, #0]
 800a138:	4602      	mov	r2, r0
 800a13a:	f013 0007 	ands.w	r0, r3, #7
 800a13e:	d00b      	beq.n	800a158 <__lo0bits+0x22>
 800a140:	07d9      	lsls	r1, r3, #31
 800a142:	d421      	bmi.n	800a188 <__lo0bits+0x52>
 800a144:	0798      	lsls	r0, r3, #30
 800a146:	bf49      	itett	mi
 800a148:	085b      	lsrmi	r3, r3, #1
 800a14a:	089b      	lsrpl	r3, r3, #2
 800a14c:	2001      	movmi	r0, #1
 800a14e:	6013      	strmi	r3, [r2, #0]
 800a150:	bf5c      	itt	pl
 800a152:	6013      	strpl	r3, [r2, #0]
 800a154:	2002      	movpl	r0, #2
 800a156:	4770      	bx	lr
 800a158:	b299      	uxth	r1, r3
 800a15a:	b909      	cbnz	r1, 800a160 <__lo0bits+0x2a>
 800a15c:	0c1b      	lsrs	r3, r3, #16
 800a15e:	2010      	movs	r0, #16
 800a160:	b2d9      	uxtb	r1, r3
 800a162:	b909      	cbnz	r1, 800a168 <__lo0bits+0x32>
 800a164:	3008      	adds	r0, #8
 800a166:	0a1b      	lsrs	r3, r3, #8
 800a168:	0719      	lsls	r1, r3, #28
 800a16a:	bf04      	itt	eq
 800a16c:	091b      	lsreq	r3, r3, #4
 800a16e:	3004      	addeq	r0, #4
 800a170:	0799      	lsls	r1, r3, #30
 800a172:	bf04      	itt	eq
 800a174:	089b      	lsreq	r3, r3, #2
 800a176:	3002      	addeq	r0, #2
 800a178:	07d9      	lsls	r1, r3, #31
 800a17a:	d403      	bmi.n	800a184 <__lo0bits+0x4e>
 800a17c:	085b      	lsrs	r3, r3, #1
 800a17e:	f100 0001 	add.w	r0, r0, #1
 800a182:	d003      	beq.n	800a18c <__lo0bits+0x56>
 800a184:	6013      	str	r3, [r2, #0]
 800a186:	4770      	bx	lr
 800a188:	2000      	movs	r0, #0
 800a18a:	4770      	bx	lr
 800a18c:	2020      	movs	r0, #32
 800a18e:	4770      	bx	lr

0800a190 <__i2b>:
 800a190:	b510      	push	{r4, lr}
 800a192:	460c      	mov	r4, r1
 800a194:	2101      	movs	r1, #1
 800a196:	f7ff ff07 	bl	8009fa8 <_Balloc>
 800a19a:	4602      	mov	r2, r0
 800a19c:	b928      	cbnz	r0, 800a1aa <__i2b+0x1a>
 800a19e:	4b05      	ldr	r3, [pc, #20]	@ (800a1b4 <__i2b+0x24>)
 800a1a0:	4805      	ldr	r0, [pc, #20]	@ (800a1b8 <__i2b+0x28>)
 800a1a2:	f240 1145 	movw	r1, #325	@ 0x145
 800a1a6:	f001 fa03 	bl	800b5b0 <__assert_func>
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	6144      	str	r4, [r0, #20]
 800a1ae:	6103      	str	r3, [r0, #16]
 800a1b0:	bd10      	pop	{r4, pc}
 800a1b2:	bf00      	nop
 800a1b4:	0800cec0 	.word	0x0800cec0
 800a1b8:	0800ced1 	.word	0x0800ced1

0800a1bc <__multiply>:
 800a1bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1c0:	4614      	mov	r4, r2
 800a1c2:	690a      	ldr	r2, [r1, #16]
 800a1c4:	6923      	ldr	r3, [r4, #16]
 800a1c6:	429a      	cmp	r2, r3
 800a1c8:	bfa8      	it	ge
 800a1ca:	4623      	movge	r3, r4
 800a1cc:	460f      	mov	r7, r1
 800a1ce:	bfa4      	itt	ge
 800a1d0:	460c      	movge	r4, r1
 800a1d2:	461f      	movge	r7, r3
 800a1d4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a1d8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a1dc:	68a3      	ldr	r3, [r4, #8]
 800a1de:	6861      	ldr	r1, [r4, #4]
 800a1e0:	eb0a 0609 	add.w	r6, sl, r9
 800a1e4:	42b3      	cmp	r3, r6
 800a1e6:	b085      	sub	sp, #20
 800a1e8:	bfb8      	it	lt
 800a1ea:	3101      	addlt	r1, #1
 800a1ec:	f7ff fedc 	bl	8009fa8 <_Balloc>
 800a1f0:	b930      	cbnz	r0, 800a200 <__multiply+0x44>
 800a1f2:	4602      	mov	r2, r0
 800a1f4:	4b44      	ldr	r3, [pc, #272]	@ (800a308 <__multiply+0x14c>)
 800a1f6:	4845      	ldr	r0, [pc, #276]	@ (800a30c <__multiply+0x150>)
 800a1f8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a1fc:	f001 f9d8 	bl	800b5b0 <__assert_func>
 800a200:	f100 0514 	add.w	r5, r0, #20
 800a204:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a208:	462b      	mov	r3, r5
 800a20a:	2200      	movs	r2, #0
 800a20c:	4543      	cmp	r3, r8
 800a20e:	d321      	bcc.n	800a254 <__multiply+0x98>
 800a210:	f107 0114 	add.w	r1, r7, #20
 800a214:	f104 0214 	add.w	r2, r4, #20
 800a218:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a21c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a220:	9302      	str	r3, [sp, #8]
 800a222:	1b13      	subs	r3, r2, r4
 800a224:	3b15      	subs	r3, #21
 800a226:	f023 0303 	bic.w	r3, r3, #3
 800a22a:	3304      	adds	r3, #4
 800a22c:	f104 0715 	add.w	r7, r4, #21
 800a230:	42ba      	cmp	r2, r7
 800a232:	bf38      	it	cc
 800a234:	2304      	movcc	r3, #4
 800a236:	9301      	str	r3, [sp, #4]
 800a238:	9b02      	ldr	r3, [sp, #8]
 800a23a:	9103      	str	r1, [sp, #12]
 800a23c:	428b      	cmp	r3, r1
 800a23e:	d80c      	bhi.n	800a25a <__multiply+0x9e>
 800a240:	2e00      	cmp	r6, #0
 800a242:	dd03      	ble.n	800a24c <__multiply+0x90>
 800a244:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d05b      	beq.n	800a304 <__multiply+0x148>
 800a24c:	6106      	str	r6, [r0, #16]
 800a24e:	b005      	add	sp, #20
 800a250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a254:	f843 2b04 	str.w	r2, [r3], #4
 800a258:	e7d8      	b.n	800a20c <__multiply+0x50>
 800a25a:	f8b1 a000 	ldrh.w	sl, [r1]
 800a25e:	f1ba 0f00 	cmp.w	sl, #0
 800a262:	d024      	beq.n	800a2ae <__multiply+0xf2>
 800a264:	f104 0e14 	add.w	lr, r4, #20
 800a268:	46a9      	mov	r9, r5
 800a26a:	f04f 0c00 	mov.w	ip, #0
 800a26e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a272:	f8d9 3000 	ldr.w	r3, [r9]
 800a276:	fa1f fb87 	uxth.w	fp, r7
 800a27a:	b29b      	uxth	r3, r3
 800a27c:	fb0a 330b 	mla	r3, sl, fp, r3
 800a280:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a284:	f8d9 7000 	ldr.w	r7, [r9]
 800a288:	4463      	add	r3, ip
 800a28a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a28e:	fb0a c70b 	mla	r7, sl, fp, ip
 800a292:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a296:	b29b      	uxth	r3, r3
 800a298:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a29c:	4572      	cmp	r2, lr
 800a29e:	f849 3b04 	str.w	r3, [r9], #4
 800a2a2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a2a6:	d8e2      	bhi.n	800a26e <__multiply+0xb2>
 800a2a8:	9b01      	ldr	r3, [sp, #4]
 800a2aa:	f845 c003 	str.w	ip, [r5, r3]
 800a2ae:	9b03      	ldr	r3, [sp, #12]
 800a2b0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a2b4:	3104      	adds	r1, #4
 800a2b6:	f1b9 0f00 	cmp.w	r9, #0
 800a2ba:	d021      	beq.n	800a300 <__multiply+0x144>
 800a2bc:	682b      	ldr	r3, [r5, #0]
 800a2be:	f104 0c14 	add.w	ip, r4, #20
 800a2c2:	46ae      	mov	lr, r5
 800a2c4:	f04f 0a00 	mov.w	sl, #0
 800a2c8:	f8bc b000 	ldrh.w	fp, [ip]
 800a2cc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a2d0:	fb09 770b 	mla	r7, r9, fp, r7
 800a2d4:	4457      	add	r7, sl
 800a2d6:	b29b      	uxth	r3, r3
 800a2d8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a2dc:	f84e 3b04 	str.w	r3, [lr], #4
 800a2e0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a2e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a2e8:	f8be 3000 	ldrh.w	r3, [lr]
 800a2ec:	fb09 330a 	mla	r3, r9, sl, r3
 800a2f0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a2f4:	4562      	cmp	r2, ip
 800a2f6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a2fa:	d8e5      	bhi.n	800a2c8 <__multiply+0x10c>
 800a2fc:	9f01      	ldr	r7, [sp, #4]
 800a2fe:	51eb      	str	r3, [r5, r7]
 800a300:	3504      	adds	r5, #4
 800a302:	e799      	b.n	800a238 <__multiply+0x7c>
 800a304:	3e01      	subs	r6, #1
 800a306:	e79b      	b.n	800a240 <__multiply+0x84>
 800a308:	0800cec0 	.word	0x0800cec0
 800a30c:	0800ced1 	.word	0x0800ced1

0800a310 <__pow5mult>:
 800a310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a314:	4615      	mov	r5, r2
 800a316:	f012 0203 	ands.w	r2, r2, #3
 800a31a:	4607      	mov	r7, r0
 800a31c:	460e      	mov	r6, r1
 800a31e:	d007      	beq.n	800a330 <__pow5mult+0x20>
 800a320:	4c25      	ldr	r4, [pc, #148]	@ (800a3b8 <__pow5mult+0xa8>)
 800a322:	3a01      	subs	r2, #1
 800a324:	2300      	movs	r3, #0
 800a326:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a32a:	f7ff fe9f 	bl	800a06c <__multadd>
 800a32e:	4606      	mov	r6, r0
 800a330:	10ad      	asrs	r5, r5, #2
 800a332:	d03d      	beq.n	800a3b0 <__pow5mult+0xa0>
 800a334:	69fc      	ldr	r4, [r7, #28]
 800a336:	b97c      	cbnz	r4, 800a358 <__pow5mult+0x48>
 800a338:	2010      	movs	r0, #16
 800a33a:	f7ff fd7f 	bl	8009e3c <malloc>
 800a33e:	4602      	mov	r2, r0
 800a340:	61f8      	str	r0, [r7, #28]
 800a342:	b928      	cbnz	r0, 800a350 <__pow5mult+0x40>
 800a344:	4b1d      	ldr	r3, [pc, #116]	@ (800a3bc <__pow5mult+0xac>)
 800a346:	481e      	ldr	r0, [pc, #120]	@ (800a3c0 <__pow5mult+0xb0>)
 800a348:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a34c:	f001 f930 	bl	800b5b0 <__assert_func>
 800a350:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a354:	6004      	str	r4, [r0, #0]
 800a356:	60c4      	str	r4, [r0, #12]
 800a358:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a35c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a360:	b94c      	cbnz	r4, 800a376 <__pow5mult+0x66>
 800a362:	f240 2171 	movw	r1, #625	@ 0x271
 800a366:	4638      	mov	r0, r7
 800a368:	f7ff ff12 	bl	800a190 <__i2b>
 800a36c:	2300      	movs	r3, #0
 800a36e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a372:	4604      	mov	r4, r0
 800a374:	6003      	str	r3, [r0, #0]
 800a376:	f04f 0900 	mov.w	r9, #0
 800a37a:	07eb      	lsls	r3, r5, #31
 800a37c:	d50a      	bpl.n	800a394 <__pow5mult+0x84>
 800a37e:	4631      	mov	r1, r6
 800a380:	4622      	mov	r2, r4
 800a382:	4638      	mov	r0, r7
 800a384:	f7ff ff1a 	bl	800a1bc <__multiply>
 800a388:	4631      	mov	r1, r6
 800a38a:	4680      	mov	r8, r0
 800a38c:	4638      	mov	r0, r7
 800a38e:	f7ff fe4b 	bl	800a028 <_Bfree>
 800a392:	4646      	mov	r6, r8
 800a394:	106d      	asrs	r5, r5, #1
 800a396:	d00b      	beq.n	800a3b0 <__pow5mult+0xa0>
 800a398:	6820      	ldr	r0, [r4, #0]
 800a39a:	b938      	cbnz	r0, 800a3ac <__pow5mult+0x9c>
 800a39c:	4622      	mov	r2, r4
 800a39e:	4621      	mov	r1, r4
 800a3a0:	4638      	mov	r0, r7
 800a3a2:	f7ff ff0b 	bl	800a1bc <__multiply>
 800a3a6:	6020      	str	r0, [r4, #0]
 800a3a8:	f8c0 9000 	str.w	r9, [r0]
 800a3ac:	4604      	mov	r4, r0
 800a3ae:	e7e4      	b.n	800a37a <__pow5mult+0x6a>
 800a3b0:	4630      	mov	r0, r6
 800a3b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3b6:	bf00      	nop
 800a3b8:	0800cf2c 	.word	0x0800cf2c
 800a3bc:	0800ce51 	.word	0x0800ce51
 800a3c0:	0800ced1 	.word	0x0800ced1

0800a3c4 <__lshift>:
 800a3c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3c8:	460c      	mov	r4, r1
 800a3ca:	6849      	ldr	r1, [r1, #4]
 800a3cc:	6923      	ldr	r3, [r4, #16]
 800a3ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a3d2:	68a3      	ldr	r3, [r4, #8]
 800a3d4:	4607      	mov	r7, r0
 800a3d6:	4691      	mov	r9, r2
 800a3d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a3dc:	f108 0601 	add.w	r6, r8, #1
 800a3e0:	42b3      	cmp	r3, r6
 800a3e2:	db0b      	blt.n	800a3fc <__lshift+0x38>
 800a3e4:	4638      	mov	r0, r7
 800a3e6:	f7ff fddf 	bl	8009fa8 <_Balloc>
 800a3ea:	4605      	mov	r5, r0
 800a3ec:	b948      	cbnz	r0, 800a402 <__lshift+0x3e>
 800a3ee:	4602      	mov	r2, r0
 800a3f0:	4b28      	ldr	r3, [pc, #160]	@ (800a494 <__lshift+0xd0>)
 800a3f2:	4829      	ldr	r0, [pc, #164]	@ (800a498 <__lshift+0xd4>)
 800a3f4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a3f8:	f001 f8da 	bl	800b5b0 <__assert_func>
 800a3fc:	3101      	adds	r1, #1
 800a3fe:	005b      	lsls	r3, r3, #1
 800a400:	e7ee      	b.n	800a3e0 <__lshift+0x1c>
 800a402:	2300      	movs	r3, #0
 800a404:	f100 0114 	add.w	r1, r0, #20
 800a408:	f100 0210 	add.w	r2, r0, #16
 800a40c:	4618      	mov	r0, r3
 800a40e:	4553      	cmp	r3, sl
 800a410:	db33      	blt.n	800a47a <__lshift+0xb6>
 800a412:	6920      	ldr	r0, [r4, #16]
 800a414:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a418:	f104 0314 	add.w	r3, r4, #20
 800a41c:	f019 091f 	ands.w	r9, r9, #31
 800a420:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a424:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a428:	d02b      	beq.n	800a482 <__lshift+0xbe>
 800a42a:	f1c9 0e20 	rsb	lr, r9, #32
 800a42e:	468a      	mov	sl, r1
 800a430:	2200      	movs	r2, #0
 800a432:	6818      	ldr	r0, [r3, #0]
 800a434:	fa00 f009 	lsl.w	r0, r0, r9
 800a438:	4310      	orrs	r0, r2
 800a43a:	f84a 0b04 	str.w	r0, [sl], #4
 800a43e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a442:	459c      	cmp	ip, r3
 800a444:	fa22 f20e 	lsr.w	r2, r2, lr
 800a448:	d8f3      	bhi.n	800a432 <__lshift+0x6e>
 800a44a:	ebac 0304 	sub.w	r3, ip, r4
 800a44e:	3b15      	subs	r3, #21
 800a450:	f023 0303 	bic.w	r3, r3, #3
 800a454:	3304      	adds	r3, #4
 800a456:	f104 0015 	add.w	r0, r4, #21
 800a45a:	4584      	cmp	ip, r0
 800a45c:	bf38      	it	cc
 800a45e:	2304      	movcc	r3, #4
 800a460:	50ca      	str	r2, [r1, r3]
 800a462:	b10a      	cbz	r2, 800a468 <__lshift+0xa4>
 800a464:	f108 0602 	add.w	r6, r8, #2
 800a468:	3e01      	subs	r6, #1
 800a46a:	4638      	mov	r0, r7
 800a46c:	612e      	str	r6, [r5, #16]
 800a46e:	4621      	mov	r1, r4
 800a470:	f7ff fdda 	bl	800a028 <_Bfree>
 800a474:	4628      	mov	r0, r5
 800a476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a47a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a47e:	3301      	adds	r3, #1
 800a480:	e7c5      	b.n	800a40e <__lshift+0x4a>
 800a482:	3904      	subs	r1, #4
 800a484:	f853 2b04 	ldr.w	r2, [r3], #4
 800a488:	f841 2f04 	str.w	r2, [r1, #4]!
 800a48c:	459c      	cmp	ip, r3
 800a48e:	d8f9      	bhi.n	800a484 <__lshift+0xc0>
 800a490:	e7ea      	b.n	800a468 <__lshift+0xa4>
 800a492:	bf00      	nop
 800a494:	0800cec0 	.word	0x0800cec0
 800a498:	0800ced1 	.word	0x0800ced1

0800a49c <__mcmp>:
 800a49c:	690a      	ldr	r2, [r1, #16]
 800a49e:	4603      	mov	r3, r0
 800a4a0:	6900      	ldr	r0, [r0, #16]
 800a4a2:	1a80      	subs	r0, r0, r2
 800a4a4:	b530      	push	{r4, r5, lr}
 800a4a6:	d10e      	bne.n	800a4c6 <__mcmp+0x2a>
 800a4a8:	3314      	adds	r3, #20
 800a4aa:	3114      	adds	r1, #20
 800a4ac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a4b0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a4b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a4b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a4bc:	4295      	cmp	r5, r2
 800a4be:	d003      	beq.n	800a4c8 <__mcmp+0x2c>
 800a4c0:	d205      	bcs.n	800a4ce <__mcmp+0x32>
 800a4c2:	f04f 30ff 	mov.w	r0, #4294967295
 800a4c6:	bd30      	pop	{r4, r5, pc}
 800a4c8:	42a3      	cmp	r3, r4
 800a4ca:	d3f3      	bcc.n	800a4b4 <__mcmp+0x18>
 800a4cc:	e7fb      	b.n	800a4c6 <__mcmp+0x2a>
 800a4ce:	2001      	movs	r0, #1
 800a4d0:	e7f9      	b.n	800a4c6 <__mcmp+0x2a>
	...

0800a4d4 <__mdiff>:
 800a4d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4d8:	4689      	mov	r9, r1
 800a4da:	4606      	mov	r6, r0
 800a4dc:	4611      	mov	r1, r2
 800a4de:	4648      	mov	r0, r9
 800a4e0:	4614      	mov	r4, r2
 800a4e2:	f7ff ffdb 	bl	800a49c <__mcmp>
 800a4e6:	1e05      	subs	r5, r0, #0
 800a4e8:	d112      	bne.n	800a510 <__mdiff+0x3c>
 800a4ea:	4629      	mov	r1, r5
 800a4ec:	4630      	mov	r0, r6
 800a4ee:	f7ff fd5b 	bl	8009fa8 <_Balloc>
 800a4f2:	4602      	mov	r2, r0
 800a4f4:	b928      	cbnz	r0, 800a502 <__mdiff+0x2e>
 800a4f6:	4b3f      	ldr	r3, [pc, #252]	@ (800a5f4 <__mdiff+0x120>)
 800a4f8:	f240 2137 	movw	r1, #567	@ 0x237
 800a4fc:	483e      	ldr	r0, [pc, #248]	@ (800a5f8 <__mdiff+0x124>)
 800a4fe:	f001 f857 	bl	800b5b0 <__assert_func>
 800a502:	2301      	movs	r3, #1
 800a504:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a508:	4610      	mov	r0, r2
 800a50a:	b003      	add	sp, #12
 800a50c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a510:	bfbc      	itt	lt
 800a512:	464b      	movlt	r3, r9
 800a514:	46a1      	movlt	r9, r4
 800a516:	4630      	mov	r0, r6
 800a518:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a51c:	bfba      	itte	lt
 800a51e:	461c      	movlt	r4, r3
 800a520:	2501      	movlt	r5, #1
 800a522:	2500      	movge	r5, #0
 800a524:	f7ff fd40 	bl	8009fa8 <_Balloc>
 800a528:	4602      	mov	r2, r0
 800a52a:	b918      	cbnz	r0, 800a534 <__mdiff+0x60>
 800a52c:	4b31      	ldr	r3, [pc, #196]	@ (800a5f4 <__mdiff+0x120>)
 800a52e:	f240 2145 	movw	r1, #581	@ 0x245
 800a532:	e7e3      	b.n	800a4fc <__mdiff+0x28>
 800a534:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a538:	6926      	ldr	r6, [r4, #16]
 800a53a:	60c5      	str	r5, [r0, #12]
 800a53c:	f109 0310 	add.w	r3, r9, #16
 800a540:	f109 0514 	add.w	r5, r9, #20
 800a544:	f104 0e14 	add.w	lr, r4, #20
 800a548:	f100 0b14 	add.w	fp, r0, #20
 800a54c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a550:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a554:	9301      	str	r3, [sp, #4]
 800a556:	46d9      	mov	r9, fp
 800a558:	f04f 0c00 	mov.w	ip, #0
 800a55c:	9b01      	ldr	r3, [sp, #4]
 800a55e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a562:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a566:	9301      	str	r3, [sp, #4]
 800a568:	fa1f f38a 	uxth.w	r3, sl
 800a56c:	4619      	mov	r1, r3
 800a56e:	b283      	uxth	r3, r0
 800a570:	1acb      	subs	r3, r1, r3
 800a572:	0c00      	lsrs	r0, r0, #16
 800a574:	4463      	add	r3, ip
 800a576:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a57a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a57e:	b29b      	uxth	r3, r3
 800a580:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a584:	4576      	cmp	r6, lr
 800a586:	f849 3b04 	str.w	r3, [r9], #4
 800a58a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a58e:	d8e5      	bhi.n	800a55c <__mdiff+0x88>
 800a590:	1b33      	subs	r3, r6, r4
 800a592:	3b15      	subs	r3, #21
 800a594:	f023 0303 	bic.w	r3, r3, #3
 800a598:	3415      	adds	r4, #21
 800a59a:	3304      	adds	r3, #4
 800a59c:	42a6      	cmp	r6, r4
 800a59e:	bf38      	it	cc
 800a5a0:	2304      	movcc	r3, #4
 800a5a2:	441d      	add	r5, r3
 800a5a4:	445b      	add	r3, fp
 800a5a6:	461e      	mov	r6, r3
 800a5a8:	462c      	mov	r4, r5
 800a5aa:	4544      	cmp	r4, r8
 800a5ac:	d30e      	bcc.n	800a5cc <__mdiff+0xf8>
 800a5ae:	f108 0103 	add.w	r1, r8, #3
 800a5b2:	1b49      	subs	r1, r1, r5
 800a5b4:	f021 0103 	bic.w	r1, r1, #3
 800a5b8:	3d03      	subs	r5, #3
 800a5ba:	45a8      	cmp	r8, r5
 800a5bc:	bf38      	it	cc
 800a5be:	2100      	movcc	r1, #0
 800a5c0:	440b      	add	r3, r1
 800a5c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a5c6:	b191      	cbz	r1, 800a5ee <__mdiff+0x11a>
 800a5c8:	6117      	str	r7, [r2, #16]
 800a5ca:	e79d      	b.n	800a508 <__mdiff+0x34>
 800a5cc:	f854 1b04 	ldr.w	r1, [r4], #4
 800a5d0:	46e6      	mov	lr, ip
 800a5d2:	0c08      	lsrs	r0, r1, #16
 800a5d4:	fa1c fc81 	uxtah	ip, ip, r1
 800a5d8:	4471      	add	r1, lr
 800a5da:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a5de:	b289      	uxth	r1, r1
 800a5e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a5e4:	f846 1b04 	str.w	r1, [r6], #4
 800a5e8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a5ec:	e7dd      	b.n	800a5aa <__mdiff+0xd6>
 800a5ee:	3f01      	subs	r7, #1
 800a5f0:	e7e7      	b.n	800a5c2 <__mdiff+0xee>
 800a5f2:	bf00      	nop
 800a5f4:	0800cec0 	.word	0x0800cec0
 800a5f8:	0800ced1 	.word	0x0800ced1

0800a5fc <__d2b>:
 800a5fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a600:	460f      	mov	r7, r1
 800a602:	2101      	movs	r1, #1
 800a604:	ec59 8b10 	vmov	r8, r9, d0
 800a608:	4616      	mov	r6, r2
 800a60a:	f7ff fccd 	bl	8009fa8 <_Balloc>
 800a60e:	4604      	mov	r4, r0
 800a610:	b930      	cbnz	r0, 800a620 <__d2b+0x24>
 800a612:	4602      	mov	r2, r0
 800a614:	4b23      	ldr	r3, [pc, #140]	@ (800a6a4 <__d2b+0xa8>)
 800a616:	4824      	ldr	r0, [pc, #144]	@ (800a6a8 <__d2b+0xac>)
 800a618:	f240 310f 	movw	r1, #783	@ 0x30f
 800a61c:	f000 ffc8 	bl	800b5b0 <__assert_func>
 800a620:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a624:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a628:	b10d      	cbz	r5, 800a62e <__d2b+0x32>
 800a62a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a62e:	9301      	str	r3, [sp, #4]
 800a630:	f1b8 0300 	subs.w	r3, r8, #0
 800a634:	d023      	beq.n	800a67e <__d2b+0x82>
 800a636:	4668      	mov	r0, sp
 800a638:	9300      	str	r3, [sp, #0]
 800a63a:	f7ff fd7c 	bl	800a136 <__lo0bits>
 800a63e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a642:	b1d0      	cbz	r0, 800a67a <__d2b+0x7e>
 800a644:	f1c0 0320 	rsb	r3, r0, #32
 800a648:	fa02 f303 	lsl.w	r3, r2, r3
 800a64c:	430b      	orrs	r3, r1
 800a64e:	40c2      	lsrs	r2, r0
 800a650:	6163      	str	r3, [r4, #20]
 800a652:	9201      	str	r2, [sp, #4]
 800a654:	9b01      	ldr	r3, [sp, #4]
 800a656:	61a3      	str	r3, [r4, #24]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	bf0c      	ite	eq
 800a65c:	2201      	moveq	r2, #1
 800a65e:	2202      	movne	r2, #2
 800a660:	6122      	str	r2, [r4, #16]
 800a662:	b1a5      	cbz	r5, 800a68e <__d2b+0x92>
 800a664:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a668:	4405      	add	r5, r0
 800a66a:	603d      	str	r5, [r7, #0]
 800a66c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a670:	6030      	str	r0, [r6, #0]
 800a672:	4620      	mov	r0, r4
 800a674:	b003      	add	sp, #12
 800a676:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a67a:	6161      	str	r1, [r4, #20]
 800a67c:	e7ea      	b.n	800a654 <__d2b+0x58>
 800a67e:	a801      	add	r0, sp, #4
 800a680:	f7ff fd59 	bl	800a136 <__lo0bits>
 800a684:	9b01      	ldr	r3, [sp, #4]
 800a686:	6163      	str	r3, [r4, #20]
 800a688:	3020      	adds	r0, #32
 800a68a:	2201      	movs	r2, #1
 800a68c:	e7e8      	b.n	800a660 <__d2b+0x64>
 800a68e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a692:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a696:	6038      	str	r0, [r7, #0]
 800a698:	6918      	ldr	r0, [r3, #16]
 800a69a:	f7ff fd2d 	bl	800a0f8 <__hi0bits>
 800a69e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a6a2:	e7e5      	b.n	800a670 <__d2b+0x74>
 800a6a4:	0800cec0 	.word	0x0800cec0
 800a6a8:	0800ced1 	.word	0x0800ced1

0800a6ac <__ssputs_r>:
 800a6ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6b0:	688e      	ldr	r6, [r1, #8]
 800a6b2:	461f      	mov	r7, r3
 800a6b4:	42be      	cmp	r6, r7
 800a6b6:	680b      	ldr	r3, [r1, #0]
 800a6b8:	4682      	mov	sl, r0
 800a6ba:	460c      	mov	r4, r1
 800a6bc:	4690      	mov	r8, r2
 800a6be:	d82d      	bhi.n	800a71c <__ssputs_r+0x70>
 800a6c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a6c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a6c8:	d026      	beq.n	800a718 <__ssputs_r+0x6c>
 800a6ca:	6965      	ldr	r5, [r4, #20]
 800a6cc:	6909      	ldr	r1, [r1, #16]
 800a6ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a6d2:	eba3 0901 	sub.w	r9, r3, r1
 800a6d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a6da:	1c7b      	adds	r3, r7, #1
 800a6dc:	444b      	add	r3, r9
 800a6de:	106d      	asrs	r5, r5, #1
 800a6e0:	429d      	cmp	r5, r3
 800a6e2:	bf38      	it	cc
 800a6e4:	461d      	movcc	r5, r3
 800a6e6:	0553      	lsls	r3, r2, #21
 800a6e8:	d527      	bpl.n	800a73a <__ssputs_r+0x8e>
 800a6ea:	4629      	mov	r1, r5
 800a6ec:	f7ff fbd0 	bl	8009e90 <_malloc_r>
 800a6f0:	4606      	mov	r6, r0
 800a6f2:	b360      	cbz	r0, 800a74e <__ssputs_r+0xa2>
 800a6f4:	6921      	ldr	r1, [r4, #16]
 800a6f6:	464a      	mov	r2, r9
 800a6f8:	f7fe fcf9 	bl	80090ee <memcpy>
 800a6fc:	89a3      	ldrh	r3, [r4, #12]
 800a6fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a702:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a706:	81a3      	strh	r3, [r4, #12]
 800a708:	6126      	str	r6, [r4, #16]
 800a70a:	6165      	str	r5, [r4, #20]
 800a70c:	444e      	add	r6, r9
 800a70e:	eba5 0509 	sub.w	r5, r5, r9
 800a712:	6026      	str	r6, [r4, #0]
 800a714:	60a5      	str	r5, [r4, #8]
 800a716:	463e      	mov	r6, r7
 800a718:	42be      	cmp	r6, r7
 800a71a:	d900      	bls.n	800a71e <__ssputs_r+0x72>
 800a71c:	463e      	mov	r6, r7
 800a71e:	6820      	ldr	r0, [r4, #0]
 800a720:	4632      	mov	r2, r6
 800a722:	4641      	mov	r1, r8
 800a724:	f000 fef7 	bl	800b516 <memmove>
 800a728:	68a3      	ldr	r3, [r4, #8]
 800a72a:	1b9b      	subs	r3, r3, r6
 800a72c:	60a3      	str	r3, [r4, #8]
 800a72e:	6823      	ldr	r3, [r4, #0]
 800a730:	4433      	add	r3, r6
 800a732:	6023      	str	r3, [r4, #0]
 800a734:	2000      	movs	r0, #0
 800a736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a73a:	462a      	mov	r2, r5
 800a73c:	f000 ff7c 	bl	800b638 <_realloc_r>
 800a740:	4606      	mov	r6, r0
 800a742:	2800      	cmp	r0, #0
 800a744:	d1e0      	bne.n	800a708 <__ssputs_r+0x5c>
 800a746:	6921      	ldr	r1, [r4, #16]
 800a748:	4650      	mov	r0, sl
 800a74a:	f7ff fb2d 	bl	8009da8 <_free_r>
 800a74e:	230c      	movs	r3, #12
 800a750:	f8ca 3000 	str.w	r3, [sl]
 800a754:	89a3      	ldrh	r3, [r4, #12]
 800a756:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a75a:	81a3      	strh	r3, [r4, #12]
 800a75c:	f04f 30ff 	mov.w	r0, #4294967295
 800a760:	e7e9      	b.n	800a736 <__ssputs_r+0x8a>
	...

0800a764 <_svfiprintf_r>:
 800a764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a768:	4698      	mov	r8, r3
 800a76a:	898b      	ldrh	r3, [r1, #12]
 800a76c:	061b      	lsls	r3, r3, #24
 800a76e:	b09d      	sub	sp, #116	@ 0x74
 800a770:	4607      	mov	r7, r0
 800a772:	460d      	mov	r5, r1
 800a774:	4614      	mov	r4, r2
 800a776:	d510      	bpl.n	800a79a <_svfiprintf_r+0x36>
 800a778:	690b      	ldr	r3, [r1, #16]
 800a77a:	b973      	cbnz	r3, 800a79a <_svfiprintf_r+0x36>
 800a77c:	2140      	movs	r1, #64	@ 0x40
 800a77e:	f7ff fb87 	bl	8009e90 <_malloc_r>
 800a782:	6028      	str	r0, [r5, #0]
 800a784:	6128      	str	r0, [r5, #16]
 800a786:	b930      	cbnz	r0, 800a796 <_svfiprintf_r+0x32>
 800a788:	230c      	movs	r3, #12
 800a78a:	603b      	str	r3, [r7, #0]
 800a78c:	f04f 30ff 	mov.w	r0, #4294967295
 800a790:	b01d      	add	sp, #116	@ 0x74
 800a792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a796:	2340      	movs	r3, #64	@ 0x40
 800a798:	616b      	str	r3, [r5, #20]
 800a79a:	2300      	movs	r3, #0
 800a79c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a79e:	2320      	movs	r3, #32
 800a7a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a7a4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a7a8:	2330      	movs	r3, #48	@ 0x30
 800a7aa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a948 <_svfiprintf_r+0x1e4>
 800a7ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a7b2:	f04f 0901 	mov.w	r9, #1
 800a7b6:	4623      	mov	r3, r4
 800a7b8:	469a      	mov	sl, r3
 800a7ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7be:	b10a      	cbz	r2, 800a7c4 <_svfiprintf_r+0x60>
 800a7c0:	2a25      	cmp	r2, #37	@ 0x25
 800a7c2:	d1f9      	bne.n	800a7b8 <_svfiprintf_r+0x54>
 800a7c4:	ebba 0b04 	subs.w	fp, sl, r4
 800a7c8:	d00b      	beq.n	800a7e2 <_svfiprintf_r+0x7e>
 800a7ca:	465b      	mov	r3, fp
 800a7cc:	4622      	mov	r2, r4
 800a7ce:	4629      	mov	r1, r5
 800a7d0:	4638      	mov	r0, r7
 800a7d2:	f7ff ff6b 	bl	800a6ac <__ssputs_r>
 800a7d6:	3001      	adds	r0, #1
 800a7d8:	f000 80a7 	beq.w	800a92a <_svfiprintf_r+0x1c6>
 800a7dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a7de:	445a      	add	r2, fp
 800a7e0:	9209      	str	r2, [sp, #36]	@ 0x24
 800a7e2:	f89a 3000 	ldrb.w	r3, [sl]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	f000 809f 	beq.w	800a92a <_svfiprintf_r+0x1c6>
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	f04f 32ff 	mov.w	r2, #4294967295
 800a7f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a7f6:	f10a 0a01 	add.w	sl, sl, #1
 800a7fa:	9304      	str	r3, [sp, #16]
 800a7fc:	9307      	str	r3, [sp, #28]
 800a7fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a802:	931a      	str	r3, [sp, #104]	@ 0x68
 800a804:	4654      	mov	r4, sl
 800a806:	2205      	movs	r2, #5
 800a808:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a80c:	484e      	ldr	r0, [pc, #312]	@ (800a948 <_svfiprintf_r+0x1e4>)
 800a80e:	f7f5 fce7 	bl	80001e0 <memchr>
 800a812:	9a04      	ldr	r2, [sp, #16]
 800a814:	b9d8      	cbnz	r0, 800a84e <_svfiprintf_r+0xea>
 800a816:	06d0      	lsls	r0, r2, #27
 800a818:	bf44      	itt	mi
 800a81a:	2320      	movmi	r3, #32
 800a81c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a820:	0711      	lsls	r1, r2, #28
 800a822:	bf44      	itt	mi
 800a824:	232b      	movmi	r3, #43	@ 0x2b
 800a826:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a82a:	f89a 3000 	ldrb.w	r3, [sl]
 800a82e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a830:	d015      	beq.n	800a85e <_svfiprintf_r+0xfa>
 800a832:	9a07      	ldr	r2, [sp, #28]
 800a834:	4654      	mov	r4, sl
 800a836:	2000      	movs	r0, #0
 800a838:	f04f 0c0a 	mov.w	ip, #10
 800a83c:	4621      	mov	r1, r4
 800a83e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a842:	3b30      	subs	r3, #48	@ 0x30
 800a844:	2b09      	cmp	r3, #9
 800a846:	d94b      	bls.n	800a8e0 <_svfiprintf_r+0x17c>
 800a848:	b1b0      	cbz	r0, 800a878 <_svfiprintf_r+0x114>
 800a84a:	9207      	str	r2, [sp, #28]
 800a84c:	e014      	b.n	800a878 <_svfiprintf_r+0x114>
 800a84e:	eba0 0308 	sub.w	r3, r0, r8
 800a852:	fa09 f303 	lsl.w	r3, r9, r3
 800a856:	4313      	orrs	r3, r2
 800a858:	9304      	str	r3, [sp, #16]
 800a85a:	46a2      	mov	sl, r4
 800a85c:	e7d2      	b.n	800a804 <_svfiprintf_r+0xa0>
 800a85e:	9b03      	ldr	r3, [sp, #12]
 800a860:	1d19      	adds	r1, r3, #4
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	9103      	str	r1, [sp, #12]
 800a866:	2b00      	cmp	r3, #0
 800a868:	bfbb      	ittet	lt
 800a86a:	425b      	neglt	r3, r3
 800a86c:	f042 0202 	orrlt.w	r2, r2, #2
 800a870:	9307      	strge	r3, [sp, #28]
 800a872:	9307      	strlt	r3, [sp, #28]
 800a874:	bfb8      	it	lt
 800a876:	9204      	strlt	r2, [sp, #16]
 800a878:	7823      	ldrb	r3, [r4, #0]
 800a87a:	2b2e      	cmp	r3, #46	@ 0x2e
 800a87c:	d10a      	bne.n	800a894 <_svfiprintf_r+0x130>
 800a87e:	7863      	ldrb	r3, [r4, #1]
 800a880:	2b2a      	cmp	r3, #42	@ 0x2a
 800a882:	d132      	bne.n	800a8ea <_svfiprintf_r+0x186>
 800a884:	9b03      	ldr	r3, [sp, #12]
 800a886:	1d1a      	adds	r2, r3, #4
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	9203      	str	r2, [sp, #12]
 800a88c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a890:	3402      	adds	r4, #2
 800a892:	9305      	str	r3, [sp, #20]
 800a894:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a958 <_svfiprintf_r+0x1f4>
 800a898:	7821      	ldrb	r1, [r4, #0]
 800a89a:	2203      	movs	r2, #3
 800a89c:	4650      	mov	r0, sl
 800a89e:	f7f5 fc9f 	bl	80001e0 <memchr>
 800a8a2:	b138      	cbz	r0, 800a8b4 <_svfiprintf_r+0x150>
 800a8a4:	9b04      	ldr	r3, [sp, #16]
 800a8a6:	eba0 000a 	sub.w	r0, r0, sl
 800a8aa:	2240      	movs	r2, #64	@ 0x40
 800a8ac:	4082      	lsls	r2, r0
 800a8ae:	4313      	orrs	r3, r2
 800a8b0:	3401      	adds	r4, #1
 800a8b2:	9304      	str	r3, [sp, #16]
 800a8b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8b8:	4824      	ldr	r0, [pc, #144]	@ (800a94c <_svfiprintf_r+0x1e8>)
 800a8ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a8be:	2206      	movs	r2, #6
 800a8c0:	f7f5 fc8e 	bl	80001e0 <memchr>
 800a8c4:	2800      	cmp	r0, #0
 800a8c6:	d036      	beq.n	800a936 <_svfiprintf_r+0x1d2>
 800a8c8:	4b21      	ldr	r3, [pc, #132]	@ (800a950 <_svfiprintf_r+0x1ec>)
 800a8ca:	bb1b      	cbnz	r3, 800a914 <_svfiprintf_r+0x1b0>
 800a8cc:	9b03      	ldr	r3, [sp, #12]
 800a8ce:	3307      	adds	r3, #7
 800a8d0:	f023 0307 	bic.w	r3, r3, #7
 800a8d4:	3308      	adds	r3, #8
 800a8d6:	9303      	str	r3, [sp, #12]
 800a8d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8da:	4433      	add	r3, r6
 800a8dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a8de:	e76a      	b.n	800a7b6 <_svfiprintf_r+0x52>
 800a8e0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a8e4:	460c      	mov	r4, r1
 800a8e6:	2001      	movs	r0, #1
 800a8e8:	e7a8      	b.n	800a83c <_svfiprintf_r+0xd8>
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	3401      	adds	r4, #1
 800a8ee:	9305      	str	r3, [sp, #20]
 800a8f0:	4619      	mov	r1, r3
 800a8f2:	f04f 0c0a 	mov.w	ip, #10
 800a8f6:	4620      	mov	r0, r4
 800a8f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a8fc:	3a30      	subs	r2, #48	@ 0x30
 800a8fe:	2a09      	cmp	r2, #9
 800a900:	d903      	bls.n	800a90a <_svfiprintf_r+0x1a6>
 800a902:	2b00      	cmp	r3, #0
 800a904:	d0c6      	beq.n	800a894 <_svfiprintf_r+0x130>
 800a906:	9105      	str	r1, [sp, #20]
 800a908:	e7c4      	b.n	800a894 <_svfiprintf_r+0x130>
 800a90a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a90e:	4604      	mov	r4, r0
 800a910:	2301      	movs	r3, #1
 800a912:	e7f0      	b.n	800a8f6 <_svfiprintf_r+0x192>
 800a914:	ab03      	add	r3, sp, #12
 800a916:	9300      	str	r3, [sp, #0]
 800a918:	462a      	mov	r2, r5
 800a91a:	4b0e      	ldr	r3, [pc, #56]	@ (800a954 <_svfiprintf_r+0x1f0>)
 800a91c:	a904      	add	r1, sp, #16
 800a91e:	4638      	mov	r0, r7
 800a920:	f7fd fd00 	bl	8008324 <_printf_float>
 800a924:	1c42      	adds	r2, r0, #1
 800a926:	4606      	mov	r6, r0
 800a928:	d1d6      	bne.n	800a8d8 <_svfiprintf_r+0x174>
 800a92a:	89ab      	ldrh	r3, [r5, #12]
 800a92c:	065b      	lsls	r3, r3, #25
 800a92e:	f53f af2d 	bmi.w	800a78c <_svfiprintf_r+0x28>
 800a932:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a934:	e72c      	b.n	800a790 <_svfiprintf_r+0x2c>
 800a936:	ab03      	add	r3, sp, #12
 800a938:	9300      	str	r3, [sp, #0]
 800a93a:	462a      	mov	r2, r5
 800a93c:	4b05      	ldr	r3, [pc, #20]	@ (800a954 <_svfiprintf_r+0x1f0>)
 800a93e:	a904      	add	r1, sp, #16
 800a940:	4638      	mov	r0, r7
 800a942:	f7fd ff87 	bl	8008854 <_printf_i>
 800a946:	e7ed      	b.n	800a924 <_svfiprintf_r+0x1c0>
 800a948:	0800d028 	.word	0x0800d028
 800a94c:	0800d032 	.word	0x0800d032
 800a950:	08008325 	.word	0x08008325
 800a954:	0800a6ad 	.word	0x0800a6ad
 800a958:	0800d02e 	.word	0x0800d02e

0800a95c <_sungetc_r>:
 800a95c:	b538      	push	{r3, r4, r5, lr}
 800a95e:	1c4b      	adds	r3, r1, #1
 800a960:	4614      	mov	r4, r2
 800a962:	d103      	bne.n	800a96c <_sungetc_r+0x10>
 800a964:	f04f 35ff 	mov.w	r5, #4294967295
 800a968:	4628      	mov	r0, r5
 800a96a:	bd38      	pop	{r3, r4, r5, pc}
 800a96c:	8993      	ldrh	r3, [r2, #12]
 800a96e:	f023 0320 	bic.w	r3, r3, #32
 800a972:	8193      	strh	r3, [r2, #12]
 800a974:	6853      	ldr	r3, [r2, #4]
 800a976:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800a978:	b2cd      	uxtb	r5, r1
 800a97a:	b18a      	cbz	r2, 800a9a0 <_sungetc_r+0x44>
 800a97c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800a97e:	429a      	cmp	r2, r3
 800a980:	dd08      	ble.n	800a994 <_sungetc_r+0x38>
 800a982:	6823      	ldr	r3, [r4, #0]
 800a984:	1e5a      	subs	r2, r3, #1
 800a986:	6022      	str	r2, [r4, #0]
 800a988:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a98c:	6863      	ldr	r3, [r4, #4]
 800a98e:	3301      	adds	r3, #1
 800a990:	6063      	str	r3, [r4, #4]
 800a992:	e7e9      	b.n	800a968 <_sungetc_r+0xc>
 800a994:	4621      	mov	r1, r4
 800a996:	f000 fd84 	bl	800b4a2 <__submore>
 800a99a:	2800      	cmp	r0, #0
 800a99c:	d0f1      	beq.n	800a982 <_sungetc_r+0x26>
 800a99e:	e7e1      	b.n	800a964 <_sungetc_r+0x8>
 800a9a0:	6921      	ldr	r1, [r4, #16]
 800a9a2:	6822      	ldr	r2, [r4, #0]
 800a9a4:	b141      	cbz	r1, 800a9b8 <_sungetc_r+0x5c>
 800a9a6:	4291      	cmp	r1, r2
 800a9a8:	d206      	bcs.n	800a9b8 <_sungetc_r+0x5c>
 800a9aa:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800a9ae:	42a9      	cmp	r1, r5
 800a9b0:	d102      	bne.n	800a9b8 <_sungetc_r+0x5c>
 800a9b2:	3a01      	subs	r2, #1
 800a9b4:	6022      	str	r2, [r4, #0]
 800a9b6:	e7ea      	b.n	800a98e <_sungetc_r+0x32>
 800a9b8:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800a9bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a9c0:	6363      	str	r3, [r4, #52]	@ 0x34
 800a9c2:	2303      	movs	r3, #3
 800a9c4:	63a3      	str	r3, [r4, #56]	@ 0x38
 800a9c6:	4623      	mov	r3, r4
 800a9c8:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a9cc:	6023      	str	r3, [r4, #0]
 800a9ce:	2301      	movs	r3, #1
 800a9d0:	e7de      	b.n	800a990 <_sungetc_r+0x34>

0800a9d2 <__ssrefill_r>:
 800a9d2:	b510      	push	{r4, lr}
 800a9d4:	460c      	mov	r4, r1
 800a9d6:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800a9d8:	b169      	cbz	r1, 800a9f6 <__ssrefill_r+0x24>
 800a9da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a9de:	4299      	cmp	r1, r3
 800a9e0:	d001      	beq.n	800a9e6 <__ssrefill_r+0x14>
 800a9e2:	f7ff f9e1 	bl	8009da8 <_free_r>
 800a9e6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a9e8:	6063      	str	r3, [r4, #4]
 800a9ea:	2000      	movs	r0, #0
 800a9ec:	6360      	str	r0, [r4, #52]	@ 0x34
 800a9ee:	b113      	cbz	r3, 800a9f6 <__ssrefill_r+0x24>
 800a9f0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800a9f2:	6023      	str	r3, [r4, #0]
 800a9f4:	bd10      	pop	{r4, pc}
 800a9f6:	6923      	ldr	r3, [r4, #16]
 800a9f8:	6023      	str	r3, [r4, #0]
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	6063      	str	r3, [r4, #4]
 800a9fe:	89a3      	ldrh	r3, [r4, #12]
 800aa00:	f043 0320 	orr.w	r3, r3, #32
 800aa04:	81a3      	strh	r3, [r4, #12]
 800aa06:	f04f 30ff 	mov.w	r0, #4294967295
 800aa0a:	e7f3      	b.n	800a9f4 <__ssrefill_r+0x22>

0800aa0c <__ssvfiscanf_r>:
 800aa0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa10:	460c      	mov	r4, r1
 800aa12:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800aa16:	2100      	movs	r1, #0
 800aa18:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800aa1c:	49a5      	ldr	r1, [pc, #660]	@ (800acb4 <__ssvfiscanf_r+0x2a8>)
 800aa1e:	91a0      	str	r1, [sp, #640]	@ 0x280
 800aa20:	f10d 0804 	add.w	r8, sp, #4
 800aa24:	49a4      	ldr	r1, [pc, #656]	@ (800acb8 <__ssvfiscanf_r+0x2ac>)
 800aa26:	4fa5      	ldr	r7, [pc, #660]	@ (800acbc <__ssvfiscanf_r+0x2b0>)
 800aa28:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800aa2c:	4606      	mov	r6, r0
 800aa2e:	91a1      	str	r1, [sp, #644]	@ 0x284
 800aa30:	9300      	str	r3, [sp, #0]
 800aa32:	7813      	ldrb	r3, [r2, #0]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	f000 8158 	beq.w	800acea <__ssvfiscanf_r+0x2de>
 800aa3a:	5cf9      	ldrb	r1, [r7, r3]
 800aa3c:	f011 0108 	ands.w	r1, r1, #8
 800aa40:	f102 0501 	add.w	r5, r2, #1
 800aa44:	d019      	beq.n	800aa7a <__ssvfiscanf_r+0x6e>
 800aa46:	6863      	ldr	r3, [r4, #4]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	dd0f      	ble.n	800aa6c <__ssvfiscanf_r+0x60>
 800aa4c:	6823      	ldr	r3, [r4, #0]
 800aa4e:	781a      	ldrb	r2, [r3, #0]
 800aa50:	5cba      	ldrb	r2, [r7, r2]
 800aa52:	0712      	lsls	r2, r2, #28
 800aa54:	d401      	bmi.n	800aa5a <__ssvfiscanf_r+0x4e>
 800aa56:	462a      	mov	r2, r5
 800aa58:	e7eb      	b.n	800aa32 <__ssvfiscanf_r+0x26>
 800aa5a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800aa5c:	3201      	adds	r2, #1
 800aa5e:	9245      	str	r2, [sp, #276]	@ 0x114
 800aa60:	6862      	ldr	r2, [r4, #4]
 800aa62:	3301      	adds	r3, #1
 800aa64:	3a01      	subs	r2, #1
 800aa66:	6062      	str	r2, [r4, #4]
 800aa68:	6023      	str	r3, [r4, #0]
 800aa6a:	e7ec      	b.n	800aa46 <__ssvfiscanf_r+0x3a>
 800aa6c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800aa6e:	4621      	mov	r1, r4
 800aa70:	4630      	mov	r0, r6
 800aa72:	4798      	blx	r3
 800aa74:	2800      	cmp	r0, #0
 800aa76:	d0e9      	beq.n	800aa4c <__ssvfiscanf_r+0x40>
 800aa78:	e7ed      	b.n	800aa56 <__ssvfiscanf_r+0x4a>
 800aa7a:	2b25      	cmp	r3, #37	@ 0x25
 800aa7c:	d012      	beq.n	800aaa4 <__ssvfiscanf_r+0x98>
 800aa7e:	4699      	mov	r9, r3
 800aa80:	6863      	ldr	r3, [r4, #4]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	f340 8093 	ble.w	800abae <__ssvfiscanf_r+0x1a2>
 800aa88:	6822      	ldr	r2, [r4, #0]
 800aa8a:	7813      	ldrb	r3, [r2, #0]
 800aa8c:	454b      	cmp	r3, r9
 800aa8e:	f040 812c 	bne.w	800acea <__ssvfiscanf_r+0x2de>
 800aa92:	6863      	ldr	r3, [r4, #4]
 800aa94:	3b01      	subs	r3, #1
 800aa96:	6063      	str	r3, [r4, #4]
 800aa98:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800aa9a:	3201      	adds	r2, #1
 800aa9c:	3301      	adds	r3, #1
 800aa9e:	6022      	str	r2, [r4, #0]
 800aaa0:	9345      	str	r3, [sp, #276]	@ 0x114
 800aaa2:	e7d8      	b.n	800aa56 <__ssvfiscanf_r+0x4a>
 800aaa4:	9141      	str	r1, [sp, #260]	@ 0x104
 800aaa6:	9143      	str	r1, [sp, #268]	@ 0x10c
 800aaa8:	7853      	ldrb	r3, [r2, #1]
 800aaaa:	2b2a      	cmp	r3, #42	@ 0x2a
 800aaac:	bf02      	ittt	eq
 800aaae:	2310      	moveq	r3, #16
 800aab0:	1c95      	addeq	r5, r2, #2
 800aab2:	9341      	streq	r3, [sp, #260]	@ 0x104
 800aab4:	220a      	movs	r2, #10
 800aab6:	46a9      	mov	r9, r5
 800aab8:	f819 1b01 	ldrb.w	r1, [r9], #1
 800aabc:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800aac0:	2b09      	cmp	r3, #9
 800aac2:	d91e      	bls.n	800ab02 <__ssvfiscanf_r+0xf6>
 800aac4:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800acc0 <__ssvfiscanf_r+0x2b4>
 800aac8:	2203      	movs	r2, #3
 800aaca:	4650      	mov	r0, sl
 800aacc:	f7f5 fb88 	bl	80001e0 <memchr>
 800aad0:	b138      	cbz	r0, 800aae2 <__ssvfiscanf_r+0xd6>
 800aad2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800aad4:	eba0 000a 	sub.w	r0, r0, sl
 800aad8:	2301      	movs	r3, #1
 800aada:	4083      	lsls	r3, r0
 800aadc:	4313      	orrs	r3, r2
 800aade:	9341      	str	r3, [sp, #260]	@ 0x104
 800aae0:	464d      	mov	r5, r9
 800aae2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800aae6:	2b78      	cmp	r3, #120	@ 0x78
 800aae8:	d806      	bhi.n	800aaf8 <__ssvfiscanf_r+0xec>
 800aaea:	2b57      	cmp	r3, #87	@ 0x57
 800aaec:	d810      	bhi.n	800ab10 <__ssvfiscanf_r+0x104>
 800aaee:	2b25      	cmp	r3, #37	@ 0x25
 800aaf0:	d0c5      	beq.n	800aa7e <__ssvfiscanf_r+0x72>
 800aaf2:	d857      	bhi.n	800aba4 <__ssvfiscanf_r+0x198>
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d065      	beq.n	800abc4 <__ssvfiscanf_r+0x1b8>
 800aaf8:	2303      	movs	r3, #3
 800aafa:	9347      	str	r3, [sp, #284]	@ 0x11c
 800aafc:	230a      	movs	r3, #10
 800aafe:	9342      	str	r3, [sp, #264]	@ 0x108
 800ab00:	e078      	b.n	800abf4 <__ssvfiscanf_r+0x1e8>
 800ab02:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800ab04:	fb02 1103 	mla	r1, r2, r3, r1
 800ab08:	3930      	subs	r1, #48	@ 0x30
 800ab0a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800ab0c:	464d      	mov	r5, r9
 800ab0e:	e7d2      	b.n	800aab6 <__ssvfiscanf_r+0xaa>
 800ab10:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800ab14:	2a20      	cmp	r2, #32
 800ab16:	d8ef      	bhi.n	800aaf8 <__ssvfiscanf_r+0xec>
 800ab18:	a101      	add	r1, pc, #4	@ (adr r1, 800ab20 <__ssvfiscanf_r+0x114>)
 800ab1a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ab1e:	bf00      	nop
 800ab20:	0800abd3 	.word	0x0800abd3
 800ab24:	0800aaf9 	.word	0x0800aaf9
 800ab28:	0800aaf9 	.word	0x0800aaf9
 800ab2c:	0800ac2d 	.word	0x0800ac2d
 800ab30:	0800aaf9 	.word	0x0800aaf9
 800ab34:	0800aaf9 	.word	0x0800aaf9
 800ab38:	0800aaf9 	.word	0x0800aaf9
 800ab3c:	0800aaf9 	.word	0x0800aaf9
 800ab40:	0800aaf9 	.word	0x0800aaf9
 800ab44:	0800aaf9 	.word	0x0800aaf9
 800ab48:	0800aaf9 	.word	0x0800aaf9
 800ab4c:	0800ac43 	.word	0x0800ac43
 800ab50:	0800ac29 	.word	0x0800ac29
 800ab54:	0800abab 	.word	0x0800abab
 800ab58:	0800abab 	.word	0x0800abab
 800ab5c:	0800abab 	.word	0x0800abab
 800ab60:	0800aaf9 	.word	0x0800aaf9
 800ab64:	0800abe5 	.word	0x0800abe5
 800ab68:	0800aaf9 	.word	0x0800aaf9
 800ab6c:	0800aaf9 	.word	0x0800aaf9
 800ab70:	0800aaf9 	.word	0x0800aaf9
 800ab74:	0800aaf9 	.word	0x0800aaf9
 800ab78:	0800ac53 	.word	0x0800ac53
 800ab7c:	0800abed 	.word	0x0800abed
 800ab80:	0800abcb 	.word	0x0800abcb
 800ab84:	0800aaf9 	.word	0x0800aaf9
 800ab88:	0800aaf9 	.word	0x0800aaf9
 800ab8c:	0800ac4f 	.word	0x0800ac4f
 800ab90:	0800aaf9 	.word	0x0800aaf9
 800ab94:	0800ac29 	.word	0x0800ac29
 800ab98:	0800aaf9 	.word	0x0800aaf9
 800ab9c:	0800aaf9 	.word	0x0800aaf9
 800aba0:	0800abd3 	.word	0x0800abd3
 800aba4:	3b45      	subs	r3, #69	@ 0x45
 800aba6:	2b02      	cmp	r3, #2
 800aba8:	d8a6      	bhi.n	800aaf8 <__ssvfiscanf_r+0xec>
 800abaa:	2305      	movs	r3, #5
 800abac:	e021      	b.n	800abf2 <__ssvfiscanf_r+0x1e6>
 800abae:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800abb0:	4621      	mov	r1, r4
 800abb2:	4630      	mov	r0, r6
 800abb4:	4798      	blx	r3
 800abb6:	2800      	cmp	r0, #0
 800abb8:	f43f af66 	beq.w	800aa88 <__ssvfiscanf_r+0x7c>
 800abbc:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800abbe:	2800      	cmp	r0, #0
 800abc0:	f040 808b 	bne.w	800acda <__ssvfiscanf_r+0x2ce>
 800abc4:	f04f 30ff 	mov.w	r0, #4294967295
 800abc8:	e08b      	b.n	800ace2 <__ssvfiscanf_r+0x2d6>
 800abca:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800abcc:	f042 0220 	orr.w	r2, r2, #32
 800abd0:	9241      	str	r2, [sp, #260]	@ 0x104
 800abd2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800abd4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800abd8:	9241      	str	r2, [sp, #260]	@ 0x104
 800abda:	2210      	movs	r2, #16
 800abdc:	2b6e      	cmp	r3, #110	@ 0x6e
 800abde:	9242      	str	r2, [sp, #264]	@ 0x108
 800abe0:	d902      	bls.n	800abe8 <__ssvfiscanf_r+0x1dc>
 800abe2:	e005      	b.n	800abf0 <__ssvfiscanf_r+0x1e4>
 800abe4:	2300      	movs	r3, #0
 800abe6:	9342      	str	r3, [sp, #264]	@ 0x108
 800abe8:	2303      	movs	r3, #3
 800abea:	e002      	b.n	800abf2 <__ssvfiscanf_r+0x1e6>
 800abec:	2308      	movs	r3, #8
 800abee:	9342      	str	r3, [sp, #264]	@ 0x108
 800abf0:	2304      	movs	r3, #4
 800abf2:	9347      	str	r3, [sp, #284]	@ 0x11c
 800abf4:	6863      	ldr	r3, [r4, #4]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	dd39      	ble.n	800ac6e <__ssvfiscanf_r+0x262>
 800abfa:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800abfc:	0659      	lsls	r1, r3, #25
 800abfe:	d404      	bmi.n	800ac0a <__ssvfiscanf_r+0x1fe>
 800ac00:	6823      	ldr	r3, [r4, #0]
 800ac02:	781a      	ldrb	r2, [r3, #0]
 800ac04:	5cba      	ldrb	r2, [r7, r2]
 800ac06:	0712      	lsls	r2, r2, #28
 800ac08:	d438      	bmi.n	800ac7c <__ssvfiscanf_r+0x270>
 800ac0a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800ac0c:	2b02      	cmp	r3, #2
 800ac0e:	dc47      	bgt.n	800aca0 <__ssvfiscanf_r+0x294>
 800ac10:	466b      	mov	r3, sp
 800ac12:	4622      	mov	r2, r4
 800ac14:	a941      	add	r1, sp, #260	@ 0x104
 800ac16:	4630      	mov	r0, r6
 800ac18:	f000 f9ae 	bl	800af78 <_scanf_chars>
 800ac1c:	2801      	cmp	r0, #1
 800ac1e:	d064      	beq.n	800acea <__ssvfiscanf_r+0x2de>
 800ac20:	2802      	cmp	r0, #2
 800ac22:	f47f af18 	bne.w	800aa56 <__ssvfiscanf_r+0x4a>
 800ac26:	e7c9      	b.n	800abbc <__ssvfiscanf_r+0x1b0>
 800ac28:	220a      	movs	r2, #10
 800ac2a:	e7d7      	b.n	800abdc <__ssvfiscanf_r+0x1d0>
 800ac2c:	4629      	mov	r1, r5
 800ac2e:	4640      	mov	r0, r8
 800ac30:	f000 fbfe 	bl	800b430 <__sccl>
 800ac34:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800ac36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac3a:	9341      	str	r3, [sp, #260]	@ 0x104
 800ac3c:	4605      	mov	r5, r0
 800ac3e:	2301      	movs	r3, #1
 800ac40:	e7d7      	b.n	800abf2 <__ssvfiscanf_r+0x1e6>
 800ac42:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800ac44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac48:	9341      	str	r3, [sp, #260]	@ 0x104
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	e7d1      	b.n	800abf2 <__ssvfiscanf_r+0x1e6>
 800ac4e:	2302      	movs	r3, #2
 800ac50:	e7cf      	b.n	800abf2 <__ssvfiscanf_r+0x1e6>
 800ac52:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800ac54:	06c3      	lsls	r3, r0, #27
 800ac56:	f53f aefe 	bmi.w	800aa56 <__ssvfiscanf_r+0x4a>
 800ac5a:	9b00      	ldr	r3, [sp, #0]
 800ac5c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800ac5e:	1d19      	adds	r1, r3, #4
 800ac60:	9100      	str	r1, [sp, #0]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	07c0      	lsls	r0, r0, #31
 800ac66:	bf4c      	ite	mi
 800ac68:	801a      	strhmi	r2, [r3, #0]
 800ac6a:	601a      	strpl	r2, [r3, #0]
 800ac6c:	e6f3      	b.n	800aa56 <__ssvfiscanf_r+0x4a>
 800ac6e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800ac70:	4621      	mov	r1, r4
 800ac72:	4630      	mov	r0, r6
 800ac74:	4798      	blx	r3
 800ac76:	2800      	cmp	r0, #0
 800ac78:	d0bf      	beq.n	800abfa <__ssvfiscanf_r+0x1ee>
 800ac7a:	e79f      	b.n	800abbc <__ssvfiscanf_r+0x1b0>
 800ac7c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800ac7e:	3201      	adds	r2, #1
 800ac80:	9245      	str	r2, [sp, #276]	@ 0x114
 800ac82:	6862      	ldr	r2, [r4, #4]
 800ac84:	3a01      	subs	r2, #1
 800ac86:	2a00      	cmp	r2, #0
 800ac88:	6062      	str	r2, [r4, #4]
 800ac8a:	dd02      	ble.n	800ac92 <__ssvfiscanf_r+0x286>
 800ac8c:	3301      	adds	r3, #1
 800ac8e:	6023      	str	r3, [r4, #0]
 800ac90:	e7b6      	b.n	800ac00 <__ssvfiscanf_r+0x1f4>
 800ac92:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800ac94:	4621      	mov	r1, r4
 800ac96:	4630      	mov	r0, r6
 800ac98:	4798      	blx	r3
 800ac9a:	2800      	cmp	r0, #0
 800ac9c:	d0b0      	beq.n	800ac00 <__ssvfiscanf_r+0x1f4>
 800ac9e:	e78d      	b.n	800abbc <__ssvfiscanf_r+0x1b0>
 800aca0:	2b04      	cmp	r3, #4
 800aca2:	dc0f      	bgt.n	800acc4 <__ssvfiscanf_r+0x2b8>
 800aca4:	466b      	mov	r3, sp
 800aca6:	4622      	mov	r2, r4
 800aca8:	a941      	add	r1, sp, #260	@ 0x104
 800acaa:	4630      	mov	r0, r6
 800acac:	f000 f9be 	bl	800b02c <_scanf_i>
 800acb0:	e7b4      	b.n	800ac1c <__ssvfiscanf_r+0x210>
 800acb2:	bf00      	nop
 800acb4:	0800a95d 	.word	0x0800a95d
 800acb8:	0800a9d3 	.word	0x0800a9d3
 800acbc:	0800cd12 	.word	0x0800cd12
 800acc0:	0800d02e 	.word	0x0800d02e
 800acc4:	4b0a      	ldr	r3, [pc, #40]	@ (800acf0 <__ssvfiscanf_r+0x2e4>)
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	f43f aec5 	beq.w	800aa56 <__ssvfiscanf_r+0x4a>
 800accc:	466b      	mov	r3, sp
 800acce:	4622      	mov	r2, r4
 800acd0:	a941      	add	r1, sp, #260	@ 0x104
 800acd2:	4630      	mov	r0, r6
 800acd4:	f3af 8000 	nop.w
 800acd8:	e7a0      	b.n	800ac1c <__ssvfiscanf_r+0x210>
 800acda:	89a3      	ldrh	r3, [r4, #12]
 800acdc:	065b      	lsls	r3, r3, #25
 800acde:	f53f af71 	bmi.w	800abc4 <__ssvfiscanf_r+0x1b8>
 800ace2:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800ace6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acea:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800acec:	e7f9      	b.n	800ace2 <__ssvfiscanf_r+0x2d6>
 800acee:	bf00      	nop
 800acf0:	00000000 	.word	0x00000000

0800acf4 <__sfputc_r>:
 800acf4:	6893      	ldr	r3, [r2, #8]
 800acf6:	3b01      	subs	r3, #1
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	b410      	push	{r4}
 800acfc:	6093      	str	r3, [r2, #8]
 800acfe:	da08      	bge.n	800ad12 <__sfputc_r+0x1e>
 800ad00:	6994      	ldr	r4, [r2, #24]
 800ad02:	42a3      	cmp	r3, r4
 800ad04:	db01      	blt.n	800ad0a <__sfputc_r+0x16>
 800ad06:	290a      	cmp	r1, #10
 800ad08:	d103      	bne.n	800ad12 <__sfputc_r+0x1e>
 800ad0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad0e:	f7fe b8b6 	b.w	8008e7e <__swbuf_r>
 800ad12:	6813      	ldr	r3, [r2, #0]
 800ad14:	1c58      	adds	r0, r3, #1
 800ad16:	6010      	str	r0, [r2, #0]
 800ad18:	7019      	strb	r1, [r3, #0]
 800ad1a:	4608      	mov	r0, r1
 800ad1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad20:	4770      	bx	lr

0800ad22 <__sfputs_r>:
 800ad22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad24:	4606      	mov	r6, r0
 800ad26:	460f      	mov	r7, r1
 800ad28:	4614      	mov	r4, r2
 800ad2a:	18d5      	adds	r5, r2, r3
 800ad2c:	42ac      	cmp	r4, r5
 800ad2e:	d101      	bne.n	800ad34 <__sfputs_r+0x12>
 800ad30:	2000      	movs	r0, #0
 800ad32:	e007      	b.n	800ad44 <__sfputs_r+0x22>
 800ad34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad38:	463a      	mov	r2, r7
 800ad3a:	4630      	mov	r0, r6
 800ad3c:	f7ff ffda 	bl	800acf4 <__sfputc_r>
 800ad40:	1c43      	adds	r3, r0, #1
 800ad42:	d1f3      	bne.n	800ad2c <__sfputs_r+0xa>
 800ad44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ad48 <_vfiprintf_r>:
 800ad48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad4c:	460d      	mov	r5, r1
 800ad4e:	b09d      	sub	sp, #116	@ 0x74
 800ad50:	4614      	mov	r4, r2
 800ad52:	4698      	mov	r8, r3
 800ad54:	4606      	mov	r6, r0
 800ad56:	b118      	cbz	r0, 800ad60 <_vfiprintf_r+0x18>
 800ad58:	6a03      	ldr	r3, [r0, #32]
 800ad5a:	b90b      	cbnz	r3, 800ad60 <_vfiprintf_r+0x18>
 800ad5c:	f7fd ff26 	bl	8008bac <__sinit>
 800ad60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ad62:	07d9      	lsls	r1, r3, #31
 800ad64:	d405      	bmi.n	800ad72 <_vfiprintf_r+0x2a>
 800ad66:	89ab      	ldrh	r3, [r5, #12]
 800ad68:	059a      	lsls	r2, r3, #22
 800ad6a:	d402      	bmi.n	800ad72 <_vfiprintf_r+0x2a>
 800ad6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ad6e:	f7fe f9bc 	bl	80090ea <__retarget_lock_acquire_recursive>
 800ad72:	89ab      	ldrh	r3, [r5, #12]
 800ad74:	071b      	lsls	r3, r3, #28
 800ad76:	d501      	bpl.n	800ad7c <_vfiprintf_r+0x34>
 800ad78:	692b      	ldr	r3, [r5, #16]
 800ad7a:	b99b      	cbnz	r3, 800ada4 <_vfiprintf_r+0x5c>
 800ad7c:	4629      	mov	r1, r5
 800ad7e:	4630      	mov	r0, r6
 800ad80:	f7fe f8bc 	bl	8008efc <__swsetup_r>
 800ad84:	b170      	cbz	r0, 800ada4 <_vfiprintf_r+0x5c>
 800ad86:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ad88:	07dc      	lsls	r4, r3, #31
 800ad8a:	d504      	bpl.n	800ad96 <_vfiprintf_r+0x4e>
 800ad8c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad90:	b01d      	add	sp, #116	@ 0x74
 800ad92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad96:	89ab      	ldrh	r3, [r5, #12]
 800ad98:	0598      	lsls	r0, r3, #22
 800ad9a:	d4f7      	bmi.n	800ad8c <_vfiprintf_r+0x44>
 800ad9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ad9e:	f7fe f9a5 	bl	80090ec <__retarget_lock_release_recursive>
 800ada2:	e7f3      	b.n	800ad8c <_vfiprintf_r+0x44>
 800ada4:	2300      	movs	r3, #0
 800ada6:	9309      	str	r3, [sp, #36]	@ 0x24
 800ada8:	2320      	movs	r3, #32
 800adaa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800adae:	f8cd 800c 	str.w	r8, [sp, #12]
 800adb2:	2330      	movs	r3, #48	@ 0x30
 800adb4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800af64 <_vfiprintf_r+0x21c>
 800adb8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800adbc:	f04f 0901 	mov.w	r9, #1
 800adc0:	4623      	mov	r3, r4
 800adc2:	469a      	mov	sl, r3
 800adc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800adc8:	b10a      	cbz	r2, 800adce <_vfiprintf_r+0x86>
 800adca:	2a25      	cmp	r2, #37	@ 0x25
 800adcc:	d1f9      	bne.n	800adc2 <_vfiprintf_r+0x7a>
 800adce:	ebba 0b04 	subs.w	fp, sl, r4
 800add2:	d00b      	beq.n	800adec <_vfiprintf_r+0xa4>
 800add4:	465b      	mov	r3, fp
 800add6:	4622      	mov	r2, r4
 800add8:	4629      	mov	r1, r5
 800adda:	4630      	mov	r0, r6
 800addc:	f7ff ffa1 	bl	800ad22 <__sfputs_r>
 800ade0:	3001      	adds	r0, #1
 800ade2:	f000 80a7 	beq.w	800af34 <_vfiprintf_r+0x1ec>
 800ade6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ade8:	445a      	add	r2, fp
 800adea:	9209      	str	r2, [sp, #36]	@ 0x24
 800adec:	f89a 3000 	ldrb.w	r3, [sl]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	f000 809f 	beq.w	800af34 <_vfiprintf_r+0x1ec>
 800adf6:	2300      	movs	r3, #0
 800adf8:	f04f 32ff 	mov.w	r2, #4294967295
 800adfc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae00:	f10a 0a01 	add.w	sl, sl, #1
 800ae04:	9304      	str	r3, [sp, #16]
 800ae06:	9307      	str	r3, [sp, #28]
 800ae08:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ae0c:	931a      	str	r3, [sp, #104]	@ 0x68
 800ae0e:	4654      	mov	r4, sl
 800ae10:	2205      	movs	r2, #5
 800ae12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae16:	4853      	ldr	r0, [pc, #332]	@ (800af64 <_vfiprintf_r+0x21c>)
 800ae18:	f7f5 f9e2 	bl	80001e0 <memchr>
 800ae1c:	9a04      	ldr	r2, [sp, #16]
 800ae1e:	b9d8      	cbnz	r0, 800ae58 <_vfiprintf_r+0x110>
 800ae20:	06d1      	lsls	r1, r2, #27
 800ae22:	bf44      	itt	mi
 800ae24:	2320      	movmi	r3, #32
 800ae26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae2a:	0713      	lsls	r3, r2, #28
 800ae2c:	bf44      	itt	mi
 800ae2e:	232b      	movmi	r3, #43	@ 0x2b
 800ae30:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae34:	f89a 3000 	ldrb.w	r3, [sl]
 800ae38:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae3a:	d015      	beq.n	800ae68 <_vfiprintf_r+0x120>
 800ae3c:	9a07      	ldr	r2, [sp, #28]
 800ae3e:	4654      	mov	r4, sl
 800ae40:	2000      	movs	r0, #0
 800ae42:	f04f 0c0a 	mov.w	ip, #10
 800ae46:	4621      	mov	r1, r4
 800ae48:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae4c:	3b30      	subs	r3, #48	@ 0x30
 800ae4e:	2b09      	cmp	r3, #9
 800ae50:	d94b      	bls.n	800aeea <_vfiprintf_r+0x1a2>
 800ae52:	b1b0      	cbz	r0, 800ae82 <_vfiprintf_r+0x13a>
 800ae54:	9207      	str	r2, [sp, #28]
 800ae56:	e014      	b.n	800ae82 <_vfiprintf_r+0x13a>
 800ae58:	eba0 0308 	sub.w	r3, r0, r8
 800ae5c:	fa09 f303 	lsl.w	r3, r9, r3
 800ae60:	4313      	orrs	r3, r2
 800ae62:	9304      	str	r3, [sp, #16]
 800ae64:	46a2      	mov	sl, r4
 800ae66:	e7d2      	b.n	800ae0e <_vfiprintf_r+0xc6>
 800ae68:	9b03      	ldr	r3, [sp, #12]
 800ae6a:	1d19      	adds	r1, r3, #4
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	9103      	str	r1, [sp, #12]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	bfbb      	ittet	lt
 800ae74:	425b      	neglt	r3, r3
 800ae76:	f042 0202 	orrlt.w	r2, r2, #2
 800ae7a:	9307      	strge	r3, [sp, #28]
 800ae7c:	9307      	strlt	r3, [sp, #28]
 800ae7e:	bfb8      	it	lt
 800ae80:	9204      	strlt	r2, [sp, #16]
 800ae82:	7823      	ldrb	r3, [r4, #0]
 800ae84:	2b2e      	cmp	r3, #46	@ 0x2e
 800ae86:	d10a      	bne.n	800ae9e <_vfiprintf_r+0x156>
 800ae88:	7863      	ldrb	r3, [r4, #1]
 800ae8a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae8c:	d132      	bne.n	800aef4 <_vfiprintf_r+0x1ac>
 800ae8e:	9b03      	ldr	r3, [sp, #12]
 800ae90:	1d1a      	adds	r2, r3, #4
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	9203      	str	r2, [sp, #12]
 800ae96:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ae9a:	3402      	adds	r4, #2
 800ae9c:	9305      	str	r3, [sp, #20]
 800ae9e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800af74 <_vfiprintf_r+0x22c>
 800aea2:	7821      	ldrb	r1, [r4, #0]
 800aea4:	2203      	movs	r2, #3
 800aea6:	4650      	mov	r0, sl
 800aea8:	f7f5 f99a 	bl	80001e0 <memchr>
 800aeac:	b138      	cbz	r0, 800aebe <_vfiprintf_r+0x176>
 800aeae:	9b04      	ldr	r3, [sp, #16]
 800aeb0:	eba0 000a 	sub.w	r0, r0, sl
 800aeb4:	2240      	movs	r2, #64	@ 0x40
 800aeb6:	4082      	lsls	r2, r0
 800aeb8:	4313      	orrs	r3, r2
 800aeba:	3401      	adds	r4, #1
 800aebc:	9304      	str	r3, [sp, #16]
 800aebe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aec2:	4829      	ldr	r0, [pc, #164]	@ (800af68 <_vfiprintf_r+0x220>)
 800aec4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aec8:	2206      	movs	r2, #6
 800aeca:	f7f5 f989 	bl	80001e0 <memchr>
 800aece:	2800      	cmp	r0, #0
 800aed0:	d03f      	beq.n	800af52 <_vfiprintf_r+0x20a>
 800aed2:	4b26      	ldr	r3, [pc, #152]	@ (800af6c <_vfiprintf_r+0x224>)
 800aed4:	bb1b      	cbnz	r3, 800af1e <_vfiprintf_r+0x1d6>
 800aed6:	9b03      	ldr	r3, [sp, #12]
 800aed8:	3307      	adds	r3, #7
 800aeda:	f023 0307 	bic.w	r3, r3, #7
 800aede:	3308      	adds	r3, #8
 800aee0:	9303      	str	r3, [sp, #12]
 800aee2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aee4:	443b      	add	r3, r7
 800aee6:	9309      	str	r3, [sp, #36]	@ 0x24
 800aee8:	e76a      	b.n	800adc0 <_vfiprintf_r+0x78>
 800aeea:	fb0c 3202 	mla	r2, ip, r2, r3
 800aeee:	460c      	mov	r4, r1
 800aef0:	2001      	movs	r0, #1
 800aef2:	e7a8      	b.n	800ae46 <_vfiprintf_r+0xfe>
 800aef4:	2300      	movs	r3, #0
 800aef6:	3401      	adds	r4, #1
 800aef8:	9305      	str	r3, [sp, #20]
 800aefa:	4619      	mov	r1, r3
 800aefc:	f04f 0c0a 	mov.w	ip, #10
 800af00:	4620      	mov	r0, r4
 800af02:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af06:	3a30      	subs	r2, #48	@ 0x30
 800af08:	2a09      	cmp	r2, #9
 800af0a:	d903      	bls.n	800af14 <_vfiprintf_r+0x1cc>
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d0c6      	beq.n	800ae9e <_vfiprintf_r+0x156>
 800af10:	9105      	str	r1, [sp, #20]
 800af12:	e7c4      	b.n	800ae9e <_vfiprintf_r+0x156>
 800af14:	fb0c 2101 	mla	r1, ip, r1, r2
 800af18:	4604      	mov	r4, r0
 800af1a:	2301      	movs	r3, #1
 800af1c:	e7f0      	b.n	800af00 <_vfiprintf_r+0x1b8>
 800af1e:	ab03      	add	r3, sp, #12
 800af20:	9300      	str	r3, [sp, #0]
 800af22:	462a      	mov	r2, r5
 800af24:	4b12      	ldr	r3, [pc, #72]	@ (800af70 <_vfiprintf_r+0x228>)
 800af26:	a904      	add	r1, sp, #16
 800af28:	4630      	mov	r0, r6
 800af2a:	f7fd f9fb 	bl	8008324 <_printf_float>
 800af2e:	4607      	mov	r7, r0
 800af30:	1c78      	adds	r0, r7, #1
 800af32:	d1d6      	bne.n	800aee2 <_vfiprintf_r+0x19a>
 800af34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800af36:	07d9      	lsls	r1, r3, #31
 800af38:	d405      	bmi.n	800af46 <_vfiprintf_r+0x1fe>
 800af3a:	89ab      	ldrh	r3, [r5, #12]
 800af3c:	059a      	lsls	r2, r3, #22
 800af3e:	d402      	bmi.n	800af46 <_vfiprintf_r+0x1fe>
 800af40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800af42:	f7fe f8d3 	bl	80090ec <__retarget_lock_release_recursive>
 800af46:	89ab      	ldrh	r3, [r5, #12]
 800af48:	065b      	lsls	r3, r3, #25
 800af4a:	f53f af1f 	bmi.w	800ad8c <_vfiprintf_r+0x44>
 800af4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800af50:	e71e      	b.n	800ad90 <_vfiprintf_r+0x48>
 800af52:	ab03      	add	r3, sp, #12
 800af54:	9300      	str	r3, [sp, #0]
 800af56:	462a      	mov	r2, r5
 800af58:	4b05      	ldr	r3, [pc, #20]	@ (800af70 <_vfiprintf_r+0x228>)
 800af5a:	a904      	add	r1, sp, #16
 800af5c:	4630      	mov	r0, r6
 800af5e:	f7fd fc79 	bl	8008854 <_printf_i>
 800af62:	e7e4      	b.n	800af2e <_vfiprintf_r+0x1e6>
 800af64:	0800d028 	.word	0x0800d028
 800af68:	0800d032 	.word	0x0800d032
 800af6c:	08008325 	.word	0x08008325
 800af70:	0800ad23 	.word	0x0800ad23
 800af74:	0800d02e 	.word	0x0800d02e

0800af78 <_scanf_chars>:
 800af78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af7c:	4615      	mov	r5, r2
 800af7e:	688a      	ldr	r2, [r1, #8]
 800af80:	4680      	mov	r8, r0
 800af82:	460c      	mov	r4, r1
 800af84:	b932      	cbnz	r2, 800af94 <_scanf_chars+0x1c>
 800af86:	698a      	ldr	r2, [r1, #24]
 800af88:	2a00      	cmp	r2, #0
 800af8a:	bf14      	ite	ne
 800af8c:	f04f 32ff 	movne.w	r2, #4294967295
 800af90:	2201      	moveq	r2, #1
 800af92:	608a      	str	r2, [r1, #8]
 800af94:	6822      	ldr	r2, [r4, #0]
 800af96:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800b028 <_scanf_chars+0xb0>
 800af9a:	06d1      	lsls	r1, r2, #27
 800af9c:	bf5f      	itttt	pl
 800af9e:	681a      	ldrpl	r2, [r3, #0]
 800afa0:	1d11      	addpl	r1, r2, #4
 800afa2:	6019      	strpl	r1, [r3, #0]
 800afa4:	6816      	ldrpl	r6, [r2, #0]
 800afa6:	2700      	movs	r7, #0
 800afa8:	69a0      	ldr	r0, [r4, #24]
 800afaa:	b188      	cbz	r0, 800afd0 <_scanf_chars+0x58>
 800afac:	2801      	cmp	r0, #1
 800afae:	d107      	bne.n	800afc0 <_scanf_chars+0x48>
 800afb0:	682b      	ldr	r3, [r5, #0]
 800afb2:	781a      	ldrb	r2, [r3, #0]
 800afb4:	6963      	ldr	r3, [r4, #20]
 800afb6:	5c9b      	ldrb	r3, [r3, r2]
 800afb8:	b953      	cbnz	r3, 800afd0 <_scanf_chars+0x58>
 800afba:	2f00      	cmp	r7, #0
 800afbc:	d031      	beq.n	800b022 <_scanf_chars+0xaa>
 800afbe:	e022      	b.n	800b006 <_scanf_chars+0x8e>
 800afc0:	2802      	cmp	r0, #2
 800afc2:	d120      	bne.n	800b006 <_scanf_chars+0x8e>
 800afc4:	682b      	ldr	r3, [r5, #0]
 800afc6:	781b      	ldrb	r3, [r3, #0]
 800afc8:	f819 3003 	ldrb.w	r3, [r9, r3]
 800afcc:	071b      	lsls	r3, r3, #28
 800afce:	d41a      	bmi.n	800b006 <_scanf_chars+0x8e>
 800afd0:	6823      	ldr	r3, [r4, #0]
 800afd2:	06da      	lsls	r2, r3, #27
 800afd4:	bf5e      	ittt	pl
 800afd6:	682b      	ldrpl	r3, [r5, #0]
 800afd8:	781b      	ldrbpl	r3, [r3, #0]
 800afda:	f806 3b01 	strbpl.w	r3, [r6], #1
 800afde:	682a      	ldr	r2, [r5, #0]
 800afe0:	686b      	ldr	r3, [r5, #4]
 800afe2:	3201      	adds	r2, #1
 800afe4:	602a      	str	r2, [r5, #0]
 800afe6:	68a2      	ldr	r2, [r4, #8]
 800afe8:	3b01      	subs	r3, #1
 800afea:	3a01      	subs	r2, #1
 800afec:	606b      	str	r3, [r5, #4]
 800afee:	3701      	adds	r7, #1
 800aff0:	60a2      	str	r2, [r4, #8]
 800aff2:	b142      	cbz	r2, 800b006 <_scanf_chars+0x8e>
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	dcd7      	bgt.n	800afa8 <_scanf_chars+0x30>
 800aff8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800affc:	4629      	mov	r1, r5
 800affe:	4640      	mov	r0, r8
 800b000:	4798      	blx	r3
 800b002:	2800      	cmp	r0, #0
 800b004:	d0d0      	beq.n	800afa8 <_scanf_chars+0x30>
 800b006:	6823      	ldr	r3, [r4, #0]
 800b008:	f013 0310 	ands.w	r3, r3, #16
 800b00c:	d105      	bne.n	800b01a <_scanf_chars+0xa2>
 800b00e:	68e2      	ldr	r2, [r4, #12]
 800b010:	3201      	adds	r2, #1
 800b012:	60e2      	str	r2, [r4, #12]
 800b014:	69a2      	ldr	r2, [r4, #24]
 800b016:	b102      	cbz	r2, 800b01a <_scanf_chars+0xa2>
 800b018:	7033      	strb	r3, [r6, #0]
 800b01a:	6923      	ldr	r3, [r4, #16]
 800b01c:	443b      	add	r3, r7
 800b01e:	6123      	str	r3, [r4, #16]
 800b020:	2000      	movs	r0, #0
 800b022:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b026:	bf00      	nop
 800b028:	0800cd12 	.word	0x0800cd12

0800b02c <_scanf_i>:
 800b02c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b030:	4698      	mov	r8, r3
 800b032:	4b74      	ldr	r3, [pc, #464]	@ (800b204 <_scanf_i+0x1d8>)
 800b034:	460c      	mov	r4, r1
 800b036:	4682      	mov	sl, r0
 800b038:	4616      	mov	r6, r2
 800b03a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b03e:	b087      	sub	sp, #28
 800b040:	ab03      	add	r3, sp, #12
 800b042:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b046:	4b70      	ldr	r3, [pc, #448]	@ (800b208 <_scanf_i+0x1dc>)
 800b048:	69a1      	ldr	r1, [r4, #24]
 800b04a:	4a70      	ldr	r2, [pc, #448]	@ (800b20c <_scanf_i+0x1e0>)
 800b04c:	2903      	cmp	r1, #3
 800b04e:	bf08      	it	eq
 800b050:	461a      	moveq	r2, r3
 800b052:	68a3      	ldr	r3, [r4, #8]
 800b054:	9201      	str	r2, [sp, #4]
 800b056:	1e5a      	subs	r2, r3, #1
 800b058:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b05c:	bf88      	it	hi
 800b05e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b062:	4627      	mov	r7, r4
 800b064:	bf82      	ittt	hi
 800b066:	eb03 0905 	addhi.w	r9, r3, r5
 800b06a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b06e:	60a3      	strhi	r3, [r4, #8]
 800b070:	f857 3b1c 	ldr.w	r3, [r7], #28
 800b074:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800b078:	bf98      	it	ls
 800b07a:	f04f 0900 	movls.w	r9, #0
 800b07e:	6023      	str	r3, [r4, #0]
 800b080:	463d      	mov	r5, r7
 800b082:	f04f 0b00 	mov.w	fp, #0
 800b086:	6831      	ldr	r1, [r6, #0]
 800b088:	ab03      	add	r3, sp, #12
 800b08a:	7809      	ldrb	r1, [r1, #0]
 800b08c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800b090:	2202      	movs	r2, #2
 800b092:	f7f5 f8a5 	bl	80001e0 <memchr>
 800b096:	b328      	cbz	r0, 800b0e4 <_scanf_i+0xb8>
 800b098:	f1bb 0f01 	cmp.w	fp, #1
 800b09c:	d159      	bne.n	800b152 <_scanf_i+0x126>
 800b09e:	6862      	ldr	r2, [r4, #4]
 800b0a0:	b92a      	cbnz	r2, 800b0ae <_scanf_i+0x82>
 800b0a2:	6822      	ldr	r2, [r4, #0]
 800b0a4:	2108      	movs	r1, #8
 800b0a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b0aa:	6061      	str	r1, [r4, #4]
 800b0ac:	6022      	str	r2, [r4, #0]
 800b0ae:	6822      	ldr	r2, [r4, #0]
 800b0b0:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800b0b4:	6022      	str	r2, [r4, #0]
 800b0b6:	68a2      	ldr	r2, [r4, #8]
 800b0b8:	1e51      	subs	r1, r2, #1
 800b0ba:	60a1      	str	r1, [r4, #8]
 800b0bc:	b192      	cbz	r2, 800b0e4 <_scanf_i+0xb8>
 800b0be:	6832      	ldr	r2, [r6, #0]
 800b0c0:	1c51      	adds	r1, r2, #1
 800b0c2:	6031      	str	r1, [r6, #0]
 800b0c4:	7812      	ldrb	r2, [r2, #0]
 800b0c6:	f805 2b01 	strb.w	r2, [r5], #1
 800b0ca:	6872      	ldr	r2, [r6, #4]
 800b0cc:	3a01      	subs	r2, #1
 800b0ce:	2a00      	cmp	r2, #0
 800b0d0:	6072      	str	r2, [r6, #4]
 800b0d2:	dc07      	bgt.n	800b0e4 <_scanf_i+0xb8>
 800b0d4:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800b0d8:	4631      	mov	r1, r6
 800b0da:	4650      	mov	r0, sl
 800b0dc:	4790      	blx	r2
 800b0de:	2800      	cmp	r0, #0
 800b0e0:	f040 8085 	bne.w	800b1ee <_scanf_i+0x1c2>
 800b0e4:	f10b 0b01 	add.w	fp, fp, #1
 800b0e8:	f1bb 0f03 	cmp.w	fp, #3
 800b0ec:	d1cb      	bne.n	800b086 <_scanf_i+0x5a>
 800b0ee:	6863      	ldr	r3, [r4, #4]
 800b0f0:	b90b      	cbnz	r3, 800b0f6 <_scanf_i+0xca>
 800b0f2:	230a      	movs	r3, #10
 800b0f4:	6063      	str	r3, [r4, #4]
 800b0f6:	6863      	ldr	r3, [r4, #4]
 800b0f8:	4945      	ldr	r1, [pc, #276]	@ (800b210 <_scanf_i+0x1e4>)
 800b0fa:	6960      	ldr	r0, [r4, #20]
 800b0fc:	1ac9      	subs	r1, r1, r3
 800b0fe:	f000 f997 	bl	800b430 <__sccl>
 800b102:	f04f 0b00 	mov.w	fp, #0
 800b106:	68a3      	ldr	r3, [r4, #8]
 800b108:	6822      	ldr	r2, [r4, #0]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d03d      	beq.n	800b18a <_scanf_i+0x15e>
 800b10e:	6831      	ldr	r1, [r6, #0]
 800b110:	6960      	ldr	r0, [r4, #20]
 800b112:	f891 c000 	ldrb.w	ip, [r1]
 800b116:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b11a:	2800      	cmp	r0, #0
 800b11c:	d035      	beq.n	800b18a <_scanf_i+0x15e>
 800b11e:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800b122:	d124      	bne.n	800b16e <_scanf_i+0x142>
 800b124:	0510      	lsls	r0, r2, #20
 800b126:	d522      	bpl.n	800b16e <_scanf_i+0x142>
 800b128:	f10b 0b01 	add.w	fp, fp, #1
 800b12c:	f1b9 0f00 	cmp.w	r9, #0
 800b130:	d003      	beq.n	800b13a <_scanf_i+0x10e>
 800b132:	3301      	adds	r3, #1
 800b134:	f109 39ff 	add.w	r9, r9, #4294967295
 800b138:	60a3      	str	r3, [r4, #8]
 800b13a:	6873      	ldr	r3, [r6, #4]
 800b13c:	3b01      	subs	r3, #1
 800b13e:	2b00      	cmp	r3, #0
 800b140:	6073      	str	r3, [r6, #4]
 800b142:	dd1b      	ble.n	800b17c <_scanf_i+0x150>
 800b144:	6833      	ldr	r3, [r6, #0]
 800b146:	3301      	adds	r3, #1
 800b148:	6033      	str	r3, [r6, #0]
 800b14a:	68a3      	ldr	r3, [r4, #8]
 800b14c:	3b01      	subs	r3, #1
 800b14e:	60a3      	str	r3, [r4, #8]
 800b150:	e7d9      	b.n	800b106 <_scanf_i+0xda>
 800b152:	f1bb 0f02 	cmp.w	fp, #2
 800b156:	d1ae      	bne.n	800b0b6 <_scanf_i+0x8a>
 800b158:	6822      	ldr	r2, [r4, #0]
 800b15a:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800b15e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800b162:	d1bf      	bne.n	800b0e4 <_scanf_i+0xb8>
 800b164:	2110      	movs	r1, #16
 800b166:	6061      	str	r1, [r4, #4]
 800b168:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b16c:	e7a2      	b.n	800b0b4 <_scanf_i+0x88>
 800b16e:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800b172:	6022      	str	r2, [r4, #0]
 800b174:	780b      	ldrb	r3, [r1, #0]
 800b176:	f805 3b01 	strb.w	r3, [r5], #1
 800b17a:	e7de      	b.n	800b13a <_scanf_i+0x10e>
 800b17c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b180:	4631      	mov	r1, r6
 800b182:	4650      	mov	r0, sl
 800b184:	4798      	blx	r3
 800b186:	2800      	cmp	r0, #0
 800b188:	d0df      	beq.n	800b14a <_scanf_i+0x11e>
 800b18a:	6823      	ldr	r3, [r4, #0]
 800b18c:	05d9      	lsls	r1, r3, #23
 800b18e:	d50d      	bpl.n	800b1ac <_scanf_i+0x180>
 800b190:	42bd      	cmp	r5, r7
 800b192:	d909      	bls.n	800b1a8 <_scanf_i+0x17c>
 800b194:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b198:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b19c:	4632      	mov	r2, r6
 800b19e:	4650      	mov	r0, sl
 800b1a0:	4798      	blx	r3
 800b1a2:	f105 39ff 	add.w	r9, r5, #4294967295
 800b1a6:	464d      	mov	r5, r9
 800b1a8:	42bd      	cmp	r5, r7
 800b1aa:	d028      	beq.n	800b1fe <_scanf_i+0x1d2>
 800b1ac:	6822      	ldr	r2, [r4, #0]
 800b1ae:	f012 0210 	ands.w	r2, r2, #16
 800b1b2:	d113      	bne.n	800b1dc <_scanf_i+0x1b0>
 800b1b4:	702a      	strb	r2, [r5, #0]
 800b1b6:	6863      	ldr	r3, [r4, #4]
 800b1b8:	9e01      	ldr	r6, [sp, #4]
 800b1ba:	4639      	mov	r1, r7
 800b1bc:	4650      	mov	r0, sl
 800b1be:	47b0      	blx	r6
 800b1c0:	f8d8 3000 	ldr.w	r3, [r8]
 800b1c4:	6821      	ldr	r1, [r4, #0]
 800b1c6:	1d1a      	adds	r2, r3, #4
 800b1c8:	f8c8 2000 	str.w	r2, [r8]
 800b1cc:	f011 0f20 	tst.w	r1, #32
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	d00f      	beq.n	800b1f4 <_scanf_i+0x1c8>
 800b1d4:	6018      	str	r0, [r3, #0]
 800b1d6:	68e3      	ldr	r3, [r4, #12]
 800b1d8:	3301      	adds	r3, #1
 800b1da:	60e3      	str	r3, [r4, #12]
 800b1dc:	6923      	ldr	r3, [r4, #16]
 800b1de:	1bed      	subs	r5, r5, r7
 800b1e0:	445d      	add	r5, fp
 800b1e2:	442b      	add	r3, r5
 800b1e4:	6123      	str	r3, [r4, #16]
 800b1e6:	2000      	movs	r0, #0
 800b1e8:	b007      	add	sp, #28
 800b1ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1ee:	f04f 0b00 	mov.w	fp, #0
 800b1f2:	e7ca      	b.n	800b18a <_scanf_i+0x15e>
 800b1f4:	07ca      	lsls	r2, r1, #31
 800b1f6:	bf4c      	ite	mi
 800b1f8:	8018      	strhmi	r0, [r3, #0]
 800b1fa:	6018      	strpl	r0, [r3, #0]
 800b1fc:	e7eb      	b.n	800b1d6 <_scanf_i+0x1aa>
 800b1fe:	2001      	movs	r0, #1
 800b200:	e7f2      	b.n	800b1e8 <_scanf_i+0x1bc>
 800b202:	bf00      	nop
 800b204:	0800ccb0 	.word	0x0800ccb0
 800b208:	080081e1 	.word	0x080081e1
 800b20c:	0800b771 	.word	0x0800b771
 800b210:	0800d049 	.word	0x0800d049

0800b214 <__sflush_r>:
 800b214:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b21c:	0716      	lsls	r6, r2, #28
 800b21e:	4605      	mov	r5, r0
 800b220:	460c      	mov	r4, r1
 800b222:	d454      	bmi.n	800b2ce <__sflush_r+0xba>
 800b224:	684b      	ldr	r3, [r1, #4]
 800b226:	2b00      	cmp	r3, #0
 800b228:	dc02      	bgt.n	800b230 <__sflush_r+0x1c>
 800b22a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	dd48      	ble.n	800b2c2 <__sflush_r+0xae>
 800b230:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b232:	2e00      	cmp	r6, #0
 800b234:	d045      	beq.n	800b2c2 <__sflush_r+0xae>
 800b236:	2300      	movs	r3, #0
 800b238:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b23c:	682f      	ldr	r7, [r5, #0]
 800b23e:	6a21      	ldr	r1, [r4, #32]
 800b240:	602b      	str	r3, [r5, #0]
 800b242:	d030      	beq.n	800b2a6 <__sflush_r+0x92>
 800b244:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b246:	89a3      	ldrh	r3, [r4, #12]
 800b248:	0759      	lsls	r1, r3, #29
 800b24a:	d505      	bpl.n	800b258 <__sflush_r+0x44>
 800b24c:	6863      	ldr	r3, [r4, #4]
 800b24e:	1ad2      	subs	r2, r2, r3
 800b250:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b252:	b10b      	cbz	r3, 800b258 <__sflush_r+0x44>
 800b254:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b256:	1ad2      	subs	r2, r2, r3
 800b258:	2300      	movs	r3, #0
 800b25a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b25c:	6a21      	ldr	r1, [r4, #32]
 800b25e:	4628      	mov	r0, r5
 800b260:	47b0      	blx	r6
 800b262:	1c43      	adds	r3, r0, #1
 800b264:	89a3      	ldrh	r3, [r4, #12]
 800b266:	d106      	bne.n	800b276 <__sflush_r+0x62>
 800b268:	6829      	ldr	r1, [r5, #0]
 800b26a:	291d      	cmp	r1, #29
 800b26c:	d82b      	bhi.n	800b2c6 <__sflush_r+0xb2>
 800b26e:	4a2a      	ldr	r2, [pc, #168]	@ (800b318 <__sflush_r+0x104>)
 800b270:	410a      	asrs	r2, r1
 800b272:	07d6      	lsls	r6, r2, #31
 800b274:	d427      	bmi.n	800b2c6 <__sflush_r+0xb2>
 800b276:	2200      	movs	r2, #0
 800b278:	6062      	str	r2, [r4, #4]
 800b27a:	04d9      	lsls	r1, r3, #19
 800b27c:	6922      	ldr	r2, [r4, #16]
 800b27e:	6022      	str	r2, [r4, #0]
 800b280:	d504      	bpl.n	800b28c <__sflush_r+0x78>
 800b282:	1c42      	adds	r2, r0, #1
 800b284:	d101      	bne.n	800b28a <__sflush_r+0x76>
 800b286:	682b      	ldr	r3, [r5, #0]
 800b288:	b903      	cbnz	r3, 800b28c <__sflush_r+0x78>
 800b28a:	6560      	str	r0, [r4, #84]	@ 0x54
 800b28c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b28e:	602f      	str	r7, [r5, #0]
 800b290:	b1b9      	cbz	r1, 800b2c2 <__sflush_r+0xae>
 800b292:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b296:	4299      	cmp	r1, r3
 800b298:	d002      	beq.n	800b2a0 <__sflush_r+0x8c>
 800b29a:	4628      	mov	r0, r5
 800b29c:	f7fe fd84 	bl	8009da8 <_free_r>
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	6363      	str	r3, [r4, #52]	@ 0x34
 800b2a4:	e00d      	b.n	800b2c2 <__sflush_r+0xae>
 800b2a6:	2301      	movs	r3, #1
 800b2a8:	4628      	mov	r0, r5
 800b2aa:	47b0      	blx	r6
 800b2ac:	4602      	mov	r2, r0
 800b2ae:	1c50      	adds	r0, r2, #1
 800b2b0:	d1c9      	bne.n	800b246 <__sflush_r+0x32>
 800b2b2:	682b      	ldr	r3, [r5, #0]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d0c6      	beq.n	800b246 <__sflush_r+0x32>
 800b2b8:	2b1d      	cmp	r3, #29
 800b2ba:	d001      	beq.n	800b2c0 <__sflush_r+0xac>
 800b2bc:	2b16      	cmp	r3, #22
 800b2be:	d11e      	bne.n	800b2fe <__sflush_r+0xea>
 800b2c0:	602f      	str	r7, [r5, #0]
 800b2c2:	2000      	movs	r0, #0
 800b2c4:	e022      	b.n	800b30c <__sflush_r+0xf8>
 800b2c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b2ca:	b21b      	sxth	r3, r3
 800b2cc:	e01b      	b.n	800b306 <__sflush_r+0xf2>
 800b2ce:	690f      	ldr	r7, [r1, #16]
 800b2d0:	2f00      	cmp	r7, #0
 800b2d2:	d0f6      	beq.n	800b2c2 <__sflush_r+0xae>
 800b2d4:	0793      	lsls	r3, r2, #30
 800b2d6:	680e      	ldr	r6, [r1, #0]
 800b2d8:	bf08      	it	eq
 800b2da:	694b      	ldreq	r3, [r1, #20]
 800b2dc:	600f      	str	r7, [r1, #0]
 800b2de:	bf18      	it	ne
 800b2e0:	2300      	movne	r3, #0
 800b2e2:	eba6 0807 	sub.w	r8, r6, r7
 800b2e6:	608b      	str	r3, [r1, #8]
 800b2e8:	f1b8 0f00 	cmp.w	r8, #0
 800b2ec:	dde9      	ble.n	800b2c2 <__sflush_r+0xae>
 800b2ee:	6a21      	ldr	r1, [r4, #32]
 800b2f0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b2f2:	4643      	mov	r3, r8
 800b2f4:	463a      	mov	r2, r7
 800b2f6:	4628      	mov	r0, r5
 800b2f8:	47b0      	blx	r6
 800b2fa:	2800      	cmp	r0, #0
 800b2fc:	dc08      	bgt.n	800b310 <__sflush_r+0xfc>
 800b2fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b302:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b306:	81a3      	strh	r3, [r4, #12]
 800b308:	f04f 30ff 	mov.w	r0, #4294967295
 800b30c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b310:	4407      	add	r7, r0
 800b312:	eba8 0800 	sub.w	r8, r8, r0
 800b316:	e7e7      	b.n	800b2e8 <__sflush_r+0xd4>
 800b318:	dfbffffe 	.word	0xdfbffffe

0800b31c <_fflush_r>:
 800b31c:	b538      	push	{r3, r4, r5, lr}
 800b31e:	690b      	ldr	r3, [r1, #16]
 800b320:	4605      	mov	r5, r0
 800b322:	460c      	mov	r4, r1
 800b324:	b913      	cbnz	r3, 800b32c <_fflush_r+0x10>
 800b326:	2500      	movs	r5, #0
 800b328:	4628      	mov	r0, r5
 800b32a:	bd38      	pop	{r3, r4, r5, pc}
 800b32c:	b118      	cbz	r0, 800b336 <_fflush_r+0x1a>
 800b32e:	6a03      	ldr	r3, [r0, #32]
 800b330:	b90b      	cbnz	r3, 800b336 <_fflush_r+0x1a>
 800b332:	f7fd fc3b 	bl	8008bac <__sinit>
 800b336:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d0f3      	beq.n	800b326 <_fflush_r+0xa>
 800b33e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b340:	07d0      	lsls	r0, r2, #31
 800b342:	d404      	bmi.n	800b34e <_fflush_r+0x32>
 800b344:	0599      	lsls	r1, r3, #22
 800b346:	d402      	bmi.n	800b34e <_fflush_r+0x32>
 800b348:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b34a:	f7fd fece 	bl	80090ea <__retarget_lock_acquire_recursive>
 800b34e:	4628      	mov	r0, r5
 800b350:	4621      	mov	r1, r4
 800b352:	f7ff ff5f 	bl	800b214 <__sflush_r>
 800b356:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b358:	07da      	lsls	r2, r3, #31
 800b35a:	4605      	mov	r5, r0
 800b35c:	d4e4      	bmi.n	800b328 <_fflush_r+0xc>
 800b35e:	89a3      	ldrh	r3, [r4, #12]
 800b360:	059b      	lsls	r3, r3, #22
 800b362:	d4e1      	bmi.n	800b328 <_fflush_r+0xc>
 800b364:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b366:	f7fd fec1 	bl	80090ec <__retarget_lock_release_recursive>
 800b36a:	e7dd      	b.n	800b328 <_fflush_r+0xc>

0800b36c <__swhatbuf_r>:
 800b36c:	b570      	push	{r4, r5, r6, lr}
 800b36e:	460c      	mov	r4, r1
 800b370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b374:	2900      	cmp	r1, #0
 800b376:	b096      	sub	sp, #88	@ 0x58
 800b378:	4615      	mov	r5, r2
 800b37a:	461e      	mov	r6, r3
 800b37c:	da0d      	bge.n	800b39a <__swhatbuf_r+0x2e>
 800b37e:	89a3      	ldrh	r3, [r4, #12]
 800b380:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b384:	f04f 0100 	mov.w	r1, #0
 800b388:	bf14      	ite	ne
 800b38a:	2340      	movne	r3, #64	@ 0x40
 800b38c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b390:	2000      	movs	r0, #0
 800b392:	6031      	str	r1, [r6, #0]
 800b394:	602b      	str	r3, [r5, #0]
 800b396:	b016      	add	sp, #88	@ 0x58
 800b398:	bd70      	pop	{r4, r5, r6, pc}
 800b39a:	466a      	mov	r2, sp
 800b39c:	f000 f8d6 	bl	800b54c <_fstat_r>
 800b3a0:	2800      	cmp	r0, #0
 800b3a2:	dbec      	blt.n	800b37e <__swhatbuf_r+0x12>
 800b3a4:	9901      	ldr	r1, [sp, #4]
 800b3a6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b3aa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b3ae:	4259      	negs	r1, r3
 800b3b0:	4159      	adcs	r1, r3
 800b3b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b3b6:	e7eb      	b.n	800b390 <__swhatbuf_r+0x24>

0800b3b8 <__smakebuf_r>:
 800b3b8:	898b      	ldrh	r3, [r1, #12]
 800b3ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b3bc:	079d      	lsls	r5, r3, #30
 800b3be:	4606      	mov	r6, r0
 800b3c0:	460c      	mov	r4, r1
 800b3c2:	d507      	bpl.n	800b3d4 <__smakebuf_r+0x1c>
 800b3c4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b3c8:	6023      	str	r3, [r4, #0]
 800b3ca:	6123      	str	r3, [r4, #16]
 800b3cc:	2301      	movs	r3, #1
 800b3ce:	6163      	str	r3, [r4, #20]
 800b3d0:	b003      	add	sp, #12
 800b3d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3d4:	ab01      	add	r3, sp, #4
 800b3d6:	466a      	mov	r2, sp
 800b3d8:	f7ff ffc8 	bl	800b36c <__swhatbuf_r>
 800b3dc:	9f00      	ldr	r7, [sp, #0]
 800b3de:	4605      	mov	r5, r0
 800b3e0:	4639      	mov	r1, r7
 800b3e2:	4630      	mov	r0, r6
 800b3e4:	f7fe fd54 	bl	8009e90 <_malloc_r>
 800b3e8:	b948      	cbnz	r0, 800b3fe <__smakebuf_r+0x46>
 800b3ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3ee:	059a      	lsls	r2, r3, #22
 800b3f0:	d4ee      	bmi.n	800b3d0 <__smakebuf_r+0x18>
 800b3f2:	f023 0303 	bic.w	r3, r3, #3
 800b3f6:	f043 0302 	orr.w	r3, r3, #2
 800b3fa:	81a3      	strh	r3, [r4, #12]
 800b3fc:	e7e2      	b.n	800b3c4 <__smakebuf_r+0xc>
 800b3fe:	89a3      	ldrh	r3, [r4, #12]
 800b400:	6020      	str	r0, [r4, #0]
 800b402:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b406:	81a3      	strh	r3, [r4, #12]
 800b408:	9b01      	ldr	r3, [sp, #4]
 800b40a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b40e:	b15b      	cbz	r3, 800b428 <__smakebuf_r+0x70>
 800b410:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b414:	4630      	mov	r0, r6
 800b416:	f000 f8ab 	bl	800b570 <_isatty_r>
 800b41a:	b128      	cbz	r0, 800b428 <__smakebuf_r+0x70>
 800b41c:	89a3      	ldrh	r3, [r4, #12]
 800b41e:	f023 0303 	bic.w	r3, r3, #3
 800b422:	f043 0301 	orr.w	r3, r3, #1
 800b426:	81a3      	strh	r3, [r4, #12]
 800b428:	89a3      	ldrh	r3, [r4, #12]
 800b42a:	431d      	orrs	r5, r3
 800b42c:	81a5      	strh	r5, [r4, #12]
 800b42e:	e7cf      	b.n	800b3d0 <__smakebuf_r+0x18>

0800b430 <__sccl>:
 800b430:	b570      	push	{r4, r5, r6, lr}
 800b432:	780b      	ldrb	r3, [r1, #0]
 800b434:	4604      	mov	r4, r0
 800b436:	2b5e      	cmp	r3, #94	@ 0x5e
 800b438:	bf0b      	itete	eq
 800b43a:	784b      	ldrbeq	r3, [r1, #1]
 800b43c:	1c4a      	addne	r2, r1, #1
 800b43e:	1c8a      	addeq	r2, r1, #2
 800b440:	2100      	movne	r1, #0
 800b442:	bf08      	it	eq
 800b444:	2101      	moveq	r1, #1
 800b446:	3801      	subs	r0, #1
 800b448:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800b44c:	f800 1f01 	strb.w	r1, [r0, #1]!
 800b450:	42a8      	cmp	r0, r5
 800b452:	d1fb      	bne.n	800b44c <__sccl+0x1c>
 800b454:	b90b      	cbnz	r3, 800b45a <__sccl+0x2a>
 800b456:	1e50      	subs	r0, r2, #1
 800b458:	bd70      	pop	{r4, r5, r6, pc}
 800b45a:	f081 0101 	eor.w	r1, r1, #1
 800b45e:	54e1      	strb	r1, [r4, r3]
 800b460:	4610      	mov	r0, r2
 800b462:	4602      	mov	r2, r0
 800b464:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b468:	2d2d      	cmp	r5, #45	@ 0x2d
 800b46a:	d005      	beq.n	800b478 <__sccl+0x48>
 800b46c:	2d5d      	cmp	r5, #93	@ 0x5d
 800b46e:	d016      	beq.n	800b49e <__sccl+0x6e>
 800b470:	2d00      	cmp	r5, #0
 800b472:	d0f1      	beq.n	800b458 <__sccl+0x28>
 800b474:	462b      	mov	r3, r5
 800b476:	e7f2      	b.n	800b45e <__sccl+0x2e>
 800b478:	7846      	ldrb	r6, [r0, #1]
 800b47a:	2e5d      	cmp	r6, #93	@ 0x5d
 800b47c:	d0fa      	beq.n	800b474 <__sccl+0x44>
 800b47e:	42b3      	cmp	r3, r6
 800b480:	dcf8      	bgt.n	800b474 <__sccl+0x44>
 800b482:	3002      	adds	r0, #2
 800b484:	461a      	mov	r2, r3
 800b486:	3201      	adds	r2, #1
 800b488:	4296      	cmp	r6, r2
 800b48a:	54a1      	strb	r1, [r4, r2]
 800b48c:	dcfb      	bgt.n	800b486 <__sccl+0x56>
 800b48e:	1af2      	subs	r2, r6, r3
 800b490:	3a01      	subs	r2, #1
 800b492:	1c5d      	adds	r5, r3, #1
 800b494:	42b3      	cmp	r3, r6
 800b496:	bfa8      	it	ge
 800b498:	2200      	movge	r2, #0
 800b49a:	18ab      	adds	r3, r5, r2
 800b49c:	e7e1      	b.n	800b462 <__sccl+0x32>
 800b49e:	4610      	mov	r0, r2
 800b4a0:	e7da      	b.n	800b458 <__sccl+0x28>

0800b4a2 <__submore>:
 800b4a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4a6:	460c      	mov	r4, r1
 800b4a8:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800b4aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b4ae:	4299      	cmp	r1, r3
 800b4b0:	d11d      	bne.n	800b4ee <__submore+0x4c>
 800b4b2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800b4b6:	f7fe fceb 	bl	8009e90 <_malloc_r>
 800b4ba:	b918      	cbnz	r0, 800b4c4 <__submore+0x22>
 800b4bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b4c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b4c8:	63a3      	str	r3, [r4, #56]	@ 0x38
 800b4ca:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800b4ce:	6360      	str	r0, [r4, #52]	@ 0x34
 800b4d0:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800b4d4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800b4d8:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800b4dc:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800b4e0:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800b4e4:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800b4e8:	6020      	str	r0, [r4, #0]
 800b4ea:	2000      	movs	r0, #0
 800b4ec:	e7e8      	b.n	800b4c0 <__submore+0x1e>
 800b4ee:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800b4f0:	0077      	lsls	r7, r6, #1
 800b4f2:	463a      	mov	r2, r7
 800b4f4:	f000 f8a0 	bl	800b638 <_realloc_r>
 800b4f8:	4605      	mov	r5, r0
 800b4fa:	2800      	cmp	r0, #0
 800b4fc:	d0de      	beq.n	800b4bc <__submore+0x1a>
 800b4fe:	eb00 0806 	add.w	r8, r0, r6
 800b502:	4601      	mov	r1, r0
 800b504:	4632      	mov	r2, r6
 800b506:	4640      	mov	r0, r8
 800b508:	f7fd fdf1 	bl	80090ee <memcpy>
 800b50c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800b510:	f8c4 8000 	str.w	r8, [r4]
 800b514:	e7e9      	b.n	800b4ea <__submore+0x48>

0800b516 <memmove>:
 800b516:	4288      	cmp	r0, r1
 800b518:	b510      	push	{r4, lr}
 800b51a:	eb01 0402 	add.w	r4, r1, r2
 800b51e:	d902      	bls.n	800b526 <memmove+0x10>
 800b520:	4284      	cmp	r4, r0
 800b522:	4623      	mov	r3, r4
 800b524:	d807      	bhi.n	800b536 <memmove+0x20>
 800b526:	1e43      	subs	r3, r0, #1
 800b528:	42a1      	cmp	r1, r4
 800b52a:	d008      	beq.n	800b53e <memmove+0x28>
 800b52c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b530:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b534:	e7f8      	b.n	800b528 <memmove+0x12>
 800b536:	4402      	add	r2, r0
 800b538:	4601      	mov	r1, r0
 800b53a:	428a      	cmp	r2, r1
 800b53c:	d100      	bne.n	800b540 <memmove+0x2a>
 800b53e:	bd10      	pop	{r4, pc}
 800b540:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b544:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b548:	e7f7      	b.n	800b53a <memmove+0x24>
	...

0800b54c <_fstat_r>:
 800b54c:	b538      	push	{r3, r4, r5, lr}
 800b54e:	4d07      	ldr	r5, [pc, #28]	@ (800b56c <_fstat_r+0x20>)
 800b550:	2300      	movs	r3, #0
 800b552:	4604      	mov	r4, r0
 800b554:	4608      	mov	r0, r1
 800b556:	4611      	mov	r1, r2
 800b558:	602b      	str	r3, [r5, #0]
 800b55a:	f7f6 ff05 	bl	8002368 <_fstat>
 800b55e:	1c43      	adds	r3, r0, #1
 800b560:	d102      	bne.n	800b568 <_fstat_r+0x1c>
 800b562:	682b      	ldr	r3, [r5, #0]
 800b564:	b103      	cbz	r3, 800b568 <_fstat_r+0x1c>
 800b566:	6023      	str	r3, [r4, #0]
 800b568:	bd38      	pop	{r3, r4, r5, pc}
 800b56a:	bf00      	nop
 800b56c:	20000df8 	.word	0x20000df8

0800b570 <_isatty_r>:
 800b570:	b538      	push	{r3, r4, r5, lr}
 800b572:	4d06      	ldr	r5, [pc, #24]	@ (800b58c <_isatty_r+0x1c>)
 800b574:	2300      	movs	r3, #0
 800b576:	4604      	mov	r4, r0
 800b578:	4608      	mov	r0, r1
 800b57a:	602b      	str	r3, [r5, #0]
 800b57c:	f7f6 ff04 	bl	8002388 <_isatty>
 800b580:	1c43      	adds	r3, r0, #1
 800b582:	d102      	bne.n	800b58a <_isatty_r+0x1a>
 800b584:	682b      	ldr	r3, [r5, #0]
 800b586:	b103      	cbz	r3, 800b58a <_isatty_r+0x1a>
 800b588:	6023      	str	r3, [r4, #0]
 800b58a:	bd38      	pop	{r3, r4, r5, pc}
 800b58c:	20000df8 	.word	0x20000df8

0800b590 <_sbrk_r>:
 800b590:	b538      	push	{r3, r4, r5, lr}
 800b592:	4d06      	ldr	r5, [pc, #24]	@ (800b5ac <_sbrk_r+0x1c>)
 800b594:	2300      	movs	r3, #0
 800b596:	4604      	mov	r4, r0
 800b598:	4608      	mov	r0, r1
 800b59a:	602b      	str	r3, [r5, #0]
 800b59c:	f7f6 ff0c 	bl	80023b8 <_sbrk>
 800b5a0:	1c43      	adds	r3, r0, #1
 800b5a2:	d102      	bne.n	800b5aa <_sbrk_r+0x1a>
 800b5a4:	682b      	ldr	r3, [r5, #0]
 800b5a6:	b103      	cbz	r3, 800b5aa <_sbrk_r+0x1a>
 800b5a8:	6023      	str	r3, [r4, #0]
 800b5aa:	bd38      	pop	{r3, r4, r5, pc}
 800b5ac:	20000df8 	.word	0x20000df8

0800b5b0 <__assert_func>:
 800b5b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b5b2:	4614      	mov	r4, r2
 800b5b4:	461a      	mov	r2, r3
 800b5b6:	4b09      	ldr	r3, [pc, #36]	@ (800b5dc <__assert_func+0x2c>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	4605      	mov	r5, r0
 800b5bc:	68d8      	ldr	r0, [r3, #12]
 800b5be:	b954      	cbnz	r4, 800b5d6 <__assert_func+0x26>
 800b5c0:	4b07      	ldr	r3, [pc, #28]	@ (800b5e0 <__assert_func+0x30>)
 800b5c2:	461c      	mov	r4, r3
 800b5c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b5c8:	9100      	str	r1, [sp, #0]
 800b5ca:	462b      	mov	r3, r5
 800b5cc:	4905      	ldr	r1, [pc, #20]	@ (800b5e4 <__assert_func+0x34>)
 800b5ce:	f000 f8df 	bl	800b790 <fiprintf>
 800b5d2:	f000 f8ef 	bl	800b7b4 <abort>
 800b5d6:	4b04      	ldr	r3, [pc, #16]	@ (800b5e8 <__assert_func+0x38>)
 800b5d8:	e7f4      	b.n	800b5c4 <__assert_func+0x14>
 800b5da:	bf00      	nop
 800b5dc:	20000074 	.word	0x20000074
 800b5e0:	0800d099 	.word	0x0800d099
 800b5e4:	0800d06b 	.word	0x0800d06b
 800b5e8:	0800d05e 	.word	0x0800d05e

0800b5ec <_calloc_r>:
 800b5ec:	b570      	push	{r4, r5, r6, lr}
 800b5ee:	fba1 5402 	umull	r5, r4, r1, r2
 800b5f2:	b93c      	cbnz	r4, 800b604 <_calloc_r+0x18>
 800b5f4:	4629      	mov	r1, r5
 800b5f6:	f7fe fc4b 	bl	8009e90 <_malloc_r>
 800b5fa:	4606      	mov	r6, r0
 800b5fc:	b928      	cbnz	r0, 800b60a <_calloc_r+0x1e>
 800b5fe:	2600      	movs	r6, #0
 800b600:	4630      	mov	r0, r6
 800b602:	bd70      	pop	{r4, r5, r6, pc}
 800b604:	220c      	movs	r2, #12
 800b606:	6002      	str	r2, [r0, #0]
 800b608:	e7f9      	b.n	800b5fe <_calloc_r+0x12>
 800b60a:	462a      	mov	r2, r5
 800b60c:	4621      	mov	r1, r4
 800b60e:	f7fd fccb 	bl	8008fa8 <memset>
 800b612:	e7f5      	b.n	800b600 <_calloc_r+0x14>

0800b614 <__ascii_mbtowc>:
 800b614:	b082      	sub	sp, #8
 800b616:	b901      	cbnz	r1, 800b61a <__ascii_mbtowc+0x6>
 800b618:	a901      	add	r1, sp, #4
 800b61a:	b142      	cbz	r2, 800b62e <__ascii_mbtowc+0x1a>
 800b61c:	b14b      	cbz	r3, 800b632 <__ascii_mbtowc+0x1e>
 800b61e:	7813      	ldrb	r3, [r2, #0]
 800b620:	600b      	str	r3, [r1, #0]
 800b622:	7812      	ldrb	r2, [r2, #0]
 800b624:	1e10      	subs	r0, r2, #0
 800b626:	bf18      	it	ne
 800b628:	2001      	movne	r0, #1
 800b62a:	b002      	add	sp, #8
 800b62c:	4770      	bx	lr
 800b62e:	4610      	mov	r0, r2
 800b630:	e7fb      	b.n	800b62a <__ascii_mbtowc+0x16>
 800b632:	f06f 0001 	mvn.w	r0, #1
 800b636:	e7f8      	b.n	800b62a <__ascii_mbtowc+0x16>

0800b638 <_realloc_r>:
 800b638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b63c:	4680      	mov	r8, r0
 800b63e:	4615      	mov	r5, r2
 800b640:	460c      	mov	r4, r1
 800b642:	b921      	cbnz	r1, 800b64e <_realloc_r+0x16>
 800b644:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b648:	4611      	mov	r1, r2
 800b64a:	f7fe bc21 	b.w	8009e90 <_malloc_r>
 800b64e:	b92a      	cbnz	r2, 800b65c <_realloc_r+0x24>
 800b650:	f7fe fbaa 	bl	8009da8 <_free_r>
 800b654:	2400      	movs	r4, #0
 800b656:	4620      	mov	r0, r4
 800b658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b65c:	f000 f8b1 	bl	800b7c2 <_malloc_usable_size_r>
 800b660:	4285      	cmp	r5, r0
 800b662:	4606      	mov	r6, r0
 800b664:	d802      	bhi.n	800b66c <_realloc_r+0x34>
 800b666:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b66a:	d8f4      	bhi.n	800b656 <_realloc_r+0x1e>
 800b66c:	4629      	mov	r1, r5
 800b66e:	4640      	mov	r0, r8
 800b670:	f7fe fc0e 	bl	8009e90 <_malloc_r>
 800b674:	4607      	mov	r7, r0
 800b676:	2800      	cmp	r0, #0
 800b678:	d0ec      	beq.n	800b654 <_realloc_r+0x1c>
 800b67a:	42b5      	cmp	r5, r6
 800b67c:	462a      	mov	r2, r5
 800b67e:	4621      	mov	r1, r4
 800b680:	bf28      	it	cs
 800b682:	4632      	movcs	r2, r6
 800b684:	f7fd fd33 	bl	80090ee <memcpy>
 800b688:	4621      	mov	r1, r4
 800b68a:	4640      	mov	r0, r8
 800b68c:	f7fe fb8c 	bl	8009da8 <_free_r>
 800b690:	463c      	mov	r4, r7
 800b692:	e7e0      	b.n	800b656 <_realloc_r+0x1e>

0800b694 <_strtoul_l.constprop.0>:
 800b694:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b698:	4e34      	ldr	r6, [pc, #208]	@ (800b76c <_strtoul_l.constprop.0+0xd8>)
 800b69a:	4686      	mov	lr, r0
 800b69c:	460d      	mov	r5, r1
 800b69e:	4628      	mov	r0, r5
 800b6a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b6a4:	5d37      	ldrb	r7, [r6, r4]
 800b6a6:	f017 0708 	ands.w	r7, r7, #8
 800b6aa:	d1f8      	bne.n	800b69e <_strtoul_l.constprop.0+0xa>
 800b6ac:	2c2d      	cmp	r4, #45	@ 0x2d
 800b6ae:	d12f      	bne.n	800b710 <_strtoul_l.constprop.0+0x7c>
 800b6b0:	782c      	ldrb	r4, [r5, #0]
 800b6b2:	2701      	movs	r7, #1
 800b6b4:	1c85      	adds	r5, r0, #2
 800b6b6:	f033 0010 	bics.w	r0, r3, #16
 800b6ba:	d109      	bne.n	800b6d0 <_strtoul_l.constprop.0+0x3c>
 800b6bc:	2c30      	cmp	r4, #48	@ 0x30
 800b6be:	d12c      	bne.n	800b71a <_strtoul_l.constprop.0+0x86>
 800b6c0:	7828      	ldrb	r0, [r5, #0]
 800b6c2:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800b6c6:	2858      	cmp	r0, #88	@ 0x58
 800b6c8:	d127      	bne.n	800b71a <_strtoul_l.constprop.0+0x86>
 800b6ca:	786c      	ldrb	r4, [r5, #1]
 800b6cc:	2310      	movs	r3, #16
 800b6ce:	3502      	adds	r5, #2
 800b6d0:	f04f 38ff 	mov.w	r8, #4294967295
 800b6d4:	2600      	movs	r6, #0
 800b6d6:	fbb8 f8f3 	udiv	r8, r8, r3
 800b6da:	fb03 f908 	mul.w	r9, r3, r8
 800b6de:	ea6f 0909 	mvn.w	r9, r9
 800b6e2:	4630      	mov	r0, r6
 800b6e4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800b6e8:	f1bc 0f09 	cmp.w	ip, #9
 800b6ec:	d81c      	bhi.n	800b728 <_strtoul_l.constprop.0+0x94>
 800b6ee:	4664      	mov	r4, ip
 800b6f0:	42a3      	cmp	r3, r4
 800b6f2:	dd2a      	ble.n	800b74a <_strtoul_l.constprop.0+0xb6>
 800b6f4:	f1b6 3fff 	cmp.w	r6, #4294967295
 800b6f8:	d007      	beq.n	800b70a <_strtoul_l.constprop.0+0x76>
 800b6fa:	4580      	cmp	r8, r0
 800b6fc:	d322      	bcc.n	800b744 <_strtoul_l.constprop.0+0xb0>
 800b6fe:	d101      	bne.n	800b704 <_strtoul_l.constprop.0+0x70>
 800b700:	45a1      	cmp	r9, r4
 800b702:	db1f      	blt.n	800b744 <_strtoul_l.constprop.0+0xb0>
 800b704:	fb00 4003 	mla	r0, r0, r3, r4
 800b708:	2601      	movs	r6, #1
 800b70a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b70e:	e7e9      	b.n	800b6e4 <_strtoul_l.constprop.0+0x50>
 800b710:	2c2b      	cmp	r4, #43	@ 0x2b
 800b712:	bf04      	itt	eq
 800b714:	782c      	ldrbeq	r4, [r5, #0]
 800b716:	1c85      	addeq	r5, r0, #2
 800b718:	e7cd      	b.n	800b6b6 <_strtoul_l.constprop.0+0x22>
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d1d8      	bne.n	800b6d0 <_strtoul_l.constprop.0+0x3c>
 800b71e:	2c30      	cmp	r4, #48	@ 0x30
 800b720:	bf0c      	ite	eq
 800b722:	2308      	moveq	r3, #8
 800b724:	230a      	movne	r3, #10
 800b726:	e7d3      	b.n	800b6d0 <_strtoul_l.constprop.0+0x3c>
 800b728:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800b72c:	f1bc 0f19 	cmp.w	ip, #25
 800b730:	d801      	bhi.n	800b736 <_strtoul_l.constprop.0+0xa2>
 800b732:	3c37      	subs	r4, #55	@ 0x37
 800b734:	e7dc      	b.n	800b6f0 <_strtoul_l.constprop.0+0x5c>
 800b736:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800b73a:	f1bc 0f19 	cmp.w	ip, #25
 800b73e:	d804      	bhi.n	800b74a <_strtoul_l.constprop.0+0xb6>
 800b740:	3c57      	subs	r4, #87	@ 0x57
 800b742:	e7d5      	b.n	800b6f0 <_strtoul_l.constprop.0+0x5c>
 800b744:	f04f 36ff 	mov.w	r6, #4294967295
 800b748:	e7df      	b.n	800b70a <_strtoul_l.constprop.0+0x76>
 800b74a:	1c73      	adds	r3, r6, #1
 800b74c:	d106      	bne.n	800b75c <_strtoul_l.constprop.0+0xc8>
 800b74e:	2322      	movs	r3, #34	@ 0x22
 800b750:	f8ce 3000 	str.w	r3, [lr]
 800b754:	4630      	mov	r0, r6
 800b756:	b932      	cbnz	r2, 800b766 <_strtoul_l.constprop.0+0xd2>
 800b758:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b75c:	b107      	cbz	r7, 800b760 <_strtoul_l.constprop.0+0xcc>
 800b75e:	4240      	negs	r0, r0
 800b760:	2a00      	cmp	r2, #0
 800b762:	d0f9      	beq.n	800b758 <_strtoul_l.constprop.0+0xc4>
 800b764:	b106      	cbz	r6, 800b768 <_strtoul_l.constprop.0+0xd4>
 800b766:	1e69      	subs	r1, r5, #1
 800b768:	6011      	str	r1, [r2, #0]
 800b76a:	e7f5      	b.n	800b758 <_strtoul_l.constprop.0+0xc4>
 800b76c:	0800cd12 	.word	0x0800cd12

0800b770 <_strtoul_r>:
 800b770:	f7ff bf90 	b.w	800b694 <_strtoul_l.constprop.0>

0800b774 <__ascii_wctomb>:
 800b774:	4603      	mov	r3, r0
 800b776:	4608      	mov	r0, r1
 800b778:	b141      	cbz	r1, 800b78c <__ascii_wctomb+0x18>
 800b77a:	2aff      	cmp	r2, #255	@ 0xff
 800b77c:	d904      	bls.n	800b788 <__ascii_wctomb+0x14>
 800b77e:	228a      	movs	r2, #138	@ 0x8a
 800b780:	601a      	str	r2, [r3, #0]
 800b782:	f04f 30ff 	mov.w	r0, #4294967295
 800b786:	4770      	bx	lr
 800b788:	700a      	strb	r2, [r1, #0]
 800b78a:	2001      	movs	r0, #1
 800b78c:	4770      	bx	lr
	...

0800b790 <fiprintf>:
 800b790:	b40e      	push	{r1, r2, r3}
 800b792:	b503      	push	{r0, r1, lr}
 800b794:	4601      	mov	r1, r0
 800b796:	ab03      	add	r3, sp, #12
 800b798:	4805      	ldr	r0, [pc, #20]	@ (800b7b0 <fiprintf+0x20>)
 800b79a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b79e:	6800      	ldr	r0, [r0, #0]
 800b7a0:	9301      	str	r3, [sp, #4]
 800b7a2:	f7ff fad1 	bl	800ad48 <_vfiprintf_r>
 800b7a6:	b002      	add	sp, #8
 800b7a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b7ac:	b003      	add	sp, #12
 800b7ae:	4770      	bx	lr
 800b7b0:	20000074 	.word	0x20000074

0800b7b4 <abort>:
 800b7b4:	b508      	push	{r3, lr}
 800b7b6:	2006      	movs	r0, #6
 800b7b8:	f000 f834 	bl	800b824 <raise>
 800b7bc:	2001      	movs	r0, #1
 800b7be:	f7f6 fd8b 	bl	80022d8 <_exit>

0800b7c2 <_malloc_usable_size_r>:
 800b7c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b7c6:	1f18      	subs	r0, r3, #4
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	bfbc      	itt	lt
 800b7cc:	580b      	ldrlt	r3, [r1, r0]
 800b7ce:	18c0      	addlt	r0, r0, r3
 800b7d0:	4770      	bx	lr

0800b7d2 <_raise_r>:
 800b7d2:	291f      	cmp	r1, #31
 800b7d4:	b538      	push	{r3, r4, r5, lr}
 800b7d6:	4605      	mov	r5, r0
 800b7d8:	460c      	mov	r4, r1
 800b7da:	d904      	bls.n	800b7e6 <_raise_r+0x14>
 800b7dc:	2316      	movs	r3, #22
 800b7de:	6003      	str	r3, [r0, #0]
 800b7e0:	f04f 30ff 	mov.w	r0, #4294967295
 800b7e4:	bd38      	pop	{r3, r4, r5, pc}
 800b7e6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b7e8:	b112      	cbz	r2, 800b7f0 <_raise_r+0x1e>
 800b7ea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b7ee:	b94b      	cbnz	r3, 800b804 <_raise_r+0x32>
 800b7f0:	4628      	mov	r0, r5
 800b7f2:	f000 f831 	bl	800b858 <_getpid_r>
 800b7f6:	4622      	mov	r2, r4
 800b7f8:	4601      	mov	r1, r0
 800b7fa:	4628      	mov	r0, r5
 800b7fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b800:	f000 b818 	b.w	800b834 <_kill_r>
 800b804:	2b01      	cmp	r3, #1
 800b806:	d00a      	beq.n	800b81e <_raise_r+0x4c>
 800b808:	1c59      	adds	r1, r3, #1
 800b80a:	d103      	bne.n	800b814 <_raise_r+0x42>
 800b80c:	2316      	movs	r3, #22
 800b80e:	6003      	str	r3, [r0, #0]
 800b810:	2001      	movs	r0, #1
 800b812:	e7e7      	b.n	800b7e4 <_raise_r+0x12>
 800b814:	2100      	movs	r1, #0
 800b816:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b81a:	4620      	mov	r0, r4
 800b81c:	4798      	blx	r3
 800b81e:	2000      	movs	r0, #0
 800b820:	e7e0      	b.n	800b7e4 <_raise_r+0x12>
	...

0800b824 <raise>:
 800b824:	4b02      	ldr	r3, [pc, #8]	@ (800b830 <raise+0xc>)
 800b826:	4601      	mov	r1, r0
 800b828:	6818      	ldr	r0, [r3, #0]
 800b82a:	f7ff bfd2 	b.w	800b7d2 <_raise_r>
 800b82e:	bf00      	nop
 800b830:	20000074 	.word	0x20000074

0800b834 <_kill_r>:
 800b834:	b538      	push	{r3, r4, r5, lr}
 800b836:	4d07      	ldr	r5, [pc, #28]	@ (800b854 <_kill_r+0x20>)
 800b838:	2300      	movs	r3, #0
 800b83a:	4604      	mov	r4, r0
 800b83c:	4608      	mov	r0, r1
 800b83e:	4611      	mov	r1, r2
 800b840:	602b      	str	r3, [r5, #0]
 800b842:	f7f6 fd39 	bl	80022b8 <_kill>
 800b846:	1c43      	adds	r3, r0, #1
 800b848:	d102      	bne.n	800b850 <_kill_r+0x1c>
 800b84a:	682b      	ldr	r3, [r5, #0]
 800b84c:	b103      	cbz	r3, 800b850 <_kill_r+0x1c>
 800b84e:	6023      	str	r3, [r4, #0]
 800b850:	bd38      	pop	{r3, r4, r5, pc}
 800b852:	bf00      	nop
 800b854:	20000df8 	.word	0x20000df8

0800b858 <_getpid_r>:
 800b858:	f7f6 bd26 	b.w	80022a8 <_getpid>

0800b85c <pow>:
 800b85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b85e:	ed2d 8b02 	vpush	{d8}
 800b862:	eeb0 8a40 	vmov.f32	s16, s0
 800b866:	eef0 8a60 	vmov.f32	s17, s1
 800b86a:	ec55 4b11 	vmov	r4, r5, d1
 800b86e:	f000 f873 	bl	800b958 <__ieee754_pow>
 800b872:	4622      	mov	r2, r4
 800b874:	462b      	mov	r3, r5
 800b876:	4620      	mov	r0, r4
 800b878:	4629      	mov	r1, r5
 800b87a:	ec57 6b10 	vmov	r6, r7, d0
 800b87e:	f7f5 f95d 	bl	8000b3c <__aeabi_dcmpun>
 800b882:	2800      	cmp	r0, #0
 800b884:	d13b      	bne.n	800b8fe <pow+0xa2>
 800b886:	ec51 0b18 	vmov	r0, r1, d8
 800b88a:	2200      	movs	r2, #0
 800b88c:	2300      	movs	r3, #0
 800b88e:	f7f5 f923 	bl	8000ad8 <__aeabi_dcmpeq>
 800b892:	b1b8      	cbz	r0, 800b8c4 <pow+0x68>
 800b894:	2200      	movs	r2, #0
 800b896:	2300      	movs	r3, #0
 800b898:	4620      	mov	r0, r4
 800b89a:	4629      	mov	r1, r5
 800b89c:	f7f5 f91c 	bl	8000ad8 <__aeabi_dcmpeq>
 800b8a0:	2800      	cmp	r0, #0
 800b8a2:	d146      	bne.n	800b932 <pow+0xd6>
 800b8a4:	ec45 4b10 	vmov	d0, r4, r5
 800b8a8:	f000 f848 	bl	800b93c <finite>
 800b8ac:	b338      	cbz	r0, 800b8fe <pow+0xa2>
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	4620      	mov	r0, r4
 800b8b4:	4629      	mov	r1, r5
 800b8b6:	f7f5 f919 	bl	8000aec <__aeabi_dcmplt>
 800b8ba:	b300      	cbz	r0, 800b8fe <pow+0xa2>
 800b8bc:	f7fd fbea 	bl	8009094 <__errno>
 800b8c0:	2322      	movs	r3, #34	@ 0x22
 800b8c2:	e01b      	b.n	800b8fc <pow+0xa0>
 800b8c4:	ec47 6b10 	vmov	d0, r6, r7
 800b8c8:	f000 f838 	bl	800b93c <finite>
 800b8cc:	b9e0      	cbnz	r0, 800b908 <pow+0xac>
 800b8ce:	eeb0 0a48 	vmov.f32	s0, s16
 800b8d2:	eef0 0a68 	vmov.f32	s1, s17
 800b8d6:	f000 f831 	bl	800b93c <finite>
 800b8da:	b1a8      	cbz	r0, 800b908 <pow+0xac>
 800b8dc:	ec45 4b10 	vmov	d0, r4, r5
 800b8e0:	f000 f82c 	bl	800b93c <finite>
 800b8e4:	b180      	cbz	r0, 800b908 <pow+0xac>
 800b8e6:	4632      	mov	r2, r6
 800b8e8:	463b      	mov	r3, r7
 800b8ea:	4630      	mov	r0, r6
 800b8ec:	4639      	mov	r1, r7
 800b8ee:	f7f5 f925 	bl	8000b3c <__aeabi_dcmpun>
 800b8f2:	2800      	cmp	r0, #0
 800b8f4:	d0e2      	beq.n	800b8bc <pow+0x60>
 800b8f6:	f7fd fbcd 	bl	8009094 <__errno>
 800b8fa:	2321      	movs	r3, #33	@ 0x21
 800b8fc:	6003      	str	r3, [r0, #0]
 800b8fe:	ecbd 8b02 	vpop	{d8}
 800b902:	ec47 6b10 	vmov	d0, r6, r7
 800b906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b908:	2200      	movs	r2, #0
 800b90a:	2300      	movs	r3, #0
 800b90c:	4630      	mov	r0, r6
 800b90e:	4639      	mov	r1, r7
 800b910:	f7f5 f8e2 	bl	8000ad8 <__aeabi_dcmpeq>
 800b914:	2800      	cmp	r0, #0
 800b916:	d0f2      	beq.n	800b8fe <pow+0xa2>
 800b918:	eeb0 0a48 	vmov.f32	s0, s16
 800b91c:	eef0 0a68 	vmov.f32	s1, s17
 800b920:	f000 f80c 	bl	800b93c <finite>
 800b924:	2800      	cmp	r0, #0
 800b926:	d0ea      	beq.n	800b8fe <pow+0xa2>
 800b928:	ec45 4b10 	vmov	d0, r4, r5
 800b92c:	f000 f806 	bl	800b93c <finite>
 800b930:	e7c3      	b.n	800b8ba <pow+0x5e>
 800b932:	4f01      	ldr	r7, [pc, #4]	@ (800b938 <pow+0xdc>)
 800b934:	2600      	movs	r6, #0
 800b936:	e7e2      	b.n	800b8fe <pow+0xa2>
 800b938:	3ff00000 	.word	0x3ff00000

0800b93c <finite>:
 800b93c:	b082      	sub	sp, #8
 800b93e:	ed8d 0b00 	vstr	d0, [sp]
 800b942:	9801      	ldr	r0, [sp, #4]
 800b944:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800b948:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800b94c:	0fc0      	lsrs	r0, r0, #31
 800b94e:	b002      	add	sp, #8
 800b950:	4770      	bx	lr
 800b952:	0000      	movs	r0, r0
 800b954:	0000      	movs	r0, r0
	...

0800b958 <__ieee754_pow>:
 800b958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b95c:	b091      	sub	sp, #68	@ 0x44
 800b95e:	ed8d 1b00 	vstr	d1, [sp]
 800b962:	e9dd 1900 	ldrd	r1, r9, [sp]
 800b966:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800b96a:	ea5a 0001 	orrs.w	r0, sl, r1
 800b96e:	ec57 6b10 	vmov	r6, r7, d0
 800b972:	d113      	bne.n	800b99c <__ieee754_pow+0x44>
 800b974:	19b3      	adds	r3, r6, r6
 800b976:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800b97a:	4152      	adcs	r2, r2
 800b97c:	4298      	cmp	r0, r3
 800b97e:	4b98      	ldr	r3, [pc, #608]	@ (800bbe0 <__ieee754_pow+0x288>)
 800b980:	4193      	sbcs	r3, r2
 800b982:	f080 84ea 	bcs.w	800c35a <__ieee754_pow+0xa02>
 800b986:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b98a:	4630      	mov	r0, r6
 800b98c:	4639      	mov	r1, r7
 800b98e:	f7f4 fc85 	bl	800029c <__adddf3>
 800b992:	ec41 0b10 	vmov	d0, r0, r1
 800b996:	b011      	add	sp, #68	@ 0x44
 800b998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b99c:	4a91      	ldr	r2, [pc, #580]	@ (800bbe4 <__ieee754_pow+0x28c>)
 800b99e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800b9a2:	4590      	cmp	r8, r2
 800b9a4:	463d      	mov	r5, r7
 800b9a6:	4633      	mov	r3, r6
 800b9a8:	d806      	bhi.n	800b9b8 <__ieee754_pow+0x60>
 800b9aa:	d101      	bne.n	800b9b0 <__ieee754_pow+0x58>
 800b9ac:	2e00      	cmp	r6, #0
 800b9ae:	d1ea      	bne.n	800b986 <__ieee754_pow+0x2e>
 800b9b0:	4592      	cmp	sl, r2
 800b9b2:	d801      	bhi.n	800b9b8 <__ieee754_pow+0x60>
 800b9b4:	d10e      	bne.n	800b9d4 <__ieee754_pow+0x7c>
 800b9b6:	b169      	cbz	r1, 800b9d4 <__ieee754_pow+0x7c>
 800b9b8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800b9bc:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800b9c0:	431d      	orrs	r5, r3
 800b9c2:	d1e0      	bne.n	800b986 <__ieee754_pow+0x2e>
 800b9c4:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b9c8:	18db      	adds	r3, r3, r3
 800b9ca:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800b9ce:	4152      	adcs	r2, r2
 800b9d0:	429d      	cmp	r5, r3
 800b9d2:	e7d4      	b.n	800b97e <__ieee754_pow+0x26>
 800b9d4:	2d00      	cmp	r5, #0
 800b9d6:	46c3      	mov	fp, r8
 800b9d8:	da3a      	bge.n	800ba50 <__ieee754_pow+0xf8>
 800b9da:	4a83      	ldr	r2, [pc, #524]	@ (800bbe8 <__ieee754_pow+0x290>)
 800b9dc:	4592      	cmp	sl, r2
 800b9de:	d84d      	bhi.n	800ba7c <__ieee754_pow+0x124>
 800b9e0:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800b9e4:	4592      	cmp	sl, r2
 800b9e6:	f240 84c7 	bls.w	800c378 <__ieee754_pow+0xa20>
 800b9ea:	ea4f 522a 	mov.w	r2, sl, asr #20
 800b9ee:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800b9f2:	2a14      	cmp	r2, #20
 800b9f4:	dd0f      	ble.n	800ba16 <__ieee754_pow+0xbe>
 800b9f6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800b9fa:	fa21 f402 	lsr.w	r4, r1, r2
 800b9fe:	fa04 f202 	lsl.w	r2, r4, r2
 800ba02:	428a      	cmp	r2, r1
 800ba04:	f040 84b8 	bne.w	800c378 <__ieee754_pow+0xa20>
 800ba08:	f004 0401 	and.w	r4, r4, #1
 800ba0c:	f1c4 0402 	rsb	r4, r4, #2
 800ba10:	2900      	cmp	r1, #0
 800ba12:	d158      	bne.n	800bac6 <__ieee754_pow+0x16e>
 800ba14:	e00e      	b.n	800ba34 <__ieee754_pow+0xdc>
 800ba16:	2900      	cmp	r1, #0
 800ba18:	d154      	bne.n	800bac4 <__ieee754_pow+0x16c>
 800ba1a:	f1c2 0214 	rsb	r2, r2, #20
 800ba1e:	fa4a f402 	asr.w	r4, sl, r2
 800ba22:	fa04 f202 	lsl.w	r2, r4, r2
 800ba26:	4552      	cmp	r2, sl
 800ba28:	f040 84a3 	bne.w	800c372 <__ieee754_pow+0xa1a>
 800ba2c:	f004 0401 	and.w	r4, r4, #1
 800ba30:	f1c4 0402 	rsb	r4, r4, #2
 800ba34:	4a6d      	ldr	r2, [pc, #436]	@ (800bbec <__ieee754_pow+0x294>)
 800ba36:	4592      	cmp	sl, r2
 800ba38:	d12e      	bne.n	800ba98 <__ieee754_pow+0x140>
 800ba3a:	f1b9 0f00 	cmp.w	r9, #0
 800ba3e:	f280 8494 	bge.w	800c36a <__ieee754_pow+0xa12>
 800ba42:	496a      	ldr	r1, [pc, #424]	@ (800bbec <__ieee754_pow+0x294>)
 800ba44:	4632      	mov	r2, r6
 800ba46:	463b      	mov	r3, r7
 800ba48:	2000      	movs	r0, #0
 800ba4a:	f7f4 ff07 	bl	800085c <__aeabi_ddiv>
 800ba4e:	e7a0      	b.n	800b992 <__ieee754_pow+0x3a>
 800ba50:	2400      	movs	r4, #0
 800ba52:	bbc1      	cbnz	r1, 800bac6 <__ieee754_pow+0x16e>
 800ba54:	4a63      	ldr	r2, [pc, #396]	@ (800bbe4 <__ieee754_pow+0x28c>)
 800ba56:	4592      	cmp	sl, r2
 800ba58:	d1ec      	bne.n	800ba34 <__ieee754_pow+0xdc>
 800ba5a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800ba5e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800ba62:	431a      	orrs	r2, r3
 800ba64:	f000 8479 	beq.w	800c35a <__ieee754_pow+0xa02>
 800ba68:	4b61      	ldr	r3, [pc, #388]	@ (800bbf0 <__ieee754_pow+0x298>)
 800ba6a:	4598      	cmp	r8, r3
 800ba6c:	d908      	bls.n	800ba80 <__ieee754_pow+0x128>
 800ba6e:	f1b9 0f00 	cmp.w	r9, #0
 800ba72:	f2c0 8476 	blt.w	800c362 <__ieee754_pow+0xa0a>
 800ba76:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ba7a:	e78a      	b.n	800b992 <__ieee754_pow+0x3a>
 800ba7c:	2402      	movs	r4, #2
 800ba7e:	e7e8      	b.n	800ba52 <__ieee754_pow+0xfa>
 800ba80:	f1b9 0f00 	cmp.w	r9, #0
 800ba84:	f04f 0000 	mov.w	r0, #0
 800ba88:	f04f 0100 	mov.w	r1, #0
 800ba8c:	da81      	bge.n	800b992 <__ieee754_pow+0x3a>
 800ba8e:	e9dd 0300 	ldrd	r0, r3, [sp]
 800ba92:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800ba96:	e77c      	b.n	800b992 <__ieee754_pow+0x3a>
 800ba98:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800ba9c:	d106      	bne.n	800baac <__ieee754_pow+0x154>
 800ba9e:	4632      	mov	r2, r6
 800baa0:	463b      	mov	r3, r7
 800baa2:	4630      	mov	r0, r6
 800baa4:	4639      	mov	r1, r7
 800baa6:	f7f4 fdaf 	bl	8000608 <__aeabi_dmul>
 800baaa:	e772      	b.n	800b992 <__ieee754_pow+0x3a>
 800baac:	4a51      	ldr	r2, [pc, #324]	@ (800bbf4 <__ieee754_pow+0x29c>)
 800baae:	4591      	cmp	r9, r2
 800bab0:	d109      	bne.n	800bac6 <__ieee754_pow+0x16e>
 800bab2:	2d00      	cmp	r5, #0
 800bab4:	db07      	blt.n	800bac6 <__ieee754_pow+0x16e>
 800bab6:	ec47 6b10 	vmov	d0, r6, r7
 800baba:	b011      	add	sp, #68	@ 0x44
 800babc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bac0:	f000 bd52 	b.w	800c568 <__ieee754_sqrt>
 800bac4:	2400      	movs	r4, #0
 800bac6:	ec47 6b10 	vmov	d0, r6, r7
 800baca:	9302      	str	r3, [sp, #8]
 800bacc:	f000 fc88 	bl	800c3e0 <fabs>
 800bad0:	9b02      	ldr	r3, [sp, #8]
 800bad2:	ec51 0b10 	vmov	r0, r1, d0
 800bad6:	bb53      	cbnz	r3, 800bb2e <__ieee754_pow+0x1d6>
 800bad8:	4b44      	ldr	r3, [pc, #272]	@ (800bbec <__ieee754_pow+0x294>)
 800bada:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800bade:	429a      	cmp	r2, r3
 800bae0:	d002      	beq.n	800bae8 <__ieee754_pow+0x190>
 800bae2:	f1b8 0f00 	cmp.w	r8, #0
 800bae6:	d122      	bne.n	800bb2e <__ieee754_pow+0x1d6>
 800bae8:	f1b9 0f00 	cmp.w	r9, #0
 800baec:	da05      	bge.n	800bafa <__ieee754_pow+0x1a2>
 800baee:	4602      	mov	r2, r0
 800baf0:	460b      	mov	r3, r1
 800baf2:	2000      	movs	r0, #0
 800baf4:	493d      	ldr	r1, [pc, #244]	@ (800bbec <__ieee754_pow+0x294>)
 800baf6:	f7f4 feb1 	bl	800085c <__aeabi_ddiv>
 800bafa:	2d00      	cmp	r5, #0
 800bafc:	f6bf af49 	bge.w	800b992 <__ieee754_pow+0x3a>
 800bb00:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800bb04:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800bb08:	ea58 0804 	orrs.w	r8, r8, r4
 800bb0c:	d108      	bne.n	800bb20 <__ieee754_pow+0x1c8>
 800bb0e:	4602      	mov	r2, r0
 800bb10:	460b      	mov	r3, r1
 800bb12:	4610      	mov	r0, r2
 800bb14:	4619      	mov	r1, r3
 800bb16:	f7f4 fbbf 	bl	8000298 <__aeabi_dsub>
 800bb1a:	4602      	mov	r2, r0
 800bb1c:	460b      	mov	r3, r1
 800bb1e:	e794      	b.n	800ba4a <__ieee754_pow+0xf2>
 800bb20:	2c01      	cmp	r4, #1
 800bb22:	f47f af36 	bne.w	800b992 <__ieee754_pow+0x3a>
 800bb26:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bb2a:	4619      	mov	r1, r3
 800bb2c:	e731      	b.n	800b992 <__ieee754_pow+0x3a>
 800bb2e:	0feb      	lsrs	r3, r5, #31
 800bb30:	3b01      	subs	r3, #1
 800bb32:	ea53 0204 	orrs.w	r2, r3, r4
 800bb36:	d102      	bne.n	800bb3e <__ieee754_pow+0x1e6>
 800bb38:	4632      	mov	r2, r6
 800bb3a:	463b      	mov	r3, r7
 800bb3c:	e7e9      	b.n	800bb12 <__ieee754_pow+0x1ba>
 800bb3e:	3c01      	subs	r4, #1
 800bb40:	431c      	orrs	r4, r3
 800bb42:	d016      	beq.n	800bb72 <__ieee754_pow+0x21a>
 800bb44:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800bbd0 <__ieee754_pow+0x278>
 800bb48:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800bb4c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bb50:	f240 8112 	bls.w	800bd78 <__ieee754_pow+0x420>
 800bb54:	4b28      	ldr	r3, [pc, #160]	@ (800bbf8 <__ieee754_pow+0x2a0>)
 800bb56:	459a      	cmp	sl, r3
 800bb58:	4b25      	ldr	r3, [pc, #148]	@ (800bbf0 <__ieee754_pow+0x298>)
 800bb5a:	d916      	bls.n	800bb8a <__ieee754_pow+0x232>
 800bb5c:	4598      	cmp	r8, r3
 800bb5e:	d80b      	bhi.n	800bb78 <__ieee754_pow+0x220>
 800bb60:	f1b9 0f00 	cmp.w	r9, #0
 800bb64:	da0b      	bge.n	800bb7e <__ieee754_pow+0x226>
 800bb66:	2000      	movs	r0, #0
 800bb68:	b011      	add	sp, #68	@ 0x44
 800bb6a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb6e:	f000 bcf3 	b.w	800c558 <__math_oflow>
 800bb72:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800bbd8 <__ieee754_pow+0x280>
 800bb76:	e7e7      	b.n	800bb48 <__ieee754_pow+0x1f0>
 800bb78:	f1b9 0f00 	cmp.w	r9, #0
 800bb7c:	dcf3      	bgt.n	800bb66 <__ieee754_pow+0x20e>
 800bb7e:	2000      	movs	r0, #0
 800bb80:	b011      	add	sp, #68	@ 0x44
 800bb82:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb86:	f000 bcdf 	b.w	800c548 <__math_uflow>
 800bb8a:	4598      	cmp	r8, r3
 800bb8c:	d20c      	bcs.n	800bba8 <__ieee754_pow+0x250>
 800bb8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb92:	2200      	movs	r2, #0
 800bb94:	2300      	movs	r3, #0
 800bb96:	f7f4 ffa9 	bl	8000aec <__aeabi_dcmplt>
 800bb9a:	3800      	subs	r0, #0
 800bb9c:	bf18      	it	ne
 800bb9e:	2001      	movne	r0, #1
 800bba0:	f1b9 0f00 	cmp.w	r9, #0
 800bba4:	daec      	bge.n	800bb80 <__ieee754_pow+0x228>
 800bba6:	e7df      	b.n	800bb68 <__ieee754_pow+0x210>
 800bba8:	4b10      	ldr	r3, [pc, #64]	@ (800bbec <__ieee754_pow+0x294>)
 800bbaa:	4598      	cmp	r8, r3
 800bbac:	f04f 0200 	mov.w	r2, #0
 800bbb0:	d924      	bls.n	800bbfc <__ieee754_pow+0x2a4>
 800bbb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	f7f4 ff98 	bl	8000aec <__aeabi_dcmplt>
 800bbbc:	3800      	subs	r0, #0
 800bbbe:	bf18      	it	ne
 800bbc0:	2001      	movne	r0, #1
 800bbc2:	f1b9 0f00 	cmp.w	r9, #0
 800bbc6:	dccf      	bgt.n	800bb68 <__ieee754_pow+0x210>
 800bbc8:	e7da      	b.n	800bb80 <__ieee754_pow+0x228>
 800bbca:	bf00      	nop
 800bbcc:	f3af 8000 	nop.w
 800bbd0:	00000000 	.word	0x00000000
 800bbd4:	3ff00000 	.word	0x3ff00000
 800bbd8:	00000000 	.word	0x00000000
 800bbdc:	bff00000 	.word	0xbff00000
 800bbe0:	fff00000 	.word	0xfff00000
 800bbe4:	7ff00000 	.word	0x7ff00000
 800bbe8:	433fffff 	.word	0x433fffff
 800bbec:	3ff00000 	.word	0x3ff00000
 800bbf0:	3fefffff 	.word	0x3fefffff
 800bbf4:	3fe00000 	.word	0x3fe00000
 800bbf8:	43f00000 	.word	0x43f00000
 800bbfc:	4b5a      	ldr	r3, [pc, #360]	@ (800bd68 <__ieee754_pow+0x410>)
 800bbfe:	f7f4 fb4b 	bl	8000298 <__aeabi_dsub>
 800bc02:	a351      	add	r3, pc, #324	@ (adr r3, 800bd48 <__ieee754_pow+0x3f0>)
 800bc04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc08:	4604      	mov	r4, r0
 800bc0a:	460d      	mov	r5, r1
 800bc0c:	f7f4 fcfc 	bl	8000608 <__aeabi_dmul>
 800bc10:	a34f      	add	r3, pc, #316	@ (adr r3, 800bd50 <__ieee754_pow+0x3f8>)
 800bc12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc16:	4606      	mov	r6, r0
 800bc18:	460f      	mov	r7, r1
 800bc1a:	4620      	mov	r0, r4
 800bc1c:	4629      	mov	r1, r5
 800bc1e:	f7f4 fcf3 	bl	8000608 <__aeabi_dmul>
 800bc22:	4b52      	ldr	r3, [pc, #328]	@ (800bd6c <__ieee754_pow+0x414>)
 800bc24:	4682      	mov	sl, r0
 800bc26:	468b      	mov	fp, r1
 800bc28:	2200      	movs	r2, #0
 800bc2a:	4620      	mov	r0, r4
 800bc2c:	4629      	mov	r1, r5
 800bc2e:	f7f4 fceb 	bl	8000608 <__aeabi_dmul>
 800bc32:	4602      	mov	r2, r0
 800bc34:	460b      	mov	r3, r1
 800bc36:	a148      	add	r1, pc, #288	@ (adr r1, 800bd58 <__ieee754_pow+0x400>)
 800bc38:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc3c:	f7f4 fb2c 	bl	8000298 <__aeabi_dsub>
 800bc40:	4622      	mov	r2, r4
 800bc42:	462b      	mov	r3, r5
 800bc44:	f7f4 fce0 	bl	8000608 <__aeabi_dmul>
 800bc48:	4602      	mov	r2, r0
 800bc4a:	460b      	mov	r3, r1
 800bc4c:	2000      	movs	r0, #0
 800bc4e:	4948      	ldr	r1, [pc, #288]	@ (800bd70 <__ieee754_pow+0x418>)
 800bc50:	f7f4 fb22 	bl	8000298 <__aeabi_dsub>
 800bc54:	4622      	mov	r2, r4
 800bc56:	4680      	mov	r8, r0
 800bc58:	4689      	mov	r9, r1
 800bc5a:	462b      	mov	r3, r5
 800bc5c:	4620      	mov	r0, r4
 800bc5e:	4629      	mov	r1, r5
 800bc60:	f7f4 fcd2 	bl	8000608 <__aeabi_dmul>
 800bc64:	4602      	mov	r2, r0
 800bc66:	460b      	mov	r3, r1
 800bc68:	4640      	mov	r0, r8
 800bc6a:	4649      	mov	r1, r9
 800bc6c:	f7f4 fccc 	bl	8000608 <__aeabi_dmul>
 800bc70:	a33b      	add	r3, pc, #236	@ (adr r3, 800bd60 <__ieee754_pow+0x408>)
 800bc72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc76:	f7f4 fcc7 	bl	8000608 <__aeabi_dmul>
 800bc7a:	4602      	mov	r2, r0
 800bc7c:	460b      	mov	r3, r1
 800bc7e:	4650      	mov	r0, sl
 800bc80:	4659      	mov	r1, fp
 800bc82:	f7f4 fb09 	bl	8000298 <__aeabi_dsub>
 800bc86:	4602      	mov	r2, r0
 800bc88:	460b      	mov	r3, r1
 800bc8a:	4680      	mov	r8, r0
 800bc8c:	4689      	mov	r9, r1
 800bc8e:	4630      	mov	r0, r6
 800bc90:	4639      	mov	r1, r7
 800bc92:	f7f4 fb03 	bl	800029c <__adddf3>
 800bc96:	2400      	movs	r4, #0
 800bc98:	4632      	mov	r2, r6
 800bc9a:	463b      	mov	r3, r7
 800bc9c:	4620      	mov	r0, r4
 800bc9e:	460d      	mov	r5, r1
 800bca0:	f7f4 fafa 	bl	8000298 <__aeabi_dsub>
 800bca4:	4602      	mov	r2, r0
 800bca6:	460b      	mov	r3, r1
 800bca8:	4640      	mov	r0, r8
 800bcaa:	4649      	mov	r1, r9
 800bcac:	f7f4 faf4 	bl	8000298 <__aeabi_dsub>
 800bcb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bcb4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bcb8:	2300      	movs	r3, #0
 800bcba:	9304      	str	r3, [sp, #16]
 800bcbc:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800bcc0:	4606      	mov	r6, r0
 800bcc2:	460f      	mov	r7, r1
 800bcc4:	4652      	mov	r2, sl
 800bcc6:	465b      	mov	r3, fp
 800bcc8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bccc:	f7f4 fae4 	bl	8000298 <__aeabi_dsub>
 800bcd0:	4622      	mov	r2, r4
 800bcd2:	462b      	mov	r3, r5
 800bcd4:	f7f4 fc98 	bl	8000608 <__aeabi_dmul>
 800bcd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bcdc:	4680      	mov	r8, r0
 800bcde:	4689      	mov	r9, r1
 800bce0:	4630      	mov	r0, r6
 800bce2:	4639      	mov	r1, r7
 800bce4:	f7f4 fc90 	bl	8000608 <__aeabi_dmul>
 800bce8:	4602      	mov	r2, r0
 800bcea:	460b      	mov	r3, r1
 800bcec:	4640      	mov	r0, r8
 800bcee:	4649      	mov	r1, r9
 800bcf0:	f7f4 fad4 	bl	800029c <__adddf3>
 800bcf4:	4652      	mov	r2, sl
 800bcf6:	465b      	mov	r3, fp
 800bcf8:	4606      	mov	r6, r0
 800bcfa:	460f      	mov	r7, r1
 800bcfc:	4620      	mov	r0, r4
 800bcfe:	4629      	mov	r1, r5
 800bd00:	f7f4 fc82 	bl	8000608 <__aeabi_dmul>
 800bd04:	460b      	mov	r3, r1
 800bd06:	4602      	mov	r2, r0
 800bd08:	4680      	mov	r8, r0
 800bd0a:	4689      	mov	r9, r1
 800bd0c:	4630      	mov	r0, r6
 800bd0e:	4639      	mov	r1, r7
 800bd10:	f7f4 fac4 	bl	800029c <__adddf3>
 800bd14:	4b17      	ldr	r3, [pc, #92]	@ (800bd74 <__ieee754_pow+0x41c>)
 800bd16:	4299      	cmp	r1, r3
 800bd18:	4604      	mov	r4, r0
 800bd1a:	460d      	mov	r5, r1
 800bd1c:	468a      	mov	sl, r1
 800bd1e:	468b      	mov	fp, r1
 800bd20:	f340 82ef 	ble.w	800c302 <__ieee754_pow+0x9aa>
 800bd24:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800bd28:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800bd2c:	4303      	orrs	r3, r0
 800bd2e:	f000 81e8 	beq.w	800c102 <__ieee754_pow+0x7aa>
 800bd32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd36:	2200      	movs	r2, #0
 800bd38:	2300      	movs	r3, #0
 800bd3a:	f7f4 fed7 	bl	8000aec <__aeabi_dcmplt>
 800bd3e:	3800      	subs	r0, #0
 800bd40:	bf18      	it	ne
 800bd42:	2001      	movne	r0, #1
 800bd44:	e710      	b.n	800bb68 <__ieee754_pow+0x210>
 800bd46:	bf00      	nop
 800bd48:	60000000 	.word	0x60000000
 800bd4c:	3ff71547 	.word	0x3ff71547
 800bd50:	f85ddf44 	.word	0xf85ddf44
 800bd54:	3e54ae0b 	.word	0x3e54ae0b
 800bd58:	55555555 	.word	0x55555555
 800bd5c:	3fd55555 	.word	0x3fd55555
 800bd60:	652b82fe 	.word	0x652b82fe
 800bd64:	3ff71547 	.word	0x3ff71547
 800bd68:	3ff00000 	.word	0x3ff00000
 800bd6c:	3fd00000 	.word	0x3fd00000
 800bd70:	3fe00000 	.word	0x3fe00000
 800bd74:	408fffff 	.word	0x408fffff
 800bd78:	4bd5      	ldr	r3, [pc, #852]	@ (800c0d0 <__ieee754_pow+0x778>)
 800bd7a:	402b      	ands	r3, r5
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	b92b      	cbnz	r3, 800bd8c <__ieee754_pow+0x434>
 800bd80:	4bd4      	ldr	r3, [pc, #848]	@ (800c0d4 <__ieee754_pow+0x77c>)
 800bd82:	f7f4 fc41 	bl	8000608 <__aeabi_dmul>
 800bd86:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800bd8a:	468b      	mov	fp, r1
 800bd8c:	ea4f 532b 	mov.w	r3, fp, asr #20
 800bd90:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800bd94:	4413      	add	r3, r2
 800bd96:	930a      	str	r3, [sp, #40]	@ 0x28
 800bd98:	4bcf      	ldr	r3, [pc, #828]	@ (800c0d8 <__ieee754_pow+0x780>)
 800bd9a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800bd9e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800bda2:	459b      	cmp	fp, r3
 800bda4:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800bda8:	dd08      	ble.n	800bdbc <__ieee754_pow+0x464>
 800bdaa:	4bcc      	ldr	r3, [pc, #816]	@ (800c0dc <__ieee754_pow+0x784>)
 800bdac:	459b      	cmp	fp, r3
 800bdae:	f340 81a5 	ble.w	800c0fc <__ieee754_pow+0x7a4>
 800bdb2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bdb4:	3301      	adds	r3, #1
 800bdb6:	930a      	str	r3, [sp, #40]	@ 0x28
 800bdb8:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800bdbc:	f04f 0a00 	mov.w	sl, #0
 800bdc0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800bdc4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bdc6:	4bc6      	ldr	r3, [pc, #792]	@ (800c0e0 <__ieee754_pow+0x788>)
 800bdc8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bdcc:	ed93 7b00 	vldr	d7, [r3]
 800bdd0:	4629      	mov	r1, r5
 800bdd2:	ec53 2b17 	vmov	r2, r3, d7
 800bdd6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bdda:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bdde:	f7f4 fa5b 	bl	8000298 <__aeabi_dsub>
 800bde2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bde6:	4606      	mov	r6, r0
 800bde8:	460f      	mov	r7, r1
 800bdea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bdee:	f7f4 fa55 	bl	800029c <__adddf3>
 800bdf2:	4602      	mov	r2, r0
 800bdf4:	460b      	mov	r3, r1
 800bdf6:	2000      	movs	r0, #0
 800bdf8:	49ba      	ldr	r1, [pc, #744]	@ (800c0e4 <__ieee754_pow+0x78c>)
 800bdfa:	f7f4 fd2f 	bl	800085c <__aeabi_ddiv>
 800bdfe:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800be02:	4602      	mov	r2, r0
 800be04:	460b      	mov	r3, r1
 800be06:	4630      	mov	r0, r6
 800be08:	4639      	mov	r1, r7
 800be0a:	f7f4 fbfd 	bl	8000608 <__aeabi_dmul>
 800be0e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800be12:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800be16:	106d      	asrs	r5, r5, #1
 800be18:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800be1c:	f04f 0b00 	mov.w	fp, #0
 800be20:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800be24:	4661      	mov	r1, ip
 800be26:	2200      	movs	r2, #0
 800be28:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800be2c:	4658      	mov	r0, fp
 800be2e:	46e1      	mov	r9, ip
 800be30:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800be34:	4614      	mov	r4, r2
 800be36:	461d      	mov	r5, r3
 800be38:	f7f4 fbe6 	bl	8000608 <__aeabi_dmul>
 800be3c:	4602      	mov	r2, r0
 800be3e:	460b      	mov	r3, r1
 800be40:	4630      	mov	r0, r6
 800be42:	4639      	mov	r1, r7
 800be44:	f7f4 fa28 	bl	8000298 <__aeabi_dsub>
 800be48:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800be4c:	4606      	mov	r6, r0
 800be4e:	460f      	mov	r7, r1
 800be50:	4620      	mov	r0, r4
 800be52:	4629      	mov	r1, r5
 800be54:	f7f4 fa20 	bl	8000298 <__aeabi_dsub>
 800be58:	4602      	mov	r2, r0
 800be5a:	460b      	mov	r3, r1
 800be5c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800be60:	f7f4 fa1a 	bl	8000298 <__aeabi_dsub>
 800be64:	465a      	mov	r2, fp
 800be66:	464b      	mov	r3, r9
 800be68:	f7f4 fbce 	bl	8000608 <__aeabi_dmul>
 800be6c:	4602      	mov	r2, r0
 800be6e:	460b      	mov	r3, r1
 800be70:	4630      	mov	r0, r6
 800be72:	4639      	mov	r1, r7
 800be74:	f7f4 fa10 	bl	8000298 <__aeabi_dsub>
 800be78:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800be7c:	f7f4 fbc4 	bl	8000608 <__aeabi_dmul>
 800be80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be84:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800be88:	4610      	mov	r0, r2
 800be8a:	4619      	mov	r1, r3
 800be8c:	f7f4 fbbc 	bl	8000608 <__aeabi_dmul>
 800be90:	a37d      	add	r3, pc, #500	@ (adr r3, 800c088 <__ieee754_pow+0x730>)
 800be92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be96:	4604      	mov	r4, r0
 800be98:	460d      	mov	r5, r1
 800be9a:	f7f4 fbb5 	bl	8000608 <__aeabi_dmul>
 800be9e:	a37c      	add	r3, pc, #496	@ (adr r3, 800c090 <__ieee754_pow+0x738>)
 800bea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bea4:	f7f4 f9fa 	bl	800029c <__adddf3>
 800bea8:	4622      	mov	r2, r4
 800beaa:	462b      	mov	r3, r5
 800beac:	f7f4 fbac 	bl	8000608 <__aeabi_dmul>
 800beb0:	a379      	add	r3, pc, #484	@ (adr r3, 800c098 <__ieee754_pow+0x740>)
 800beb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beb6:	f7f4 f9f1 	bl	800029c <__adddf3>
 800beba:	4622      	mov	r2, r4
 800bebc:	462b      	mov	r3, r5
 800bebe:	f7f4 fba3 	bl	8000608 <__aeabi_dmul>
 800bec2:	a377      	add	r3, pc, #476	@ (adr r3, 800c0a0 <__ieee754_pow+0x748>)
 800bec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bec8:	f7f4 f9e8 	bl	800029c <__adddf3>
 800becc:	4622      	mov	r2, r4
 800bece:	462b      	mov	r3, r5
 800bed0:	f7f4 fb9a 	bl	8000608 <__aeabi_dmul>
 800bed4:	a374      	add	r3, pc, #464	@ (adr r3, 800c0a8 <__ieee754_pow+0x750>)
 800bed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beda:	f7f4 f9df 	bl	800029c <__adddf3>
 800bede:	4622      	mov	r2, r4
 800bee0:	462b      	mov	r3, r5
 800bee2:	f7f4 fb91 	bl	8000608 <__aeabi_dmul>
 800bee6:	a372      	add	r3, pc, #456	@ (adr r3, 800c0b0 <__ieee754_pow+0x758>)
 800bee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beec:	f7f4 f9d6 	bl	800029c <__adddf3>
 800bef0:	4622      	mov	r2, r4
 800bef2:	4606      	mov	r6, r0
 800bef4:	460f      	mov	r7, r1
 800bef6:	462b      	mov	r3, r5
 800bef8:	4620      	mov	r0, r4
 800befa:	4629      	mov	r1, r5
 800befc:	f7f4 fb84 	bl	8000608 <__aeabi_dmul>
 800bf00:	4602      	mov	r2, r0
 800bf02:	460b      	mov	r3, r1
 800bf04:	4630      	mov	r0, r6
 800bf06:	4639      	mov	r1, r7
 800bf08:	f7f4 fb7e 	bl	8000608 <__aeabi_dmul>
 800bf0c:	465a      	mov	r2, fp
 800bf0e:	4604      	mov	r4, r0
 800bf10:	460d      	mov	r5, r1
 800bf12:	464b      	mov	r3, r9
 800bf14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bf18:	f7f4 f9c0 	bl	800029c <__adddf3>
 800bf1c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bf20:	f7f4 fb72 	bl	8000608 <__aeabi_dmul>
 800bf24:	4622      	mov	r2, r4
 800bf26:	462b      	mov	r3, r5
 800bf28:	f7f4 f9b8 	bl	800029c <__adddf3>
 800bf2c:	465a      	mov	r2, fp
 800bf2e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bf32:	464b      	mov	r3, r9
 800bf34:	4658      	mov	r0, fp
 800bf36:	4649      	mov	r1, r9
 800bf38:	f7f4 fb66 	bl	8000608 <__aeabi_dmul>
 800bf3c:	4b6a      	ldr	r3, [pc, #424]	@ (800c0e8 <__ieee754_pow+0x790>)
 800bf3e:	2200      	movs	r2, #0
 800bf40:	4606      	mov	r6, r0
 800bf42:	460f      	mov	r7, r1
 800bf44:	f7f4 f9aa 	bl	800029c <__adddf3>
 800bf48:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bf4c:	f7f4 f9a6 	bl	800029c <__adddf3>
 800bf50:	46d8      	mov	r8, fp
 800bf52:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800bf56:	460d      	mov	r5, r1
 800bf58:	465a      	mov	r2, fp
 800bf5a:	460b      	mov	r3, r1
 800bf5c:	4640      	mov	r0, r8
 800bf5e:	4649      	mov	r1, r9
 800bf60:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800bf64:	f7f4 fb50 	bl	8000608 <__aeabi_dmul>
 800bf68:	465c      	mov	r4, fp
 800bf6a:	4680      	mov	r8, r0
 800bf6c:	4689      	mov	r9, r1
 800bf6e:	4b5e      	ldr	r3, [pc, #376]	@ (800c0e8 <__ieee754_pow+0x790>)
 800bf70:	2200      	movs	r2, #0
 800bf72:	4620      	mov	r0, r4
 800bf74:	4629      	mov	r1, r5
 800bf76:	f7f4 f98f 	bl	8000298 <__aeabi_dsub>
 800bf7a:	4632      	mov	r2, r6
 800bf7c:	463b      	mov	r3, r7
 800bf7e:	f7f4 f98b 	bl	8000298 <__aeabi_dsub>
 800bf82:	4602      	mov	r2, r0
 800bf84:	460b      	mov	r3, r1
 800bf86:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bf8a:	f7f4 f985 	bl	8000298 <__aeabi_dsub>
 800bf8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bf92:	f7f4 fb39 	bl	8000608 <__aeabi_dmul>
 800bf96:	4622      	mov	r2, r4
 800bf98:	4606      	mov	r6, r0
 800bf9a:	460f      	mov	r7, r1
 800bf9c:	462b      	mov	r3, r5
 800bf9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bfa2:	f7f4 fb31 	bl	8000608 <__aeabi_dmul>
 800bfa6:	4602      	mov	r2, r0
 800bfa8:	460b      	mov	r3, r1
 800bfaa:	4630      	mov	r0, r6
 800bfac:	4639      	mov	r1, r7
 800bfae:	f7f4 f975 	bl	800029c <__adddf3>
 800bfb2:	4606      	mov	r6, r0
 800bfb4:	460f      	mov	r7, r1
 800bfb6:	4602      	mov	r2, r0
 800bfb8:	460b      	mov	r3, r1
 800bfba:	4640      	mov	r0, r8
 800bfbc:	4649      	mov	r1, r9
 800bfbe:	f7f4 f96d 	bl	800029c <__adddf3>
 800bfc2:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800bfc6:	a33c      	add	r3, pc, #240	@ (adr r3, 800c0b8 <__ieee754_pow+0x760>)
 800bfc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfcc:	4658      	mov	r0, fp
 800bfce:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800bfd2:	460d      	mov	r5, r1
 800bfd4:	f7f4 fb18 	bl	8000608 <__aeabi_dmul>
 800bfd8:	465c      	mov	r4, fp
 800bfda:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bfde:	4642      	mov	r2, r8
 800bfe0:	464b      	mov	r3, r9
 800bfe2:	4620      	mov	r0, r4
 800bfe4:	4629      	mov	r1, r5
 800bfe6:	f7f4 f957 	bl	8000298 <__aeabi_dsub>
 800bfea:	4602      	mov	r2, r0
 800bfec:	460b      	mov	r3, r1
 800bfee:	4630      	mov	r0, r6
 800bff0:	4639      	mov	r1, r7
 800bff2:	f7f4 f951 	bl	8000298 <__aeabi_dsub>
 800bff6:	a332      	add	r3, pc, #200	@ (adr r3, 800c0c0 <__ieee754_pow+0x768>)
 800bff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bffc:	f7f4 fb04 	bl	8000608 <__aeabi_dmul>
 800c000:	a331      	add	r3, pc, #196	@ (adr r3, 800c0c8 <__ieee754_pow+0x770>)
 800c002:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c006:	4606      	mov	r6, r0
 800c008:	460f      	mov	r7, r1
 800c00a:	4620      	mov	r0, r4
 800c00c:	4629      	mov	r1, r5
 800c00e:	f7f4 fafb 	bl	8000608 <__aeabi_dmul>
 800c012:	4602      	mov	r2, r0
 800c014:	460b      	mov	r3, r1
 800c016:	4630      	mov	r0, r6
 800c018:	4639      	mov	r1, r7
 800c01a:	f7f4 f93f 	bl	800029c <__adddf3>
 800c01e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c020:	4b32      	ldr	r3, [pc, #200]	@ (800c0ec <__ieee754_pow+0x794>)
 800c022:	4413      	add	r3, r2
 800c024:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c028:	f7f4 f938 	bl	800029c <__adddf3>
 800c02c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c030:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c032:	f7f4 fa7f 	bl	8000534 <__aeabi_i2d>
 800c036:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c038:	4b2d      	ldr	r3, [pc, #180]	@ (800c0f0 <__ieee754_pow+0x798>)
 800c03a:	4413      	add	r3, r2
 800c03c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c040:	4606      	mov	r6, r0
 800c042:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c046:	460f      	mov	r7, r1
 800c048:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c04c:	f7f4 f926 	bl	800029c <__adddf3>
 800c050:	4642      	mov	r2, r8
 800c052:	464b      	mov	r3, r9
 800c054:	f7f4 f922 	bl	800029c <__adddf3>
 800c058:	4632      	mov	r2, r6
 800c05a:	463b      	mov	r3, r7
 800c05c:	f7f4 f91e 	bl	800029c <__adddf3>
 800c060:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800c064:	4632      	mov	r2, r6
 800c066:	463b      	mov	r3, r7
 800c068:	4658      	mov	r0, fp
 800c06a:	460d      	mov	r5, r1
 800c06c:	f7f4 f914 	bl	8000298 <__aeabi_dsub>
 800c070:	4642      	mov	r2, r8
 800c072:	464b      	mov	r3, r9
 800c074:	f7f4 f910 	bl	8000298 <__aeabi_dsub>
 800c078:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c07c:	f7f4 f90c 	bl	8000298 <__aeabi_dsub>
 800c080:	465c      	mov	r4, fp
 800c082:	4602      	mov	r2, r0
 800c084:	e036      	b.n	800c0f4 <__ieee754_pow+0x79c>
 800c086:	bf00      	nop
 800c088:	4a454eef 	.word	0x4a454eef
 800c08c:	3fca7e28 	.word	0x3fca7e28
 800c090:	93c9db65 	.word	0x93c9db65
 800c094:	3fcd864a 	.word	0x3fcd864a
 800c098:	a91d4101 	.word	0xa91d4101
 800c09c:	3fd17460 	.word	0x3fd17460
 800c0a0:	518f264d 	.word	0x518f264d
 800c0a4:	3fd55555 	.word	0x3fd55555
 800c0a8:	db6fabff 	.word	0xdb6fabff
 800c0ac:	3fdb6db6 	.word	0x3fdb6db6
 800c0b0:	33333303 	.word	0x33333303
 800c0b4:	3fe33333 	.word	0x3fe33333
 800c0b8:	e0000000 	.word	0xe0000000
 800c0bc:	3feec709 	.word	0x3feec709
 800c0c0:	dc3a03fd 	.word	0xdc3a03fd
 800c0c4:	3feec709 	.word	0x3feec709
 800c0c8:	145b01f5 	.word	0x145b01f5
 800c0cc:	be3e2fe0 	.word	0xbe3e2fe0
 800c0d0:	7ff00000 	.word	0x7ff00000
 800c0d4:	43400000 	.word	0x43400000
 800c0d8:	0003988e 	.word	0x0003988e
 800c0dc:	000bb679 	.word	0x000bb679
 800c0e0:	0800d0c0 	.word	0x0800d0c0
 800c0e4:	3ff00000 	.word	0x3ff00000
 800c0e8:	40080000 	.word	0x40080000
 800c0ec:	0800d0a0 	.word	0x0800d0a0
 800c0f0:	0800d0b0 	.word	0x0800d0b0
 800c0f4:	460b      	mov	r3, r1
 800c0f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c0fa:	e5d7      	b.n	800bcac <__ieee754_pow+0x354>
 800c0fc:	f04f 0a01 	mov.w	sl, #1
 800c100:	e65e      	b.n	800bdc0 <__ieee754_pow+0x468>
 800c102:	a3b4      	add	r3, pc, #720	@ (adr r3, 800c3d4 <__ieee754_pow+0xa7c>)
 800c104:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c108:	4630      	mov	r0, r6
 800c10a:	4639      	mov	r1, r7
 800c10c:	f7f4 f8c6 	bl	800029c <__adddf3>
 800c110:	4642      	mov	r2, r8
 800c112:	e9cd 0100 	strd	r0, r1, [sp]
 800c116:	464b      	mov	r3, r9
 800c118:	4620      	mov	r0, r4
 800c11a:	4629      	mov	r1, r5
 800c11c:	f7f4 f8bc 	bl	8000298 <__aeabi_dsub>
 800c120:	4602      	mov	r2, r0
 800c122:	460b      	mov	r3, r1
 800c124:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c128:	f7f4 fcfe 	bl	8000b28 <__aeabi_dcmpgt>
 800c12c:	2800      	cmp	r0, #0
 800c12e:	f47f ae00 	bne.w	800bd32 <__ieee754_pow+0x3da>
 800c132:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800c136:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800c13a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800c13e:	fa43 fa0a 	asr.w	sl, r3, sl
 800c142:	44da      	add	sl, fp
 800c144:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800c148:	489d      	ldr	r0, [pc, #628]	@ (800c3c0 <__ieee754_pow+0xa68>)
 800c14a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800c14e:	4108      	asrs	r0, r1
 800c150:	ea00 030a 	and.w	r3, r0, sl
 800c154:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800c158:	f1c1 0114 	rsb	r1, r1, #20
 800c15c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800c160:	fa4a fa01 	asr.w	sl, sl, r1
 800c164:	f1bb 0f00 	cmp.w	fp, #0
 800c168:	4640      	mov	r0, r8
 800c16a:	4649      	mov	r1, r9
 800c16c:	f04f 0200 	mov.w	r2, #0
 800c170:	bfb8      	it	lt
 800c172:	f1ca 0a00 	rsblt	sl, sl, #0
 800c176:	f7f4 f88f 	bl	8000298 <__aeabi_dsub>
 800c17a:	4680      	mov	r8, r0
 800c17c:	4689      	mov	r9, r1
 800c17e:	4632      	mov	r2, r6
 800c180:	463b      	mov	r3, r7
 800c182:	4640      	mov	r0, r8
 800c184:	4649      	mov	r1, r9
 800c186:	f7f4 f889 	bl	800029c <__adddf3>
 800c18a:	2400      	movs	r4, #0
 800c18c:	a37c      	add	r3, pc, #496	@ (adr r3, 800c380 <__ieee754_pow+0xa28>)
 800c18e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c192:	4620      	mov	r0, r4
 800c194:	460d      	mov	r5, r1
 800c196:	f7f4 fa37 	bl	8000608 <__aeabi_dmul>
 800c19a:	4642      	mov	r2, r8
 800c19c:	e9cd 0100 	strd	r0, r1, [sp]
 800c1a0:	464b      	mov	r3, r9
 800c1a2:	4620      	mov	r0, r4
 800c1a4:	4629      	mov	r1, r5
 800c1a6:	f7f4 f877 	bl	8000298 <__aeabi_dsub>
 800c1aa:	4602      	mov	r2, r0
 800c1ac:	460b      	mov	r3, r1
 800c1ae:	4630      	mov	r0, r6
 800c1b0:	4639      	mov	r1, r7
 800c1b2:	f7f4 f871 	bl	8000298 <__aeabi_dsub>
 800c1b6:	a374      	add	r3, pc, #464	@ (adr r3, 800c388 <__ieee754_pow+0xa30>)
 800c1b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1bc:	f7f4 fa24 	bl	8000608 <__aeabi_dmul>
 800c1c0:	a373      	add	r3, pc, #460	@ (adr r3, 800c390 <__ieee754_pow+0xa38>)
 800c1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1c6:	4680      	mov	r8, r0
 800c1c8:	4689      	mov	r9, r1
 800c1ca:	4620      	mov	r0, r4
 800c1cc:	4629      	mov	r1, r5
 800c1ce:	f7f4 fa1b 	bl	8000608 <__aeabi_dmul>
 800c1d2:	4602      	mov	r2, r0
 800c1d4:	460b      	mov	r3, r1
 800c1d6:	4640      	mov	r0, r8
 800c1d8:	4649      	mov	r1, r9
 800c1da:	f7f4 f85f 	bl	800029c <__adddf3>
 800c1de:	4604      	mov	r4, r0
 800c1e0:	460d      	mov	r5, r1
 800c1e2:	4602      	mov	r2, r0
 800c1e4:	460b      	mov	r3, r1
 800c1e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c1ea:	f7f4 f857 	bl	800029c <__adddf3>
 800c1ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c1f2:	4680      	mov	r8, r0
 800c1f4:	4689      	mov	r9, r1
 800c1f6:	f7f4 f84f 	bl	8000298 <__aeabi_dsub>
 800c1fa:	4602      	mov	r2, r0
 800c1fc:	460b      	mov	r3, r1
 800c1fe:	4620      	mov	r0, r4
 800c200:	4629      	mov	r1, r5
 800c202:	f7f4 f849 	bl	8000298 <__aeabi_dsub>
 800c206:	4642      	mov	r2, r8
 800c208:	4606      	mov	r6, r0
 800c20a:	460f      	mov	r7, r1
 800c20c:	464b      	mov	r3, r9
 800c20e:	4640      	mov	r0, r8
 800c210:	4649      	mov	r1, r9
 800c212:	f7f4 f9f9 	bl	8000608 <__aeabi_dmul>
 800c216:	a360      	add	r3, pc, #384	@ (adr r3, 800c398 <__ieee754_pow+0xa40>)
 800c218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c21c:	4604      	mov	r4, r0
 800c21e:	460d      	mov	r5, r1
 800c220:	f7f4 f9f2 	bl	8000608 <__aeabi_dmul>
 800c224:	a35e      	add	r3, pc, #376	@ (adr r3, 800c3a0 <__ieee754_pow+0xa48>)
 800c226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c22a:	f7f4 f835 	bl	8000298 <__aeabi_dsub>
 800c22e:	4622      	mov	r2, r4
 800c230:	462b      	mov	r3, r5
 800c232:	f7f4 f9e9 	bl	8000608 <__aeabi_dmul>
 800c236:	a35c      	add	r3, pc, #368	@ (adr r3, 800c3a8 <__ieee754_pow+0xa50>)
 800c238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c23c:	f7f4 f82e 	bl	800029c <__adddf3>
 800c240:	4622      	mov	r2, r4
 800c242:	462b      	mov	r3, r5
 800c244:	f7f4 f9e0 	bl	8000608 <__aeabi_dmul>
 800c248:	a359      	add	r3, pc, #356	@ (adr r3, 800c3b0 <__ieee754_pow+0xa58>)
 800c24a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c24e:	f7f4 f823 	bl	8000298 <__aeabi_dsub>
 800c252:	4622      	mov	r2, r4
 800c254:	462b      	mov	r3, r5
 800c256:	f7f4 f9d7 	bl	8000608 <__aeabi_dmul>
 800c25a:	a357      	add	r3, pc, #348	@ (adr r3, 800c3b8 <__ieee754_pow+0xa60>)
 800c25c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c260:	f7f4 f81c 	bl	800029c <__adddf3>
 800c264:	4622      	mov	r2, r4
 800c266:	462b      	mov	r3, r5
 800c268:	f7f4 f9ce 	bl	8000608 <__aeabi_dmul>
 800c26c:	4602      	mov	r2, r0
 800c26e:	460b      	mov	r3, r1
 800c270:	4640      	mov	r0, r8
 800c272:	4649      	mov	r1, r9
 800c274:	f7f4 f810 	bl	8000298 <__aeabi_dsub>
 800c278:	4604      	mov	r4, r0
 800c27a:	460d      	mov	r5, r1
 800c27c:	4602      	mov	r2, r0
 800c27e:	460b      	mov	r3, r1
 800c280:	4640      	mov	r0, r8
 800c282:	4649      	mov	r1, r9
 800c284:	f7f4 f9c0 	bl	8000608 <__aeabi_dmul>
 800c288:	2200      	movs	r2, #0
 800c28a:	e9cd 0100 	strd	r0, r1, [sp]
 800c28e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c292:	4620      	mov	r0, r4
 800c294:	4629      	mov	r1, r5
 800c296:	f7f3 ffff 	bl	8000298 <__aeabi_dsub>
 800c29a:	4602      	mov	r2, r0
 800c29c:	460b      	mov	r3, r1
 800c29e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c2a2:	f7f4 fadb 	bl	800085c <__aeabi_ddiv>
 800c2a6:	4632      	mov	r2, r6
 800c2a8:	4604      	mov	r4, r0
 800c2aa:	460d      	mov	r5, r1
 800c2ac:	463b      	mov	r3, r7
 800c2ae:	4640      	mov	r0, r8
 800c2b0:	4649      	mov	r1, r9
 800c2b2:	f7f4 f9a9 	bl	8000608 <__aeabi_dmul>
 800c2b6:	4632      	mov	r2, r6
 800c2b8:	463b      	mov	r3, r7
 800c2ba:	f7f3 ffef 	bl	800029c <__adddf3>
 800c2be:	4602      	mov	r2, r0
 800c2c0:	460b      	mov	r3, r1
 800c2c2:	4620      	mov	r0, r4
 800c2c4:	4629      	mov	r1, r5
 800c2c6:	f7f3 ffe7 	bl	8000298 <__aeabi_dsub>
 800c2ca:	4642      	mov	r2, r8
 800c2cc:	464b      	mov	r3, r9
 800c2ce:	f7f3 ffe3 	bl	8000298 <__aeabi_dsub>
 800c2d2:	460b      	mov	r3, r1
 800c2d4:	4602      	mov	r2, r0
 800c2d6:	493b      	ldr	r1, [pc, #236]	@ (800c3c4 <__ieee754_pow+0xa6c>)
 800c2d8:	2000      	movs	r0, #0
 800c2da:	f7f3 ffdd 	bl	8000298 <__aeabi_dsub>
 800c2de:	ec41 0b10 	vmov	d0, r0, r1
 800c2e2:	ee10 3a90 	vmov	r3, s1
 800c2e6:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c2ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c2ee:	da30      	bge.n	800c352 <__ieee754_pow+0x9fa>
 800c2f0:	4650      	mov	r0, sl
 800c2f2:	f000 f87d 	bl	800c3f0 <scalbn>
 800c2f6:	ec51 0b10 	vmov	r0, r1, d0
 800c2fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c2fe:	f7ff bbd2 	b.w	800baa6 <__ieee754_pow+0x14e>
 800c302:	4c31      	ldr	r4, [pc, #196]	@ (800c3c8 <__ieee754_pow+0xa70>)
 800c304:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c308:	42a3      	cmp	r3, r4
 800c30a:	d91a      	bls.n	800c342 <__ieee754_pow+0x9ea>
 800c30c:	4b2f      	ldr	r3, [pc, #188]	@ (800c3cc <__ieee754_pow+0xa74>)
 800c30e:	440b      	add	r3, r1
 800c310:	4303      	orrs	r3, r0
 800c312:	d009      	beq.n	800c328 <__ieee754_pow+0x9d0>
 800c314:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c318:	2200      	movs	r2, #0
 800c31a:	2300      	movs	r3, #0
 800c31c:	f7f4 fbe6 	bl	8000aec <__aeabi_dcmplt>
 800c320:	3800      	subs	r0, #0
 800c322:	bf18      	it	ne
 800c324:	2001      	movne	r0, #1
 800c326:	e42b      	b.n	800bb80 <__ieee754_pow+0x228>
 800c328:	4642      	mov	r2, r8
 800c32a:	464b      	mov	r3, r9
 800c32c:	f7f3 ffb4 	bl	8000298 <__aeabi_dsub>
 800c330:	4632      	mov	r2, r6
 800c332:	463b      	mov	r3, r7
 800c334:	f7f4 fbee 	bl	8000b14 <__aeabi_dcmpge>
 800c338:	2800      	cmp	r0, #0
 800c33a:	d1eb      	bne.n	800c314 <__ieee754_pow+0x9bc>
 800c33c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800c3dc <__ieee754_pow+0xa84>
 800c340:	e6f7      	b.n	800c132 <__ieee754_pow+0x7da>
 800c342:	469a      	mov	sl, r3
 800c344:	4b22      	ldr	r3, [pc, #136]	@ (800c3d0 <__ieee754_pow+0xa78>)
 800c346:	459a      	cmp	sl, r3
 800c348:	f63f aef3 	bhi.w	800c132 <__ieee754_pow+0x7da>
 800c34c:	f8dd a010 	ldr.w	sl, [sp, #16]
 800c350:	e715      	b.n	800c17e <__ieee754_pow+0x826>
 800c352:	ec51 0b10 	vmov	r0, r1, d0
 800c356:	4619      	mov	r1, r3
 800c358:	e7cf      	b.n	800c2fa <__ieee754_pow+0x9a2>
 800c35a:	491a      	ldr	r1, [pc, #104]	@ (800c3c4 <__ieee754_pow+0xa6c>)
 800c35c:	2000      	movs	r0, #0
 800c35e:	f7ff bb18 	b.w	800b992 <__ieee754_pow+0x3a>
 800c362:	2000      	movs	r0, #0
 800c364:	2100      	movs	r1, #0
 800c366:	f7ff bb14 	b.w	800b992 <__ieee754_pow+0x3a>
 800c36a:	4630      	mov	r0, r6
 800c36c:	4639      	mov	r1, r7
 800c36e:	f7ff bb10 	b.w	800b992 <__ieee754_pow+0x3a>
 800c372:	460c      	mov	r4, r1
 800c374:	f7ff bb5e 	b.w	800ba34 <__ieee754_pow+0xdc>
 800c378:	2400      	movs	r4, #0
 800c37a:	f7ff bb49 	b.w	800ba10 <__ieee754_pow+0xb8>
 800c37e:	bf00      	nop
 800c380:	00000000 	.word	0x00000000
 800c384:	3fe62e43 	.word	0x3fe62e43
 800c388:	fefa39ef 	.word	0xfefa39ef
 800c38c:	3fe62e42 	.word	0x3fe62e42
 800c390:	0ca86c39 	.word	0x0ca86c39
 800c394:	be205c61 	.word	0xbe205c61
 800c398:	72bea4d0 	.word	0x72bea4d0
 800c39c:	3e663769 	.word	0x3e663769
 800c3a0:	c5d26bf1 	.word	0xc5d26bf1
 800c3a4:	3ebbbd41 	.word	0x3ebbbd41
 800c3a8:	af25de2c 	.word	0xaf25de2c
 800c3ac:	3f11566a 	.word	0x3f11566a
 800c3b0:	16bebd93 	.word	0x16bebd93
 800c3b4:	3f66c16c 	.word	0x3f66c16c
 800c3b8:	5555553e 	.word	0x5555553e
 800c3bc:	3fc55555 	.word	0x3fc55555
 800c3c0:	fff00000 	.word	0xfff00000
 800c3c4:	3ff00000 	.word	0x3ff00000
 800c3c8:	4090cbff 	.word	0x4090cbff
 800c3cc:	3f6f3400 	.word	0x3f6f3400
 800c3d0:	3fe00000 	.word	0x3fe00000
 800c3d4:	652b82fe 	.word	0x652b82fe
 800c3d8:	3c971547 	.word	0x3c971547
 800c3dc:	4090cc00 	.word	0x4090cc00

0800c3e0 <fabs>:
 800c3e0:	ec51 0b10 	vmov	r0, r1, d0
 800c3e4:	4602      	mov	r2, r0
 800c3e6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c3ea:	ec43 2b10 	vmov	d0, r2, r3
 800c3ee:	4770      	bx	lr

0800c3f0 <scalbn>:
 800c3f0:	b570      	push	{r4, r5, r6, lr}
 800c3f2:	ec55 4b10 	vmov	r4, r5, d0
 800c3f6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800c3fa:	4606      	mov	r6, r0
 800c3fc:	462b      	mov	r3, r5
 800c3fe:	b991      	cbnz	r1, 800c426 <scalbn+0x36>
 800c400:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800c404:	4323      	orrs	r3, r4
 800c406:	d03d      	beq.n	800c484 <scalbn+0x94>
 800c408:	4b35      	ldr	r3, [pc, #212]	@ (800c4e0 <scalbn+0xf0>)
 800c40a:	4620      	mov	r0, r4
 800c40c:	4629      	mov	r1, r5
 800c40e:	2200      	movs	r2, #0
 800c410:	f7f4 f8fa 	bl	8000608 <__aeabi_dmul>
 800c414:	4b33      	ldr	r3, [pc, #204]	@ (800c4e4 <scalbn+0xf4>)
 800c416:	429e      	cmp	r6, r3
 800c418:	4604      	mov	r4, r0
 800c41a:	460d      	mov	r5, r1
 800c41c:	da0f      	bge.n	800c43e <scalbn+0x4e>
 800c41e:	a328      	add	r3, pc, #160	@ (adr r3, 800c4c0 <scalbn+0xd0>)
 800c420:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c424:	e01e      	b.n	800c464 <scalbn+0x74>
 800c426:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800c42a:	4291      	cmp	r1, r2
 800c42c:	d10b      	bne.n	800c446 <scalbn+0x56>
 800c42e:	4622      	mov	r2, r4
 800c430:	4620      	mov	r0, r4
 800c432:	4629      	mov	r1, r5
 800c434:	f7f3 ff32 	bl	800029c <__adddf3>
 800c438:	4604      	mov	r4, r0
 800c43a:	460d      	mov	r5, r1
 800c43c:	e022      	b.n	800c484 <scalbn+0x94>
 800c43e:	460b      	mov	r3, r1
 800c440:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800c444:	3936      	subs	r1, #54	@ 0x36
 800c446:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800c44a:	4296      	cmp	r6, r2
 800c44c:	dd0d      	ble.n	800c46a <scalbn+0x7a>
 800c44e:	2d00      	cmp	r5, #0
 800c450:	a11d      	add	r1, pc, #116	@ (adr r1, 800c4c8 <scalbn+0xd8>)
 800c452:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c456:	da02      	bge.n	800c45e <scalbn+0x6e>
 800c458:	a11d      	add	r1, pc, #116	@ (adr r1, 800c4d0 <scalbn+0xe0>)
 800c45a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c45e:	a31a      	add	r3, pc, #104	@ (adr r3, 800c4c8 <scalbn+0xd8>)
 800c460:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c464:	f7f4 f8d0 	bl	8000608 <__aeabi_dmul>
 800c468:	e7e6      	b.n	800c438 <scalbn+0x48>
 800c46a:	1872      	adds	r2, r6, r1
 800c46c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800c470:	428a      	cmp	r2, r1
 800c472:	dcec      	bgt.n	800c44e <scalbn+0x5e>
 800c474:	2a00      	cmp	r2, #0
 800c476:	dd08      	ble.n	800c48a <scalbn+0x9a>
 800c478:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c47c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c480:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c484:	ec45 4b10 	vmov	d0, r4, r5
 800c488:	bd70      	pop	{r4, r5, r6, pc}
 800c48a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800c48e:	da08      	bge.n	800c4a2 <scalbn+0xb2>
 800c490:	2d00      	cmp	r5, #0
 800c492:	a10b      	add	r1, pc, #44	@ (adr r1, 800c4c0 <scalbn+0xd0>)
 800c494:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c498:	dac1      	bge.n	800c41e <scalbn+0x2e>
 800c49a:	a10f      	add	r1, pc, #60	@ (adr r1, 800c4d8 <scalbn+0xe8>)
 800c49c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c4a0:	e7bd      	b.n	800c41e <scalbn+0x2e>
 800c4a2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c4a6:	3236      	adds	r2, #54	@ 0x36
 800c4a8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c4ac:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c4b0:	4620      	mov	r0, r4
 800c4b2:	4b0d      	ldr	r3, [pc, #52]	@ (800c4e8 <scalbn+0xf8>)
 800c4b4:	4629      	mov	r1, r5
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	e7d4      	b.n	800c464 <scalbn+0x74>
 800c4ba:	bf00      	nop
 800c4bc:	f3af 8000 	nop.w
 800c4c0:	c2f8f359 	.word	0xc2f8f359
 800c4c4:	01a56e1f 	.word	0x01a56e1f
 800c4c8:	8800759c 	.word	0x8800759c
 800c4cc:	7e37e43c 	.word	0x7e37e43c
 800c4d0:	8800759c 	.word	0x8800759c
 800c4d4:	fe37e43c 	.word	0xfe37e43c
 800c4d8:	c2f8f359 	.word	0xc2f8f359
 800c4dc:	81a56e1f 	.word	0x81a56e1f
 800c4e0:	43500000 	.word	0x43500000
 800c4e4:	ffff3cb0 	.word	0xffff3cb0
 800c4e8:	3c900000 	.word	0x3c900000

0800c4ec <with_errno>:
 800c4ec:	b510      	push	{r4, lr}
 800c4ee:	ed2d 8b02 	vpush	{d8}
 800c4f2:	eeb0 8a40 	vmov.f32	s16, s0
 800c4f6:	eef0 8a60 	vmov.f32	s17, s1
 800c4fa:	4604      	mov	r4, r0
 800c4fc:	f7fc fdca 	bl	8009094 <__errno>
 800c500:	eeb0 0a48 	vmov.f32	s0, s16
 800c504:	eef0 0a68 	vmov.f32	s1, s17
 800c508:	ecbd 8b02 	vpop	{d8}
 800c50c:	6004      	str	r4, [r0, #0]
 800c50e:	bd10      	pop	{r4, pc}

0800c510 <xflow>:
 800c510:	4603      	mov	r3, r0
 800c512:	b507      	push	{r0, r1, r2, lr}
 800c514:	ec51 0b10 	vmov	r0, r1, d0
 800c518:	b183      	cbz	r3, 800c53c <xflow+0x2c>
 800c51a:	4602      	mov	r2, r0
 800c51c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c520:	e9cd 2300 	strd	r2, r3, [sp]
 800c524:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c528:	f7f4 f86e 	bl	8000608 <__aeabi_dmul>
 800c52c:	ec41 0b10 	vmov	d0, r0, r1
 800c530:	2022      	movs	r0, #34	@ 0x22
 800c532:	b003      	add	sp, #12
 800c534:	f85d eb04 	ldr.w	lr, [sp], #4
 800c538:	f7ff bfd8 	b.w	800c4ec <with_errno>
 800c53c:	4602      	mov	r2, r0
 800c53e:	460b      	mov	r3, r1
 800c540:	e7ee      	b.n	800c520 <xflow+0x10>
 800c542:	0000      	movs	r0, r0
 800c544:	0000      	movs	r0, r0
	...

0800c548 <__math_uflow>:
 800c548:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c550 <__math_uflow+0x8>
 800c54c:	f7ff bfe0 	b.w	800c510 <xflow>
 800c550:	00000000 	.word	0x00000000
 800c554:	10000000 	.word	0x10000000

0800c558 <__math_oflow>:
 800c558:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c560 <__math_oflow+0x8>
 800c55c:	f7ff bfd8 	b.w	800c510 <xflow>
 800c560:	00000000 	.word	0x00000000
 800c564:	70000000 	.word	0x70000000

0800c568 <__ieee754_sqrt>:
 800c568:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c56c:	4a68      	ldr	r2, [pc, #416]	@ (800c710 <__ieee754_sqrt+0x1a8>)
 800c56e:	ec55 4b10 	vmov	r4, r5, d0
 800c572:	43aa      	bics	r2, r5
 800c574:	462b      	mov	r3, r5
 800c576:	4621      	mov	r1, r4
 800c578:	d110      	bne.n	800c59c <__ieee754_sqrt+0x34>
 800c57a:	4622      	mov	r2, r4
 800c57c:	4620      	mov	r0, r4
 800c57e:	4629      	mov	r1, r5
 800c580:	f7f4 f842 	bl	8000608 <__aeabi_dmul>
 800c584:	4602      	mov	r2, r0
 800c586:	460b      	mov	r3, r1
 800c588:	4620      	mov	r0, r4
 800c58a:	4629      	mov	r1, r5
 800c58c:	f7f3 fe86 	bl	800029c <__adddf3>
 800c590:	4604      	mov	r4, r0
 800c592:	460d      	mov	r5, r1
 800c594:	ec45 4b10 	vmov	d0, r4, r5
 800c598:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c59c:	2d00      	cmp	r5, #0
 800c59e:	dc0e      	bgt.n	800c5be <__ieee754_sqrt+0x56>
 800c5a0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800c5a4:	4322      	orrs	r2, r4
 800c5a6:	d0f5      	beq.n	800c594 <__ieee754_sqrt+0x2c>
 800c5a8:	b19d      	cbz	r5, 800c5d2 <__ieee754_sqrt+0x6a>
 800c5aa:	4622      	mov	r2, r4
 800c5ac:	4620      	mov	r0, r4
 800c5ae:	4629      	mov	r1, r5
 800c5b0:	f7f3 fe72 	bl	8000298 <__aeabi_dsub>
 800c5b4:	4602      	mov	r2, r0
 800c5b6:	460b      	mov	r3, r1
 800c5b8:	f7f4 f950 	bl	800085c <__aeabi_ddiv>
 800c5bc:	e7e8      	b.n	800c590 <__ieee754_sqrt+0x28>
 800c5be:	152a      	asrs	r2, r5, #20
 800c5c0:	d115      	bne.n	800c5ee <__ieee754_sqrt+0x86>
 800c5c2:	2000      	movs	r0, #0
 800c5c4:	e009      	b.n	800c5da <__ieee754_sqrt+0x72>
 800c5c6:	0acb      	lsrs	r3, r1, #11
 800c5c8:	3a15      	subs	r2, #21
 800c5ca:	0549      	lsls	r1, r1, #21
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d0fa      	beq.n	800c5c6 <__ieee754_sqrt+0x5e>
 800c5d0:	e7f7      	b.n	800c5c2 <__ieee754_sqrt+0x5a>
 800c5d2:	462a      	mov	r2, r5
 800c5d4:	e7fa      	b.n	800c5cc <__ieee754_sqrt+0x64>
 800c5d6:	005b      	lsls	r3, r3, #1
 800c5d8:	3001      	adds	r0, #1
 800c5da:	02dc      	lsls	r4, r3, #11
 800c5dc:	d5fb      	bpl.n	800c5d6 <__ieee754_sqrt+0x6e>
 800c5de:	1e44      	subs	r4, r0, #1
 800c5e0:	1b12      	subs	r2, r2, r4
 800c5e2:	f1c0 0420 	rsb	r4, r0, #32
 800c5e6:	fa21 f404 	lsr.w	r4, r1, r4
 800c5ea:	4323      	orrs	r3, r4
 800c5ec:	4081      	lsls	r1, r0
 800c5ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c5f2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800c5f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c5fa:	07d2      	lsls	r2, r2, #31
 800c5fc:	bf5c      	itt	pl
 800c5fe:	005b      	lslpl	r3, r3, #1
 800c600:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800c604:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c608:	bf58      	it	pl
 800c60a:	0049      	lslpl	r1, r1, #1
 800c60c:	2600      	movs	r6, #0
 800c60e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800c612:	106d      	asrs	r5, r5, #1
 800c614:	0049      	lsls	r1, r1, #1
 800c616:	2016      	movs	r0, #22
 800c618:	4632      	mov	r2, r6
 800c61a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800c61e:	1917      	adds	r7, r2, r4
 800c620:	429f      	cmp	r7, r3
 800c622:	bfde      	ittt	le
 800c624:	193a      	addle	r2, r7, r4
 800c626:	1bdb      	suble	r3, r3, r7
 800c628:	1936      	addle	r6, r6, r4
 800c62a:	0fcf      	lsrs	r7, r1, #31
 800c62c:	3801      	subs	r0, #1
 800c62e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800c632:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c636:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800c63a:	d1f0      	bne.n	800c61e <__ieee754_sqrt+0xb6>
 800c63c:	4604      	mov	r4, r0
 800c63e:	2720      	movs	r7, #32
 800c640:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800c644:	429a      	cmp	r2, r3
 800c646:	eb00 0e0c 	add.w	lr, r0, ip
 800c64a:	db02      	blt.n	800c652 <__ieee754_sqrt+0xea>
 800c64c:	d113      	bne.n	800c676 <__ieee754_sqrt+0x10e>
 800c64e:	458e      	cmp	lr, r1
 800c650:	d811      	bhi.n	800c676 <__ieee754_sqrt+0x10e>
 800c652:	f1be 0f00 	cmp.w	lr, #0
 800c656:	eb0e 000c 	add.w	r0, lr, ip
 800c65a:	da42      	bge.n	800c6e2 <__ieee754_sqrt+0x17a>
 800c65c:	2800      	cmp	r0, #0
 800c65e:	db40      	blt.n	800c6e2 <__ieee754_sqrt+0x17a>
 800c660:	f102 0801 	add.w	r8, r2, #1
 800c664:	1a9b      	subs	r3, r3, r2
 800c666:	458e      	cmp	lr, r1
 800c668:	bf88      	it	hi
 800c66a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800c66e:	eba1 010e 	sub.w	r1, r1, lr
 800c672:	4464      	add	r4, ip
 800c674:	4642      	mov	r2, r8
 800c676:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800c67a:	3f01      	subs	r7, #1
 800c67c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800c680:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c684:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800c688:	d1dc      	bne.n	800c644 <__ieee754_sqrt+0xdc>
 800c68a:	4319      	orrs	r1, r3
 800c68c:	d01b      	beq.n	800c6c6 <__ieee754_sqrt+0x15e>
 800c68e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800c714 <__ieee754_sqrt+0x1ac>
 800c692:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800c718 <__ieee754_sqrt+0x1b0>
 800c696:	e9da 0100 	ldrd	r0, r1, [sl]
 800c69a:	e9db 2300 	ldrd	r2, r3, [fp]
 800c69e:	f7f3 fdfb 	bl	8000298 <__aeabi_dsub>
 800c6a2:	e9da 8900 	ldrd	r8, r9, [sl]
 800c6a6:	4602      	mov	r2, r0
 800c6a8:	460b      	mov	r3, r1
 800c6aa:	4640      	mov	r0, r8
 800c6ac:	4649      	mov	r1, r9
 800c6ae:	f7f4 fa27 	bl	8000b00 <__aeabi_dcmple>
 800c6b2:	b140      	cbz	r0, 800c6c6 <__ieee754_sqrt+0x15e>
 800c6b4:	f1b4 3fff 	cmp.w	r4, #4294967295
 800c6b8:	e9da 0100 	ldrd	r0, r1, [sl]
 800c6bc:	e9db 2300 	ldrd	r2, r3, [fp]
 800c6c0:	d111      	bne.n	800c6e6 <__ieee754_sqrt+0x17e>
 800c6c2:	3601      	adds	r6, #1
 800c6c4:	463c      	mov	r4, r7
 800c6c6:	1072      	asrs	r2, r6, #1
 800c6c8:	0863      	lsrs	r3, r4, #1
 800c6ca:	07f1      	lsls	r1, r6, #31
 800c6cc:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800c6d0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800c6d4:	bf48      	it	mi
 800c6d6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800c6da:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800c6de:	4618      	mov	r0, r3
 800c6e0:	e756      	b.n	800c590 <__ieee754_sqrt+0x28>
 800c6e2:	4690      	mov	r8, r2
 800c6e4:	e7be      	b.n	800c664 <__ieee754_sqrt+0xfc>
 800c6e6:	f7f3 fdd9 	bl	800029c <__adddf3>
 800c6ea:	e9da 8900 	ldrd	r8, r9, [sl]
 800c6ee:	4602      	mov	r2, r0
 800c6f0:	460b      	mov	r3, r1
 800c6f2:	4640      	mov	r0, r8
 800c6f4:	4649      	mov	r1, r9
 800c6f6:	f7f4 f9f9 	bl	8000aec <__aeabi_dcmplt>
 800c6fa:	b120      	cbz	r0, 800c706 <__ieee754_sqrt+0x19e>
 800c6fc:	1ca0      	adds	r0, r4, #2
 800c6fe:	bf08      	it	eq
 800c700:	3601      	addeq	r6, #1
 800c702:	3402      	adds	r4, #2
 800c704:	e7df      	b.n	800c6c6 <__ieee754_sqrt+0x15e>
 800c706:	1c63      	adds	r3, r4, #1
 800c708:	f023 0401 	bic.w	r4, r3, #1
 800c70c:	e7db      	b.n	800c6c6 <__ieee754_sqrt+0x15e>
 800c70e:	bf00      	nop
 800c710:	7ff00000 	.word	0x7ff00000
 800c714:	20000238 	.word	0x20000238
 800c718:	20000230 	.word	0x20000230

0800c71c <_init>:
 800c71c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c71e:	bf00      	nop
 800c720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c722:	bc08      	pop	{r3}
 800c724:	469e      	mov	lr, r3
 800c726:	4770      	bx	lr

0800c728 <_fini>:
 800c728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c72a:	bf00      	nop
 800c72c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c72e:	bc08      	pop	{r3}
 800c730:	469e      	mov	lr, r3
 800c732:	4770      	bx	lr
